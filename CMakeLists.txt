################################################################################
# MIT License
#
# Copyright (c) 2017-2018 Mathieu-Andr√© Chiasson
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# 1. The above copyright notice and this permission notice shall be included in
#    all copies or substantial portions of the Software.
#
# Disclaimer:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################

cmake_minimum_required(VERSION 3.0)

set(CMAKE_C_STANDARD 98)
set(CMAKE_CXX_STANDARD 11)

include(cmake/HunterGate.cmake)
HunterGate(
    URL "https://github.com/ruslo/hunter/archive/v0.23.17.tar.gz"
    SHA1 "a438452aa14fc5cbd58f080eee45f07351b27d2f"
)

project(GLBrebis)

################################################################################
# Poco C++ Libraries
################################################################################
hunter_add_package(PocoCpp)
find_package(Poco REQUIRED NetSSL CONFIG)

################################################################################
# RapidXML
################################################################################
hunter_add_package(RapidXML)
find_package(RapidXML REQUIRED CONFIG)

################################################################################
# GLBrebis Console App
################################################################################

configure_file(${PROJECT_SOURCE_DIR}/template/GL.h.template ${PROJECT_BINARY_DIR}/template/GL.h.template COPYONLY)
configure_file(${PROJECT_SOURCE_DIR}/xml/extra.xml          ${PROJECT_BINARY_DIR}/xml/extra.xml          COPYONLY)

function(EmbedResource RESOURCE)
    get_filename_component(RESOURCE_WORKSPACE ${RESOURCE} DIRECTORY)
    add_custom_command(
        OUTPUT
            ${RESOURCE}.c
            ${RESOURCE}.h
        COMMAND
            ${CMAKE_COMMAND} -Dresource=${RESOURCE} -P ${PROJECT_SOURCE_DIR}/cmake/EmbedResource.cmake
        WORKING_DIRECTORY
            ${RESOURCE_WORKSPACE}
        MAIN_DEPENDENCY
            ${RESOURCE}
        DEPENDS
            ${RESOURCE}
    )
    set_source_files_properties(${RESOURCE}.c PROPERTIES GENERATED TRUE)
    set_source_files_properties(${RESOURCE}.h PROPERTIES GENERATED TRUE)
endfunction()

EmbedResource(${PROJECT_BINARY_DIR}/template/GL.h.template)
EmbedResource(${PROJECT_BINARY_DIR}/xml/extra.xml)

add_library(GLBrebisLib STATIC
    src/GLBrebisCodeGenerator.cpp
    src/GLBrebisCodeGenerator.h
    src/GLBrebisData.cpp
    src/GLBrebisData.h
    src/GLBrebisParser.cpp
    src/GLBrebisParser.h
    src/GLBrebisUtilities.cpp
    src/GLBrebisUtilities.h
    template/GL.h.template
    xml/extra.xml

    #generated by EmbedResource.cmake
    ${PROJECT_BINARY_DIR}/template/GL.h.template.c
    ${PROJECT_BINARY_DIR}/template/GL.h.template.h
    ${PROJECT_BINARY_DIR}/xml/extra.xml.c
    ${PROJECT_BINARY_DIR}/xml/extra.xml.h
)

target_include_directories(GLBrebisLib PUBLIC
    # to access generated headers created by EmbedResource.cmake
    ${PROJECT_BINARY_DIR}
)

target_link_libraries(GLBrebisLib
    PUBLIC
    RapidXML::RapidXML
    Poco::NetSSL
)

add_executable(GLBrebis src/GLBrebisApp.cpp src/GLBrebisApp.h)
target_link_libraries(GLBrebis GLBrebisLib)

add_custom_command(
    TARGET
        GLBrebis POST_BUILD
    COMMAND
        ${PROJECT_BINARY_DIR}/GLBrebis
    WORKING_DIRECTORY
        ${PROJECT_SOURCE_DIR}/example
)

################################################################################
# GLBrebis Example App
################################################################################
add_subdirectory(example)

# To insure that GLBrebis is built first because GLBrebis generates the
# example/BrebisGL.h using the latest downloaded khronos API schematics, which
# will always upgrade example/BrebisGL.h to the latest. Any example/BrebisGL.h
# deltas should be commited to git for convenience.
add_dependencies(MutCube GLBrebis)
