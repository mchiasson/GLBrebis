/*******************************************************************************
 * This file was generated by GLBrebis on <%=now%>
 * https://github.com/mchiasson/GLBrebis
 *
 * The content of this file is the result of parsing the following headers:
 * https://www.khronos.org/registry/gles/api/GLES3/gl32.h
 * https://www.khronos.org/registry/gles/api/GLES2/gl2ext.h
 * https://www.opengl.org/registry/api/GL/glcorearb.h
 * https://www.opengl.org/registry/api/GL/glext.h
 *******************************************************************************
 * GLBrebis License (MIT)
 *******************************************************************************
 * Copyright (c) <%=year%> Mathieu-Andr√© Chiasson
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *******************************************************************************
 * GLES3/gl32.h, GLES2/gl2ext.h, GL/glcorearb.h, GL/glext.h License
 *******************************************************************************
** Copyright (c) 2013-2017 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*******************************************************************************/

/*!
 * This file was generated by GLBrebis on <%=now%>
 * https://github.com/mchiasson/GLBrebis
 */
 
#ifndef _<%=PREFIX%>_GL_H_
#define _<%=PREFIX%>_GL_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#if __native_client__ || __EMSCRIPTEN__
    #include <GLES2/gl2.h>
    #define <%=PREFIX%>_WRANGLER_ENABLED 0
#else
    #if defined(__glu_h__)
        #error("GL/glu.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl_h_)
        <%=PREFIX%>_ERROR("GL/gl.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl2_h_)
        <%=PREFIX%>_ERROR("GL/gl2.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__glcorearb_h_)
        <%=PREFIX%>_ERROR("GL/glcorearb.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl20_h_)
        <%=PREFIX%>_ERROR("GLES2/gl2.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl_es20_h_)
        <%=PREFIX%>_ERROR("OpenGLES/ES2/gl.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl30_h_)
        <%=PREFIX%>_ERROR("GLES3/gl3.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl_es30_h_)
        <%=PREFIX%>_ERROR("OpenGLES/ES3/gl.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl31_h_)
        <%=PREFIX%>_ERROR("GLES3/gl31.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl32_h_)
        <%=PREFIX%>_ERROR("GLES3/gl32.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__glext_h_)
        <%=PREFIX%>_ERROR("GL/glext.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl2ext_h_)
        <%=PREFIX%>_ERROR("GL/glext.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl_es20ext_h_)
        <%=PREFIX%>_ERROR("OpenGLES/ES2/glext.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gl_es30ext_h_)
        <%=PREFIX%>_ERROR("OpenGLES/ES3/glext.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #if defined(__gltypes_h_)
        <%=PREFIX%>_ERROR("gltypes.h cannot be included before <%=Prefix%>GL.h")
    #endif

    #define __glu_h__ 1
    #define __gl_h_ 1
    #define __gl2_h_ 1
    #define __glcorearb_h_ 1
    #define __gl20_h_ 1
    #define __gl_es20_h_ 1
    #define __gl30_h_ 1
    #define __gl_es30_h_ 1
    #define __gl31_h_ 1
    #define __gl32_h_ 1
    #define __glext_h_ 1
    #define __gl2ext_h_ 1
    #define __gl_es20ext_h_ 1
    #define __gl_es30ext_h_ 1
    #define __gltypes_h_ 1

    #define <%=PREFIX%>_WRANGLER_ENABLED 1
<%for (define in result.getAllUniqueDefines()) {%>
    #undef <%=define.name%>
    #define <%=define.name + (define.value.length() > 0 ? (" " + define.value.toString()) : "")%><%}%>

    /* Version IDs */<%
    int ID = 0
    for (version in result.getAllUniqueVersionGroups()) {%>
    #undef <%=version.name%>
    #define <%=version.name + " " + (++ID).toString()%><%}%>

    /* Extension IDs */<%
    for (ext in result.getAllUniqueExtensionGroups()) {%>
    #undef <%=ext.name%>
    #define <%=ext.name + " " + (++ID).toString()%><%}%>

#endif

#ifndef <%=PREFIX%>_STD_CALL
    #if defined(_WIN32)
        #define <%=PREFIX%>_STD_CALL __stdcall
    #else
        #define <%=PREFIX%>_STD_CALL
    #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void (*<%=prefix%>GLProc)(void);

bool <%=prefix%>GLInit();
void <%=prefix%>GLShutdown();
<%=prefix%>GLProc <%=prefix%>GLGetProcAddress(const char* procName);

/*!
     Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.

     Usage example:

     \\code
     if(<%=prefix%>GLSupport(GL_VERSION_3_0) || <%=prefix%>GLSupport(GL_ES_VERSION_3_0))
     {
         void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
         std::copy(buffer.begin(), buffer.end(), pMapped);
         glUnmapBuffer(target);
     }
     else if (<%=prefix%>GLSupport(GL_EXT_map_buffer_range) && <%=prefix%>GLSupport(GL_OES_mapbuffer)
     {
         void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
         std::copy(buffer.begin(), buffer.end(), pMapped);
         glUnmapBufferOES(target);
     }
     else
     {
         glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
     }
     \\endcode
 */
static inline bool <%=prefix%>GLSupport(size_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \\code
         // Only checks if compiled in debug.
         <%=prefix%>GLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         <%=prefix%>GLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \\endcode

     \\note <%=prefix%>GLCheckErrorDebug is disabled when the application is compiled for a release build.
     \\warning calling glGetError can affect your rendering performance. We recommend
     using <%=prefix%>GLCheckErrorDebug instead of <%=prefix%>GLCheckError so that the production
     build won't be impacted. If you want to use <%=prefix%>GLCheckError, make sure it is not called
     during time critical code path.
 */
void _<%=prefix%>GLCheckError(const char* fileName, int lineNumber, const char* functionName);
#undef <%=prefix%>GLCheckError
#define <%=prefix%>GLCheckError(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__, __func__)
#if defined(_DEBUG) && !defined(NDEBUG)
    #undef <%=prefix%>GLCheckErrorDebug
    #define <%=prefix%>GLCheckErrorDebug(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__, __func__)
#else
    #undef <%=prefix%>GLCheckErrorDebug
    #define <%=prefix%>GLCheckErrorDebug(x) x
#endif

typedef struct <%=Prefix%>GLAPIConfig
{
    bool        bIsGLES;
    const char* pRenderer;
    const char* pVendor;
    const char* pVersion;
    int32_t     nVersionMajor;
    int32_t     nVersionMinor;
    const char* extensions[<%=Math.max(result.getAllUniqueGLExtensionGroups().size(), result.getAllUniqueGLESExtensionGroups().size())%>];
    size_t      extensionsCount;
    const char* pShadingLanguageVersion;
    int32_t     nShadingLanguageVersionMajor;
    int32_t     nShadingLanguageVersionMinor;
    bool        supportedExtensions[<%=result.getAllUniqueVersionGroups().size() + result.getAllUniqueExtensionGroups().size() + 1%>];

    /* GL function pointers */<%for (function in result.getAllUniqueVersionFunctions()) {%>
    <%=prefix%>GLProc <%=prefix%>Gl<%=function.name.substring(2)%>Proc;<%}%>

    /* GL extension function pointers */<%for (function in result.getAllUniqueExtensionFunctions()) {%>
    <%=prefix%>GLProc <%=prefix%>Gl<%=function.name.substring(2)%>Proc;<%}%>
} <%=Prefix%>GLAPIConfig;

extern <%=Prefix%>GLAPIConfig <%=prefix%>GLAPI;

static inline bool <%=prefix%>GLSupport(size_t extensionID) {
    return <%=prefix%>GLAPI.supportedExtensions[extensionID];
}

#if <%=PREFIX%>_WRANGLER_ENABLED
/* Type definitions */<%for (typedef in result.getAllUniqueTypedefs()) {%>
<%=typedef.signature%><%}%>
    
/* Function pointer type definitions */<%for (funcPtr in result.getAllUniqueFuncPtrs()) {%>
<%=funcPtr.signature%><%}%>
    
/* Data structures */<%for (struct in result.getAllUniqueStructs()) {%>
<%=struct.getSignature()%><%}%>

<%for (function in result.getAllUniqueVersionFunctions()) {%>
static inline <%=function.returnParam + (function.returnParam.endsWith("*") ? "" : " ")%><%=prefix%>GL<%=function.name.substring(2)%>(<%=function.paramDeclaration%>) {
    <%=function.returnParam.equalsIgnoreCase("void") ? "" : "return "%>((<%=function.returnParam + (function.returnParam.endsWith("*") ? "" : " ")%>(<%=PREFIX%>_STD_CALL *)(<%=function.paramDeclaration%>))<%=prefix%>GLAPI.<%=prefix%>Gl<%=function.name.substring(2)%>Proc)(<%=function.paramCall%>);
}
#undef <%=function.name%>
#define <%=function.name%> <%=prefix%>GL<%=function.name.substring(2)%>
<%}%>
#endif /* <%=PREFIX%>_WRANGLER_ENABLED */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* _<%=PREFIX%>_GL_H_ */
