/*******************************************************************************
 * This file was generated by GLBrebis on 2017-07-16 23:05:08-0400
 * https://github.com/mchiasson/GLBrebis
 *******************************************************************************
 * GLBrebis License (MIT)
 *******************************************************************************
 * Copyright (c) 2015-2017 Mathieu-Andr√© Chiasson
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

/*******************************************************************************
 * The generated content of this file is the result of parsing the following
 * headers from Khronos Group Inc. 
 * https://www.khronos.org/registry/gles/api/GLES3/gl32.h
 * https://www.khronos.org/registry/gles/api/GLES2/gl2ext.h
 * https://www.opengl.org/registry/api/GL/glcorearb.h
 * https://www.opengl.org/registry/api/GL/glext.h
 *******************************************************************************
 * Khronos License
 *******************************************************************************
 * Copyright (c) 2013-2017 The Khronos Group Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and/or associated documentation files (the
 * "Materials"), to deal in the Materials without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Materials, and to
 * permit persons to whom the Materials are furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Materials.
 *
 * THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 ******************************************************************************/
#ifndef _MUT_GL_H_
#define _MUT_GL_H_ 1

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#if !defined(MUT_GL_WRANGLER_ENABLED)
    #if __native_client__ || __EMSCRIPTEN__
        #include <GLES2/gl2.h>
        #include <GLES2/gl2ext.h>
        #define MUT_GL_WRANGLER_ENABLED 0
    #else
        #define MUT_GL_WRANGLER_ENABLED 1
    #endif
#endif

#if !defined(MUT_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define MUT_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define MUT_FORCE_INLINE __attribute__((always_inline)) static __inline__
    #else
        #define MUT_FORCE_INLINE static inline
    #endif
#endif

#ifndef MUT_STD_CALL
    #if defined(_WIN32)
        #define MUT_STD_CALL __stdcall
    #else
        #define MUT_STD_CALL
    #endif
#endif

#if MUT_GL_WRANGLER_ENABLED
    #if defined(__glu_h__)
        #error "GL/glu.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl_h_)
        #error "GL/gl.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl2_h_)
        #error "GL/gl2.h cannot be included before MutGL.h"
    #endif

    #if defined(__glcorearb_h_)
        #error "GL/glcorearb.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl20_h_)
        #error "GLES2/gl2.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl_es20_h_)
        #error "OpenGLES/ES2/gl.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl30_h_)
        #error "GLES3/gl3.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl_es30_h_)
        #error "OpenGLES/ES3/gl.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl31_h_)
        #error "GLES3/gl31.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl32_h_)
        #error "GLES3/gl32.h cannot be included before MutGL.h"
    #endif

    #if defined(__glext_h_)
        #error "GL/glext.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl2ext_h_)
        #error "GL/glext.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl_es20ext_h_)
        #error "OpenGLES/ES2/glext.h cannot be included before MutGL.h"
    #endif

    #if defined(__gl_es30ext_h_)
        #error "OpenGLES/ES3/glext.h cannot be included before MutGL.h"
    #endif

    #if defined(__gltypes_h_)
        #error "gltypes.h cannot be included before MutGL.h"
    #endif

    #define __glu_h__ 1
    #define __gl_h_ 1
    #define __gl2_h_ 1
    #define __glcorearb_h_ 1
    #define __gl20_h_ 1
    #define __gl_es20_h_ 1
    #define __gl30_h_ 1
    #define __gl_es30_h_ 1
    #define __gl31_h_ 1
    #define __gl32_h_ 1
    #define __glext_h_ 1
    #define __gl2ext_h_ 1
    #define __gl_es20ext_h_ 1
    #define __gl_es30ext_h_ 1
    #define __gltypes_h_ 1
#endif

    #define GL_1PASS_EXT 0x80A1
    #define GL_1PASS_SGIS 0x80A1
    #define GL_2PASS_0_EXT 0x80A2
    #define GL_2PASS_0_SGIS 0x80A2
    #define GL_2PASS_1_EXT 0x80A3
    #define GL_2PASS_1_SGIS 0x80A3
    #define GL_2X_BIT_ATI 0x00000001
    #define GL_2_BYTES_NV 0x1407
    #define GL_3DC_XY_AMD 0x87FA
    #define GL_3DC_X_AMD 0x87F9
    #define GL_3_BYTES_NV 0x1408
    #define GL_422_AVERAGE_EXT 0x80CE
    #define GL_422_EXT 0x80CC
    #define GL_422_REV_AVERAGE_EXT 0x80CF
    #define GL_422_REV_EXT 0x80CD
    #define GL_4PASS_0_EXT 0x80A4
    #define GL_4PASS_0_SGIS 0x80A4
    #define GL_4PASS_1_EXT 0x80A5
    #define GL_4PASS_1_SGIS 0x80A5
    #define GL_4PASS_2_EXT 0x80A6
    #define GL_4PASS_2_SGIS 0x80A6
    #define GL_4PASS_3_EXT 0x80A7
    #define GL_4PASS_3_SGIS 0x80A7
    #define GL_4X_BIT_ATI 0x00000002
    #define GL_4_BYTES_NV 0x1409
    #define GL_8X_BIT_ATI 0x00000004
    #define GL_ABGR_EXT 0x8000
    #define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
    #define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
    #define GL_ACTIVE_ATTRIBUTES 0x8B89
    #define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
    #define GL_ACTIVE_PROGRAM 0x8259
    #define GL_ACTIVE_PROGRAM_EXT 0x8259
    #define GL_ACTIVE_RESOURCES 0x92F5
    #define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
    #define GL_ACTIVE_SUBROUTINES 0x8DE5
    #define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
    #define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
    #define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
    #define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
    #define GL_ACTIVE_TEXTURE 0x84E0
    #define GL_ACTIVE_TEXTURE_ARB 0x84E0
    #define GL_ACTIVE_UNIFORMS 0x8B86
    #define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
    #define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
    #define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
    #define GL_ACTIVE_VARIABLES 0x9305
    #define GL_ACTIVE_VARYINGS_NV 0x8C81
    #define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
    #define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
    #define GL_ADD_ATI 0x8963
    #define GL_ADD_SIGNED 0x8574
    #define GL_ADD_SIGNED_ARB 0x8574
    #define GL_ADD_SIGNED_EXT 0x8574
    #define GL_ADJACENT_PAIRS_NV 0x90AE
    #define GL_AFFINE_2D_NV 0x9092
    #define GL_AFFINE_3D_NV 0x9094
    #define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
    #define GL_ALIASED_POINT_SIZE_RANGE 0x846D
    #define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
    #define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
    #define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
    #define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
    #define GL_ALL_BARRIER_BITS 0xFFFFFFFF
    #define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
    #define GL_ALL_COMPLETED_NV 0x84F2
    #define GL_ALL_PIXELS_AMD 0xFFFFFFFF
    #define GL_ALL_SHADER_BITS 0xFFFFFFFF
    #define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
    #define GL_ALL_STATIC_DATA_IBM 103060
    #define GL_ALPHA 0x1906
    #define GL_ALPHA12_EXT 0x803D
    #define GL_ALPHA16F_ARB 0x881C
    #define GL_ALPHA16F_EXT 0x881C
    #define GL_ALPHA16I_EXT 0x8D8A
    #define GL_ALPHA16UI_EXT 0x8D78
    #define GL_ALPHA16_EXT 0x803E
    #define GL_ALPHA16_SNORM 0x9018
    #define GL_ALPHA32F_ARB 0x8816
    #define GL_ALPHA32F_EXT 0x8816
    #define GL_ALPHA32I_EXT 0x8D84
    #define GL_ALPHA32UI_EXT 0x8D72
    #define GL_ALPHA4_EXT 0x803B
    #define GL_ALPHA8I_EXT 0x8D90
    #define GL_ALPHA8UI_EXT 0x8D7E
    #define GL_ALPHA8_EXT 0x803C
    #define GL_ALPHA8_OES 0x803C
    #define GL_ALPHA8_SNORM 0x9014
    #define GL_ALPHA_BITS 0x0D55
    #define GL_ALPHA_FLOAT16_APPLE 0x881C
    #define GL_ALPHA_FLOAT16_ATI 0x881C
    #define GL_ALPHA_FLOAT32_APPLE 0x8816
    #define GL_ALPHA_FLOAT32_ATI 0x8816
    #define GL_ALPHA_INTEGER 0x8D97
    #define GL_ALPHA_INTEGER_EXT 0x8D97
    #define GL_ALPHA_MAX_CLAMP_INGR 0x8567
    #define GL_ALPHA_MAX_SGIX 0x8321
    #define GL_ALPHA_MIN_CLAMP_INGR 0x8563
    #define GL_ALPHA_MIN_SGIX 0x8320
    #define GL_ALPHA_REF_COMMAND_NV 0x000F
    #define GL_ALPHA_SNORM 0x9010
    #define GL_ALPHA_TEST_FUNC_QCOM 0x0BC1
    #define GL_ALPHA_TEST_QCOM 0x0BC0
    #define GL_ALPHA_TEST_REF_QCOM 0x0BC2
    #define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
    #define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
    #define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
    #define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
    #define GL_ALREADY_SIGNALED 0x911A
    #define GL_ALREADY_SIGNALED_APPLE 0x911A
    #define GL_ALWAYS 0x0207
    #define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
    #define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
    #define GL_AND 0x1501
    #define GL_AND_INVERTED 0x1504
    #define GL_AND_REVERSE 0x1502
    #define GL_ANY_SAMPLES_PASSED 0x8C2F
    #define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
    #define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0x8D6A
    #define GL_ANY_SAMPLES_PASSED_EXT 0x8C2F
    #define GL_ARC_TO_NV 0xFE
    #define GL_ARRAY_BUFFER 0x8892
    #define GL_ARRAY_BUFFER_ARB 0x8892
    #define GL_ARRAY_BUFFER_BINDING 0x8894
    #define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
    #define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
    #define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
    #define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
    #define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
    #define GL_ARRAY_SIZE 0x92FB
    #define GL_ARRAY_STRIDE 0x92FE
    #define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
    #define GL_ASYNC_HISTOGRAM_SGIX 0x832C
    #define GL_ASYNC_MARKER_SGIX 0x8329
    #define GL_ASYNC_READ_PIXELS_SGIX 0x835E
    #define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
    #define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0x8C93
    #define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0x87EE
    #define GL_ATC_RGB_AMD 0x8C92
    #define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
    #define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
    #define GL_ATOMIC_COUNTER_BUFFER 0x92C0
    #define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
    #define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
    #define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
    #define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
    #define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
    #define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
    #define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
    #define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
    #define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
    #define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
    #define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
    #define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
    #define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
    #define GL_ATTACHED_SHADERS 0x8B85
    #define GL_ATTENUATION_EXT 0x834D
    #define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
    #define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
    #define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
    #define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
    #define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
    #define GL_AUTO_GENERATE_MIPMAP 0x8295
    #define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
    #define GL_AVERAGE_EXT 0x8335
    #define GL_AVERAGE_HP 0x8160
    #define GL_BACK 0x0405
    #define GL_BACK_LEFT 0x0402
    #define GL_BACK_NORMALS_HINT_PGI 0x1A223
    #define GL_BACK_PRIMARY_COLOR_NV 0x8C77
    #define GL_BACK_RIGHT 0x0403
    #define GL_BACK_SECONDARY_COLOR_NV 0x8C78
    #define GL_BEVEL_NV 0x90A6
    #define GL_BGR 0x80E0
    #define GL_BGRA 0x80E1
    #define GL_BGRA8_EXT 0x93A1
    #define GL_BGRA_EXT 0x80E1
    #define GL_BGRA_IMG 0x80E1
    #define GL_BGRA_INTEGER 0x8D9B
    #define GL_BGRA_INTEGER_EXT 0x8D9B
    #define GL_BGR_EXT 0x80E0
    #define GL_BGR_INTEGER 0x8D9A
    #define GL_BGR_INTEGER_EXT 0x8D9A
    #define GL_BIAS_BIT_ATI 0x00000008
    #define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
    #define GL_BINNING_CONTROL_HINT_QCOM 0x8FB0
    #define GL_BINORMAL_ARRAY_EXT 0x843A
    #define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
    #define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
    #define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
    #define GL_BLEND 0x0BE2
    #define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
    #define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
    #define GL_BLEND_COLOR 0x8005
    #define GL_BLEND_COLOR_COMMAND_NV 0x000B
    #define GL_BLEND_COLOR_EXT 0x8005
    #define GL_BLEND_DST 0x0BE0
    #define GL_BLEND_DST_ALPHA 0x80CA
    #define GL_BLEND_DST_ALPHA_EXT 0x80CA
    #define GL_BLEND_DST_RGB 0x80C8
    #define GL_BLEND_DST_RGB_EXT 0x80C8
    #define GL_BLEND_EQUATION 0x8009
    #define GL_BLEND_EQUATION_ALPHA 0x883D
    #define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
    #define GL_BLEND_EQUATION_EXT 0x8009
    #define GL_BLEND_EQUATION_RGB 0x8009
    #define GL_BLEND_EQUATION_RGB_EXT 0x8009
    #define GL_BLEND_OVERLAP_NV 0x9281
    #define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
    #define GL_BLEND_SRC 0x0BE1
    #define GL_BLEND_SRC_ALPHA 0x80CB
    #define GL_BLEND_SRC_ALPHA_EXT 0x80CB
    #define GL_BLEND_SRC_RGB 0x80C9
    #define GL_BLEND_SRC_RGB_EXT 0x80C9
    #define GL_BLOCK_INDEX 0x92FD
    #define GL_BLUE 0x1905
    #define GL_BLUE_BITS 0x0D54
    #define GL_BLUE_BIT_ATI 0x00000004
    #define GL_BLUE_INTEGER 0x8D96
    #define GL_BLUE_INTEGER_EXT 0x8D96
    #define GL_BLUE_MAX_CLAMP_INGR 0x8566
    #define GL_BLUE_MIN_CLAMP_INGR 0x8562
    #define GL_BLUE_NV 0x1905
    #define GL_BOLD_BIT_NV 0x01
    #define GL_BOOL 0x8B56
    #define GL_BOOL_ARB 0x8B56
    #define GL_BOOL_VEC2 0x8B57
    #define GL_BOOL_VEC2_ARB 0x8B57
    #define GL_BOOL_VEC3 0x8B58
    #define GL_BOOL_VEC3_ARB 0x8B58
    #define GL_BOOL_VEC4 0x8B59
    #define GL_BOOL_VEC4_ARB 0x8B59
    #define GL_BOUNDING_BOX_NV 0x908D
    #define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
    #define GL_BUFFER 0x82E0
    #define GL_BUFFER_ACCESS 0x88BB
    #define GL_BUFFER_ACCESS_ARB 0x88BB
    #define GL_BUFFER_ACCESS_FLAGS 0x911F
    #define GL_BUFFER_ACCESS_OES 0x88BB
    #define GL_BUFFER_BINDING 0x9302
    #define GL_BUFFER_DATA_SIZE 0x9303
    #define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
    #define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
    #define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
    #define GL_BUFFER_IMMUTABLE_STORAGE_EXT 0x821F
    #define GL_BUFFER_KHR 0x82E0
    #define GL_BUFFER_MAPPED 0x88BC
    #define GL_BUFFER_MAPPED_ARB 0x88BC
    #define GL_BUFFER_MAPPED_OES 0x88BC
    #define GL_BUFFER_MAP_LENGTH 0x9120
    #define GL_BUFFER_MAP_OFFSET 0x9121
    #define GL_BUFFER_MAP_POINTER 0x88BD
    #define GL_BUFFER_MAP_POINTER_ARB 0x88BD
    #define GL_BUFFER_MAP_POINTER_OES 0x88BD
    #define GL_BUFFER_OBJECT_APPLE 0x85B3
    #define GL_BUFFER_OBJECT_EXT 0x9151
    #define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
    #define GL_BUFFER_SIZE 0x8764
    #define GL_BUFFER_SIZE_ARB 0x8764
    #define GL_BUFFER_STORAGE_FLAGS 0x8220
    #define GL_BUFFER_STORAGE_FLAGS_EXT 0x8220
    #define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
    #define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
    #define GL_BUFFER_USAGE 0x8765
    #define GL_BUFFER_USAGE_ARB 0x8765
    #define GL_BUFFER_VARIABLE 0x92E5
    #define GL_BUMP_ENVMAP_ATI 0x877B
    #define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
    #define GL_BUMP_ROT_MATRIX_ATI 0x8775
    #define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
    #define GL_BUMP_TARGET_ATI 0x877C
    #define GL_BUMP_TEX_UNITS_ATI 0x8778
    #define GL_BYTE 0x1400
    #define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
    #define GL_CAVEAT_SUPPORT 0x82B8
    #define GL_CCW 0x0901
    #define GL_CG_FRAGMENT_SHADER_EXT 0x890F
    #define GL_CG_VERTEX_SHADER_EXT 0x890E
    #define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
    #define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
    #define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
    #define GL_CLAMP_FRAGMENT_COLOR 0x891B
    #define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
    #define GL_CLAMP_READ_COLOR 0x891C
    #define GL_CLAMP_READ_COLOR_ARB 0x891C
    #define GL_CLAMP_TO_BORDER 0x812D
    #define GL_CLAMP_TO_BORDER_ARB 0x812D
    #define GL_CLAMP_TO_BORDER_EXT 0x812D
    #define GL_CLAMP_TO_BORDER_NV 0x812D
    #define GL_CLAMP_TO_BORDER_OES 0x812D
    #define GL_CLAMP_TO_BORDER_SGIS 0x812D
    #define GL_CLAMP_TO_EDGE 0x812F
    #define GL_CLAMP_TO_EDGE_EXT 0x812F
    #define GL_CLAMP_TO_EDGE_SGIS 0x812F
    #define GL_CLAMP_VERTEX_COLOR 0x891A
    #define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
    #define GL_CLEAR 0x1500
    #define GL_CLEAR_BUFFER 0x82B4
    #define GL_CLEAR_TEXTURE 0x9365
    #define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
    #define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
    #define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
    #define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0x00004000
    #define GL_CLIENT_STORAGE_BIT 0x0200
    #define GL_CLIENT_STORAGE_BIT_EXT 0x0200
    #define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
    #define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
    #define GL_CLIP_DEPTH_MODE 0x935D
    #define GL_CLIP_DISTANCE0 0x3000
    #define GL_CLIP_DISTANCE0_APPLE 0x3000
    #define GL_CLIP_DISTANCE0_EXT 0x3000
    #define GL_CLIP_DISTANCE1 0x3001
    #define GL_CLIP_DISTANCE1_APPLE 0x3001
    #define GL_CLIP_DISTANCE1_EXT 0x3001
    #define GL_CLIP_DISTANCE2 0x3002
    #define GL_CLIP_DISTANCE2_APPLE 0x3002
    #define GL_CLIP_DISTANCE2_EXT 0x3002
    #define GL_CLIP_DISTANCE3 0x3003
    #define GL_CLIP_DISTANCE3_APPLE 0x3003
    #define GL_CLIP_DISTANCE3_EXT 0x3003
    #define GL_CLIP_DISTANCE4 0x3004
    #define GL_CLIP_DISTANCE4_APPLE 0x3004
    #define GL_CLIP_DISTANCE4_EXT 0x3004
    #define GL_CLIP_DISTANCE5 0x3005
    #define GL_CLIP_DISTANCE5_APPLE 0x3005
    #define GL_CLIP_DISTANCE5_EXT 0x3005
    #define GL_CLIP_DISTANCE6 0x3006
    #define GL_CLIP_DISTANCE6_APPLE 0x3006
    #define GL_CLIP_DISTANCE6_EXT 0x3006
    #define GL_CLIP_DISTANCE7 0x3007
    #define GL_CLIP_DISTANCE7_APPLE 0x3007
    #define GL_CLIP_DISTANCE7_EXT 0x3007
    #define GL_CLIP_DISTANCE_NV 0x8C7A
    #define GL_CLIP_FAR_HINT_PGI 0x1A221
    #define GL_CLIP_NEAR_HINT_PGI 0x1A220
    #define GL_CLIP_ORIGIN 0x935C
    #define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
    #define GL_CLOSE_PATH_NV 0x00
    #define GL_CMYKA_EXT 0x800D
    #define GL_CMYK_EXT 0x800C
    #define GL_CND0_ATI 0x896B
    #define GL_CND_ATI 0x896A
    #define GL_COLOR 0x1800
    #define GL_COLOR3_BIT_PGI 0x00010000
    #define GL_COLOR4_BIT_PGI 0x00020000
    #define GL_COLORBURN 0x929A
    #define GL_COLORBURN_KHR 0x929A
    #define GL_COLORBURN_NV 0x929A
    #define GL_COLORDODGE 0x9299
    #define GL_COLORDODGE_KHR 0x9299
    #define GL_COLORDODGE_NV 0x9299
    #define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
    #define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
    #define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
    #define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
    #define GL_COLOR_ARRAY_COUNT_EXT 0x8084
    #define GL_COLOR_ARRAY_EXT 0x8076
    #define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
    #define GL_COLOR_ARRAY_LIST_IBM 103072
    #define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
    #define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
    #define GL_COLOR_ARRAY_POINTER_EXT 0x8090
    #define GL_COLOR_ARRAY_SIZE_EXT 0x8081
    #define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
    #define GL_COLOR_ARRAY_TYPE_EXT 0x8082
    #define GL_COLOR_ATTACHMENT0 0x8CE0
    #define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
    #define GL_COLOR_ATTACHMENT0_NV 0x8CE0
    #define GL_COLOR_ATTACHMENT1 0x8CE1
    #define GL_COLOR_ATTACHMENT10 0x8CEA
    #define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
    #define GL_COLOR_ATTACHMENT10_NV 0x8CEA
    #define GL_COLOR_ATTACHMENT11 0x8CEB
    #define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
    #define GL_COLOR_ATTACHMENT11_NV 0x8CEB
    #define GL_COLOR_ATTACHMENT12 0x8CEC
    #define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
    #define GL_COLOR_ATTACHMENT12_NV 0x8CEC
    #define GL_COLOR_ATTACHMENT13 0x8CED
    #define GL_COLOR_ATTACHMENT13_EXT 0x8CED
    #define GL_COLOR_ATTACHMENT13_NV 0x8CED
    #define GL_COLOR_ATTACHMENT14 0x8CEE
    #define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
    #define GL_COLOR_ATTACHMENT14_NV 0x8CEE
    #define GL_COLOR_ATTACHMENT15 0x8CEF
    #define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
    #define GL_COLOR_ATTACHMENT15_NV 0x8CEF
    #define GL_COLOR_ATTACHMENT16 0x8CF0
    #define GL_COLOR_ATTACHMENT17 0x8CF1
    #define GL_COLOR_ATTACHMENT18 0x8CF2
    #define GL_COLOR_ATTACHMENT19 0x8CF3
    #define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
    #define GL_COLOR_ATTACHMENT1_NV 0x8CE1
    #define GL_COLOR_ATTACHMENT2 0x8CE2
    #define GL_COLOR_ATTACHMENT20 0x8CF4
    #define GL_COLOR_ATTACHMENT21 0x8CF5
    #define GL_COLOR_ATTACHMENT22 0x8CF6
    #define GL_COLOR_ATTACHMENT23 0x8CF7
    #define GL_COLOR_ATTACHMENT24 0x8CF8
    #define GL_COLOR_ATTACHMENT25 0x8CF9
    #define GL_COLOR_ATTACHMENT26 0x8CFA
    #define GL_COLOR_ATTACHMENT27 0x8CFB
    #define GL_COLOR_ATTACHMENT28 0x8CFC
    #define GL_COLOR_ATTACHMENT29 0x8CFD
    #define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
    #define GL_COLOR_ATTACHMENT2_NV 0x8CE2
    #define GL_COLOR_ATTACHMENT3 0x8CE3
    #define GL_COLOR_ATTACHMENT30 0x8CFE
    #define GL_COLOR_ATTACHMENT31 0x8CFF
    #define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
    #define GL_COLOR_ATTACHMENT3_NV 0x8CE3
    #define GL_COLOR_ATTACHMENT4 0x8CE4
    #define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
    #define GL_COLOR_ATTACHMENT4_NV 0x8CE4
    #define GL_COLOR_ATTACHMENT5 0x8CE5
    #define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
    #define GL_COLOR_ATTACHMENT5_NV 0x8CE5
    #define GL_COLOR_ATTACHMENT6 0x8CE6
    #define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
    #define GL_COLOR_ATTACHMENT6_NV 0x8CE6
    #define GL_COLOR_ATTACHMENT7 0x8CE7
    #define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
    #define GL_COLOR_ATTACHMENT7_NV 0x8CE7
    #define GL_COLOR_ATTACHMENT8 0x8CE8
    #define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
    #define GL_COLOR_ATTACHMENT8_NV 0x8CE8
    #define GL_COLOR_ATTACHMENT9 0x8CE9
    #define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
    #define GL_COLOR_ATTACHMENT9_NV 0x8CE9
    #define GL_COLOR_ATTACHMENT_EXT 0x90F0
    #define GL_COLOR_BUFFER_BIT 0x00004000
    #define GL_COLOR_BUFFER_BIT0_QCOM 0x00000001
    #define GL_COLOR_BUFFER_BIT1_QCOM 0x00000002
    #define GL_COLOR_BUFFER_BIT2_QCOM 0x00000004
    #define GL_COLOR_BUFFER_BIT3_QCOM 0x00000008
    #define GL_COLOR_BUFFER_BIT4_QCOM 0x00000010
    #define GL_COLOR_BUFFER_BIT5_QCOM 0x00000020
    #define GL_COLOR_BUFFER_BIT6_QCOM 0x00000040
    #define GL_COLOR_BUFFER_BIT7_QCOM 0x00000080
    #define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
    #define GL_COLOR_CLEAR_VALUE 0x0C22
    #define GL_COLOR_COMPONENTS 0x8283
    #define GL_COLOR_ENCODING 0x8296
    #define GL_COLOR_EXT 0x1800
    #define GL_COLOR_FLOAT_APPLE 0x8A0F
    #define GL_COLOR_INDEX12_EXT 0x80E6
    #define GL_COLOR_INDEX16_EXT 0x80E7
    #define GL_COLOR_INDEX1_EXT 0x80E2
    #define GL_COLOR_INDEX2_EXT 0x80E3
    #define GL_COLOR_INDEX4_EXT 0x80E4
    #define GL_COLOR_INDEX8_EXT 0x80E5
    #define GL_COLOR_LOGIC_OP 0x0BF2
    #define GL_COLOR_MATRIX 0x80B1
    #define GL_COLOR_MATRIX_SGI 0x80B1
    #define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
    #define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
    #define GL_COLOR_RENDERABLE 0x8286
    #define GL_COLOR_SAMPLES_NV 0x8E20
    #define GL_COLOR_SUM 0x8458
    #define GL_COLOR_SUM_ARB 0x8458
    #define GL_COLOR_SUM_CLAMP_NV 0x854F
    #define GL_COLOR_SUM_EXT 0x8458
    #define GL_COLOR_TABLE 0x80D0
    #define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
    #define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
    #define GL_COLOR_TABLE_BIAS 0x80D7
    #define GL_COLOR_TABLE_BIAS_SGI 0x80D7
    #define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
    #define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
    #define GL_COLOR_TABLE_FORMAT 0x80D8
    #define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
    #define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
    #define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
    #define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
    #define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
    #define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
    #define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
    #define GL_COLOR_TABLE_RED_SIZE 0x80DA
    #define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
    #define GL_COLOR_TABLE_SCALE 0x80D6
    #define GL_COLOR_TABLE_SCALE_SGI 0x80D6
    #define GL_COLOR_TABLE_SGI 0x80D0
    #define GL_COLOR_TABLE_WIDTH 0x80D9
    #define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
    #define GL_COLOR_WRITEMASK 0x0C23
    #define GL_COMBINE 0x8570
    #define GL_COMBINE4_NV 0x8503
    #define GL_COMBINER0_NV 0x8550
    #define GL_COMBINER1_NV 0x8551
    #define GL_COMBINER2_NV 0x8552
    #define GL_COMBINER3_NV 0x8553
    #define GL_COMBINER4_NV 0x8554
    #define GL_COMBINER5_NV 0x8555
    #define GL_COMBINER6_NV 0x8556
    #define GL_COMBINER7_NV 0x8557
    #define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
    #define GL_COMBINER_AB_OUTPUT_NV 0x854A
    #define GL_COMBINER_BIAS_NV 0x8549
    #define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
    #define GL_COMBINER_CD_OUTPUT_NV 0x854B
    #define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
    #define GL_COMBINER_INPUT_NV 0x8542
    #define GL_COMBINER_MAPPING_NV 0x8543
    #define GL_COMBINER_MUX_SUM_NV 0x8547
    #define GL_COMBINER_SCALE_NV 0x8548
    #define GL_COMBINER_SUM_OUTPUT_NV 0x854C
    #define GL_COMBINE_ALPHA 0x8572
    #define GL_COMBINE_ALPHA_ARB 0x8572
    #define GL_COMBINE_ALPHA_EXT 0x8572
    #define GL_COMBINE_ARB 0x8570
    #define GL_COMBINE_EXT 0x8570
    #define GL_COMBINE_RGB 0x8571
    #define GL_COMBINE_RGB_ARB 0x8571
    #define GL_COMBINE_RGB_EXT 0x8571
    #define GL_COMMAND_BARRIER_BIT 0x00000040
    #define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
    #define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
    #define GL_COMPARE_REF_TO_TEXTURE 0x884E
    #define GL_COMPARE_REF_TO_TEXTURE_EXT 0x884E
    #define GL_COMPARE_R_TO_TEXTURE 0x884E
    #define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
    #define GL_COMPATIBLE_SUBROUTINES 0x8E4B
    #define GL_COMPILE_STATUS 0x8B81
    #define GL_COMPLETION_STATUS_ARB 0x91B1
    #define GL_COMPRESSED_ALPHA 0x84E9
    #define GL_COMPRESSED_ALPHA_ARB 0x84E9
    #define GL_COMPRESSED_INTENSITY 0x84EC
    #define GL_COMPRESSED_INTENSITY_ARB 0x84EC
    #define GL_COMPRESSED_LUMINANCE 0x84EA
    #define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
    #define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
    #define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
    #define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
    #define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
    #define GL_COMPRESSED_R11_EAC 0x9270
    #define GL_COMPRESSED_RED 0x8225
    #define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
    #define GL_COMPRESSED_RED_RGTC1 0x8DBB
    #define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
    #define GL_COMPRESSED_RG 0x8226
    #define GL_COMPRESSED_RG11_EAC 0x9272
    #define GL_COMPRESSED_RGB 0x84ED
    #define GL_COMPRESSED_RGB8_ETC2 0x9274
    #define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
    #define GL_COMPRESSED_RGBA 0x84EE
    #define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
    #define GL_COMPRESSED_RGBA_ARB 0x84EE
    #define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
    #define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
    #define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
    #define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
    #define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
    #define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
    #define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
    #define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
    #define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
    #define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
    #define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
    #define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
    #define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0x93C0
    #define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0x93C1
    #define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
    #define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
    #define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0x93C2
    #define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0x93C3
    #define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
    #define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
    #define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0x93C4
    #define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
    #define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
    #define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0x93C5
    #define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0x93C6
    #define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
    #define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
    #define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0x93C7
    #define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
    #define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
    #define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0x93C8
    #define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0x93C9
    #define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
    #define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
    #define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
    #define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
    #define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
    #define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
    #define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
    #define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
    #define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
    #define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
    #define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0x9137
    #define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
    #define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0x9138
    #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
    #define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE 0x83F2
    #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
    #define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE 0x83F3
    #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
    #define GL_COMPRESSED_RGB_ARB 0x84ED
    #define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
    #define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
    #define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
    #define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
    #define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
    #define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
    #define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
    #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
    #define GL_COMPRESSED_RG_RGTC2 0x8DBD
    #define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
    #define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
    #define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
    #define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
    #define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
    #define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
    #define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
    #define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
    #define GL_COMPRESSED_SLUMINANCE 0x8C4A
    #define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
    #define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
    #define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
    #define GL_COMPRESSED_SRGB 0x8C48
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0x93E0
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0x93E1
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0x93E2
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0x93E3
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0x93E4
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0x93E5
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0x93E6
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0x93E7
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0x93E8
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0x93E9
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
    #define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
    #define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
    #define GL_COMPRESSED_SRGB8_ETC2 0x9275
    #define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
    #define GL_COMPRESSED_SRGB_ALPHA 0x8C49
    #define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
    #define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
    #define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
    #define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0x8A56
    #define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0x93F0
    #define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0x8A57
    #define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0x93F1
    #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
    #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV 0x8C4D
    #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
    #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV 0x8C4E
    #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
    #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV 0x8C4F
    #define GL_COMPRESSED_SRGB_EXT 0x8C48
    #define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0x8A54
    #define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0x8A55
    #define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
    #define GL_COMPRESSED_SRGB_S3TC_DXT1_NV 0x8C4C
    #define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
    #define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
    #define GL_COMPUTE_PROGRAM_NV 0x90FB
    #define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
    #define GL_COMPUTE_SHADER 0x91B9
    #define GL_COMPUTE_SHADER_BIT 0x00000020
    #define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
    #define GL_COMPUTE_SUBROUTINE 0x92ED
    #define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
    #define GL_COMPUTE_TEXTURE 0x82A0
    #define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
    #define GL_COMP_BIT_ATI 0x00000002
    #define GL_CONDITION_SATISFIED 0x911C
    #define GL_CONDITION_SATISFIED_APPLE 0x911C
    #define GL_CONFORMANT_NV 0x9374
    #define GL_CONIC_CURVE_TO_NV 0x1A
    #define GL_CONJOINT_NV 0x9284
    #define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
    #define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
    #define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
    #define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
    #define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
    #define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
    #define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
    #define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
    #define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
    #define GL_CONSTANT 0x8576
    #define GL_CONSTANT_ALPHA 0x8003
    #define GL_CONSTANT_ALPHA_EXT 0x8003
    #define GL_CONSTANT_ARB 0x8576
    #define GL_CONSTANT_BORDER 0x8151
    #define GL_CONSTANT_BORDER_HP 0x8151
    #define GL_CONSTANT_COLOR 0x8001
    #define GL_CONSTANT_COLOR0_NV 0x852A
    #define GL_CONSTANT_COLOR1_NV 0x852B
    #define GL_CONSTANT_COLOR_EXT 0x8001
    #define GL_CONSTANT_EXT 0x8576
    #define GL_CONSTANT_NV 0x8576
    #define GL_CONST_EYE_NV 0x86E5
    #define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
    #define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
    #define GL_CONTEXT_FLAGS 0x821E
    #define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
    #define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
    #define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
    #define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
    #define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0x00000010
    #define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
    #define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
    #define GL_CONTEXT_LOST 0x0507
    #define GL_CONTEXT_LOST_KHR 0x0507
    #define GL_CONTEXT_PROFILE_MASK 0x9126
    #define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
    #define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
    #define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
    #define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
    #define GL_CONTEXT_ROBUST_ACCESS 0x90F3
    #define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
    #define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
    #define GL_CONTINUOUS_AMD 0x9007
    #define GL_CONTRAST_NV 0x92A1
    #define GL_CONVEX_HULL_NV 0x908B
    #define GL_CONVOLUTION_1D 0x8010
    #define GL_CONVOLUTION_1D_EXT 0x8010
    #define GL_CONVOLUTION_2D 0x8011
    #define GL_CONVOLUTION_2D_EXT 0x8011
    #define GL_CONVOLUTION_BORDER_COLOR 0x8154
    #define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
    #define GL_CONVOLUTION_BORDER_MODE 0x8013
    #define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
    #define GL_CONVOLUTION_FILTER_BIAS 0x8015
    #define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
    #define GL_CONVOLUTION_FILTER_SCALE 0x8014
    #define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
    #define GL_CONVOLUTION_FORMAT 0x8017
    #define GL_CONVOLUTION_FORMAT_EXT 0x8017
    #define GL_CONVOLUTION_HEIGHT 0x8019
    #define GL_CONVOLUTION_HEIGHT_EXT 0x8019
    #define GL_CONVOLUTION_HINT_SGIX 0x8316
    #define GL_CONVOLUTION_WIDTH 0x8018
    #define GL_CONVOLUTION_WIDTH_EXT 0x8018
    #define GL_CON_0_ATI 0x8941
    #define GL_CON_10_ATI 0x894B
    #define GL_CON_11_ATI 0x894C
    #define GL_CON_12_ATI 0x894D
    #define GL_CON_13_ATI 0x894E
    #define GL_CON_14_ATI 0x894F
    #define GL_CON_15_ATI 0x8950
    #define GL_CON_16_ATI 0x8951
    #define GL_CON_17_ATI 0x8952
    #define GL_CON_18_ATI 0x8953
    #define GL_CON_19_ATI 0x8954
    #define GL_CON_1_ATI 0x8942
    #define GL_CON_20_ATI 0x8955
    #define GL_CON_21_ATI 0x8956
    #define GL_CON_22_ATI 0x8957
    #define GL_CON_23_ATI 0x8958
    #define GL_CON_24_ATI 0x8959
    #define GL_CON_25_ATI 0x895A
    #define GL_CON_26_ATI 0x895B
    #define GL_CON_27_ATI 0x895C
    #define GL_CON_28_ATI 0x895D
    #define GL_CON_29_ATI 0x895E
    #define GL_CON_2_ATI 0x8943
    #define GL_CON_30_ATI 0x895F
    #define GL_CON_31_ATI 0x8960
    #define GL_CON_3_ATI 0x8944
    #define GL_CON_4_ATI 0x8945
    #define GL_CON_5_ATI 0x8946
    #define GL_CON_6_ATI 0x8947
    #define GL_CON_7_ATI 0x8948
    #define GL_CON_8_ATI 0x8949
    #define GL_CON_9_ATI 0x894A
    #define GL_COORD_REPLACE 0x8862
    #define GL_COORD_REPLACE_ARB 0x8862
    #define GL_COORD_REPLACE_NV 0x8862
    #define GL_COPY 0x1503
    #define GL_COPY_INVERTED 0x150C
    #define GL_COPY_READ_BUFFER 0x8F36
    #define GL_COPY_READ_BUFFER_BINDING 0x8F36
    #define GL_COPY_READ_BUFFER_NV 0x8F36
    #define GL_COPY_WRITE_BUFFER 0x8F37
    #define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
    #define GL_COPY_WRITE_BUFFER_NV 0x8F37
    #define GL_COUNTER_RANGE_AMD 0x8BC1
    #define GL_COUNTER_TYPE_AMD 0x8BC0
    #define GL_COUNT_DOWN_NV 0x9089
    #define GL_COUNT_UP_NV 0x9088
    #define GL_COVERAGE_ALL_FRAGMENTS_NV 0x8ED5
    #define GL_COVERAGE_ATTACHMENT_NV 0x8ED2
    #define GL_COVERAGE_AUTOMATIC_NV 0x8ED7
    #define GL_COVERAGE_BUFFERS_NV 0x8ED3
    #define GL_COVERAGE_BUFFER_BIT_NV 0x00008000
    #define GL_COVERAGE_COMPONENT4_NV 0x8ED1
    #define GL_COVERAGE_COMPONENT_NV 0x8ED0
    #define GL_COVERAGE_EDGE_FRAGMENTS_NV 0x8ED6
    #define GL_COVERAGE_MODULATION_NV 0x9332
    #define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
    #define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
    #define GL_COVERAGE_SAMPLES_NV 0x8ED4
    #define GL_CPU_OPTIMIZED_QCOM 0x8FB1
    #define GL_CUBIC_CURVE_TO_NV 0x0C
    #define GL_CUBIC_EXT 0x8334
    #define GL_CUBIC_HP 0x815F
    #define GL_CUBIC_IMG 0x9139
    #define GL_CUBIC_MIPMAP_LINEAR_IMG 0x913B
    #define GL_CUBIC_MIPMAP_NEAREST_IMG 0x913A
    #define GL_CULL_FACE 0x0B44
    #define GL_CULL_FACE_MODE 0x0B45
    #define GL_CULL_FRAGMENT_NV 0x86E7
    #define GL_CULL_MODES_NV 0x86E0
    #define GL_CULL_VERTEX_EXT 0x81AA
    #define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
    #define GL_CULL_VERTEX_IBM 103050
    #define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
    #define GL_CURRENT_ATTRIB_NV 0x8626
    #define GL_CURRENT_BINORMAL_EXT 0x843C
    #define GL_CURRENT_FOG_COORD 0x8453
    #define GL_CURRENT_FOG_COORDINATE 0x8453
    #define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
    #define GL_CURRENT_MATRIX_ARB 0x8641
    #define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
    #define GL_CURRENT_MATRIX_NV 0x8641
    #define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
    #define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
    #define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
    #define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
    #define GL_CURRENT_PROGRAM 0x8B8D
    #define GL_CURRENT_QUERY 0x8865
    #define GL_CURRENT_QUERY_ARB 0x8865
    #define GL_CURRENT_QUERY_EXT 0x8865
    #define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
    #define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
    #define GL_CURRENT_SECONDARY_COLOR 0x8459
    #define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
    #define GL_CURRENT_TANGENT_EXT 0x843B
    #define GL_CURRENT_TIME_NV 0x8E28
    #define GL_CURRENT_VERTEX_ATTRIB 0x8626
    #define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
    #define GL_CURRENT_VERTEX_EXT 0x87E2
    #define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
    #define GL_CURRENT_WEIGHT_ARB 0x86A8
    #define GL_CW 0x0900
    #define GL_D3D12_FENCE_VALUE_EXT 0x9595
    #define GL_DARKEN 0x9297
    #define GL_DARKEN_KHR 0x9297
    #define GL_DARKEN_NV 0x9297
    #define GL_DATA_BUFFER_AMD 0x9151
    #define GL_DEBUG_CALLBACK_FUNCTION 0x8244
    #define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
    #define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
    #define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
    #define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
    #define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
    #define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
    #define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
    #define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
    #define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
    #define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
    #define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
    #define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
    #define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
    #define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
    #define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
    #define GL_DEBUG_LOGGED_MESSAGES 0x9145
    #define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
    #define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
    #define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
    #define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
    #define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
    #define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
    #define GL_DEBUG_OUTPUT 0x92E0
    #define GL_DEBUG_OUTPUT_KHR 0x92E0
    #define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
    #define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
    #define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
    #define GL_DEBUG_SEVERITY_HIGH 0x9146
    #define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
    #define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
    #define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
    #define GL_DEBUG_SEVERITY_LOW 0x9148
    #define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
    #define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
    #define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
    #define GL_DEBUG_SEVERITY_MEDIUM 0x9147
    #define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
    #define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
    #define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
    #define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
    #define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
    #define GL_DEBUG_SOURCE_API 0x8246
    #define GL_DEBUG_SOURCE_API_ARB 0x8246
    #define GL_DEBUG_SOURCE_API_KHR 0x8246
    #define GL_DEBUG_SOURCE_APPLICATION 0x824A
    #define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
    #define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
    #define GL_DEBUG_SOURCE_OTHER 0x824B
    #define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
    #define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
    #define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
    #define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
    #define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
    #define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
    #define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
    #define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
    #define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
    #define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
    #define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
    #define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
    #define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
    #define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
    #define GL_DEBUG_TYPE_ERROR 0x824C
    #define GL_DEBUG_TYPE_ERROR_ARB 0x824C
    #define GL_DEBUG_TYPE_ERROR_KHR 0x824C
    #define GL_DEBUG_TYPE_MARKER 0x8268
    #define GL_DEBUG_TYPE_MARKER_KHR 0x8268
    #define GL_DEBUG_TYPE_OTHER 0x8251
    #define GL_DEBUG_TYPE_OTHER_ARB 0x8251
    #define GL_DEBUG_TYPE_OTHER_KHR 0x8251
    #define GL_DEBUG_TYPE_PERFORMANCE 0x8250
    #define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
    #define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
    #define GL_DEBUG_TYPE_POP_GROUP 0x826A
    #define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
    #define GL_DEBUG_TYPE_PORTABILITY 0x824F
    #define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
    #define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
    #define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
    #define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
    #define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
    #define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
    #define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
    #define GL_DECODE_EXT 0x8A49
    #define GL_DECR 0x1E03
    #define GL_DECR_WRAP 0x8508
    #define GL_DECR_WRAP_EXT 0x8508
    #define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
    #define GL_DEFORMATIONS_MASK_SGIX 0x8196
    #define GL_DELETE_STATUS 0x8B80
    #define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
    #define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
    #define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
    #define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
    #define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
    #define GL_DEPTH 0x1801
    #define GL_DEPTH24_STENCIL8 0x88F0
    #define GL_DEPTH24_STENCIL8_EXT 0x88F0
    #define GL_DEPTH24_STENCIL8_OES 0x88F0
    #define GL_DEPTH32F_STENCIL8 0x8CAD
    #define GL_DEPTH32F_STENCIL8_NV 0x8DAC
    #define GL_DEPTH_ATTACHMENT 0x8D00
    #define GL_DEPTH_ATTACHMENT_EXT 0x8D00
    #define GL_DEPTH_BITS 0x0D56
    #define GL_DEPTH_BOUNDS_EXT 0x8891
    #define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
    #define GL_DEPTH_BUFFER_BIT 0x00000100
    #define GL_DEPTH_BUFFER_BIT0_QCOM 0x00000100
    #define GL_DEPTH_BUFFER_BIT1_QCOM 0x00000200
    #define GL_DEPTH_BUFFER_BIT2_QCOM 0x00000400
    #define GL_DEPTH_BUFFER_BIT3_QCOM 0x00000800
    #define GL_DEPTH_BUFFER_BIT4_QCOM 0x00001000
    #define GL_DEPTH_BUFFER_BIT5_QCOM 0x00002000
    #define GL_DEPTH_BUFFER_BIT6_QCOM 0x00004000
    #define GL_DEPTH_BUFFER_BIT7_QCOM 0x00008000
    #define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
    #define GL_DEPTH_CLAMP 0x864F
    #define GL_DEPTH_CLAMP_FAR_AMD 0x901F
    #define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
    #define GL_DEPTH_CLAMP_NV 0x864F
    #define GL_DEPTH_CLEAR_VALUE 0x0B73
    #define GL_DEPTH_COMPONENT 0x1902
    #define GL_DEPTH_COMPONENT16 0x81A5
    #define GL_DEPTH_COMPONENT16_ARB 0x81A5
    #define GL_DEPTH_COMPONENT16_NONLINEAR_NV 0x8E2C
    #define GL_DEPTH_COMPONENT16_OES 0x81A5
    #define GL_DEPTH_COMPONENT16_SGIX 0x81A5
    #define GL_DEPTH_COMPONENT24 0x81A6
    #define GL_DEPTH_COMPONENT24_ARB 0x81A6
    #define GL_DEPTH_COMPONENT24_OES 0x81A6
    #define GL_DEPTH_COMPONENT24_SGIX 0x81A6
    #define GL_DEPTH_COMPONENT32 0x81A7
    #define GL_DEPTH_COMPONENT32F 0x8CAC
    #define GL_DEPTH_COMPONENT32F_NV 0x8DAB
    #define GL_DEPTH_COMPONENT32_ARB 0x81A7
    #define GL_DEPTH_COMPONENT32_OES 0x81A7
    #define GL_DEPTH_COMPONENT32_SGIX 0x81A7
    #define GL_DEPTH_COMPONENTS 0x8284
    #define GL_DEPTH_EXT 0x1801
    #define GL_DEPTH_FUNC 0x0B74
    #define GL_DEPTH_RANGE 0x0B70
    #define GL_DEPTH_RENDERABLE 0x8287
    #define GL_DEPTH_SAMPLES_NV 0x932D
    #define GL_DEPTH_STENCIL 0x84F9
    #define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
    #define GL_DEPTH_STENCIL_EXT 0x84F9
    #define GL_DEPTH_STENCIL_NV 0x84F9
    #define GL_DEPTH_STENCIL_OES 0x84F9
    #define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
    #define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
    #define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
    #define GL_DEPTH_TEST 0x0B71
    #define GL_DEPTH_TEXTURE_MODE 0x884B
    #define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
    #define GL_DEPTH_WRITEMASK 0x0B72
    #define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
    #define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
    #define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
    #define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
    #define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
    #define GL_DEVICE_LUID_EXT 0x9599
    #define GL_DEVICE_NODE_MASK_EXT 0x959A
    #define GL_DEVICE_UUID_EXT 0x9597
    #define GL_DIFFERENCE 0x929E
    #define GL_DIFFERENCE_KHR 0x929E
    #define GL_DIFFERENCE_NV 0x929E
    #define GL_DISCARD_ATI 0x8763
    #define GL_DISCARD_NV 0x8530
    #define GL_DISCRETE_AMD 0x9006
    #define GL_DISJOINT_NV 0x9283
    #define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
    #define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
    #define GL_DISPLAY_LIST 0x82E7
    #define GL_DISTANCE_ATTENUATION_EXT 0x8129
    #define GL_DISTANCE_ATTENUATION_SGIS 0x8129
    #define GL_DITHER 0x0BD0
    #define GL_DMP_PROGRAM_BINARY_DMP 0x9253
    #define GL_DONT_CARE 0x1100
    #define GL_DOT2_ADD_ATI 0x896C
    #define GL_DOT3_ATI 0x8966
    #define GL_DOT3_RGB 0x86AE
    #define GL_DOT3_RGBA 0x86AF
    #define GL_DOT3_RGBA_ARB 0x86AF
    #define GL_DOT3_RGBA_EXT 0x8741
    #define GL_DOT3_RGB_ARB 0x86AE
    #define GL_DOT3_RGB_EXT 0x8740
    #define GL_DOT4_ATI 0x8967
    #define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
    #define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
    #define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
    #define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
    #define GL_DOT_PRODUCT_NV 0x86EC
    #define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
    #define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
    #define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
    #define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
    #define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
    #define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
    #define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
    #define GL_DOUBLE 0x140A
    #define GL_DOUBLEBUFFER 0x0C32
    #define GL_DOUBLE_MAT2 0x8F46
    #define GL_DOUBLE_MAT2_EXT 0x8F46
    #define GL_DOUBLE_MAT2x3 0x8F49
    #define GL_DOUBLE_MAT2x3_EXT 0x8F49
    #define GL_DOUBLE_MAT2x4 0x8F4A
    #define GL_DOUBLE_MAT2x4_EXT 0x8F4A
    #define GL_DOUBLE_MAT3 0x8F47
    #define GL_DOUBLE_MAT3_EXT 0x8F47
    #define GL_DOUBLE_MAT3x2 0x8F4B
    #define GL_DOUBLE_MAT3x2_EXT 0x8F4B
    #define GL_DOUBLE_MAT3x4 0x8F4C
    #define GL_DOUBLE_MAT3x4_EXT 0x8F4C
    #define GL_DOUBLE_MAT4 0x8F48
    #define GL_DOUBLE_MAT4_EXT 0x8F48
    #define GL_DOUBLE_MAT4x2 0x8F4D
    #define GL_DOUBLE_MAT4x2_EXT 0x8F4D
    #define GL_DOUBLE_MAT4x3 0x8F4E
    #define GL_DOUBLE_MAT4x3_EXT 0x8F4E
    #define GL_DOUBLE_VEC2 0x8FFC
    #define GL_DOUBLE_VEC2_EXT 0x8FFC
    #define GL_DOUBLE_VEC3 0x8FFD
    #define GL_DOUBLE_VEC3_EXT 0x8FFD
    #define GL_DOUBLE_VEC4 0x8FFE
    #define GL_DOUBLE_VEC4_EXT 0x8FFE
    #define GL_DOWNSAMPLE_SCALES_IMG 0x913E
    #define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
    #define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
    #define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
    #define GL_DRAW_BUFFER 0x0C01
    #define GL_DRAW_BUFFER0 0x8825
    #define GL_DRAW_BUFFER0_ARB 0x8825
    #define GL_DRAW_BUFFER0_ATI 0x8825
    #define GL_DRAW_BUFFER0_EXT 0x8825
    #define GL_DRAW_BUFFER0_NV 0x8825
    #define GL_DRAW_BUFFER1 0x8826
    #define GL_DRAW_BUFFER10 0x882F
    #define GL_DRAW_BUFFER10_ARB 0x882F
    #define GL_DRAW_BUFFER10_ATI 0x882F
    #define GL_DRAW_BUFFER10_EXT 0x882F
    #define GL_DRAW_BUFFER10_NV 0x882F
    #define GL_DRAW_BUFFER11 0x8830
    #define GL_DRAW_BUFFER11_ARB 0x8830
    #define GL_DRAW_BUFFER11_ATI 0x8830
    #define GL_DRAW_BUFFER11_EXT 0x8830
    #define GL_DRAW_BUFFER11_NV 0x8830
    #define GL_DRAW_BUFFER12 0x8831
    #define GL_DRAW_BUFFER12_ARB 0x8831
    #define GL_DRAW_BUFFER12_ATI 0x8831
    #define GL_DRAW_BUFFER12_EXT 0x8831
    #define GL_DRAW_BUFFER12_NV 0x8831
    #define GL_DRAW_BUFFER13 0x8832
    #define GL_DRAW_BUFFER13_ARB 0x8832
    #define GL_DRAW_BUFFER13_ATI 0x8832
    #define GL_DRAW_BUFFER13_EXT 0x8832
    #define GL_DRAW_BUFFER13_NV 0x8832
    #define GL_DRAW_BUFFER14 0x8833
    #define GL_DRAW_BUFFER14_ARB 0x8833
    #define GL_DRAW_BUFFER14_ATI 0x8833
    #define GL_DRAW_BUFFER14_EXT 0x8833
    #define GL_DRAW_BUFFER14_NV 0x8833
    #define GL_DRAW_BUFFER15 0x8834
    #define GL_DRAW_BUFFER15_ARB 0x8834
    #define GL_DRAW_BUFFER15_ATI 0x8834
    #define GL_DRAW_BUFFER15_EXT 0x8834
    #define GL_DRAW_BUFFER15_NV 0x8834
    #define GL_DRAW_BUFFER1_ARB 0x8826
    #define GL_DRAW_BUFFER1_ATI 0x8826
    #define GL_DRAW_BUFFER1_EXT 0x8826
    #define GL_DRAW_BUFFER1_NV 0x8826
    #define GL_DRAW_BUFFER2 0x8827
    #define GL_DRAW_BUFFER2_ARB 0x8827
    #define GL_DRAW_BUFFER2_ATI 0x8827
    #define GL_DRAW_BUFFER2_EXT 0x8827
    #define GL_DRAW_BUFFER2_NV 0x8827
    #define GL_DRAW_BUFFER3 0x8828
    #define GL_DRAW_BUFFER3_ARB 0x8828
    #define GL_DRAW_BUFFER3_ATI 0x8828
    #define GL_DRAW_BUFFER3_EXT 0x8828
    #define GL_DRAW_BUFFER3_NV 0x8828
    #define GL_DRAW_BUFFER4 0x8829
    #define GL_DRAW_BUFFER4_ARB 0x8829
    #define GL_DRAW_BUFFER4_ATI 0x8829
    #define GL_DRAW_BUFFER4_EXT 0x8829
    #define GL_DRAW_BUFFER4_NV 0x8829
    #define GL_DRAW_BUFFER5 0x882A
    #define GL_DRAW_BUFFER5_ARB 0x882A
    #define GL_DRAW_BUFFER5_ATI 0x882A
    #define GL_DRAW_BUFFER5_EXT 0x882A
    #define GL_DRAW_BUFFER5_NV 0x882A
    #define GL_DRAW_BUFFER6 0x882B
    #define GL_DRAW_BUFFER6_ARB 0x882B
    #define GL_DRAW_BUFFER6_ATI 0x882B
    #define GL_DRAW_BUFFER6_EXT 0x882B
    #define GL_DRAW_BUFFER6_NV 0x882B
    #define GL_DRAW_BUFFER7 0x882C
    #define GL_DRAW_BUFFER7_ARB 0x882C
    #define GL_DRAW_BUFFER7_ATI 0x882C
    #define GL_DRAW_BUFFER7_EXT 0x882C
    #define GL_DRAW_BUFFER7_NV 0x882C
    #define GL_DRAW_BUFFER8 0x882D
    #define GL_DRAW_BUFFER8_ARB 0x882D
    #define GL_DRAW_BUFFER8_ATI 0x882D
    #define GL_DRAW_BUFFER8_EXT 0x882D
    #define GL_DRAW_BUFFER8_NV 0x882D
    #define GL_DRAW_BUFFER9 0x882E
    #define GL_DRAW_BUFFER9_ARB 0x882E
    #define GL_DRAW_BUFFER9_ATI 0x882E
    #define GL_DRAW_BUFFER9_EXT 0x882E
    #define GL_DRAW_BUFFER9_NV 0x882E
    #define GL_DRAW_BUFFER_EXT 0x0C01
    #define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
    #define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
    #define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
    #define GL_DRAW_FRAMEBUFFER 0x8CA9
    #define GL_DRAW_FRAMEBUFFER_ANGLE 0x8CA9
    #define GL_DRAW_FRAMEBUFFER_APPLE 0x8CA9
    #define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
    #define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
    #define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0x8CA6
    #define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
    #define GL_DRAW_FRAMEBUFFER_BINDING_NV 0x8CA6
    #define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
    #define GL_DRAW_FRAMEBUFFER_NV 0x8CA9
    #define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
    #define GL_DRAW_INDIRECT_BUFFER 0x8F3F
    #define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
    #define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
    #define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
    #define GL_DRAW_PIXELS_APPLE 0x8A0A
    #define GL_DRIVER_UUID_EXT 0x9598
    #define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
    #define GL_DSDT8_MAG8_NV 0x870A
    #define GL_DSDT8_NV 0x8709
    #define GL_DSDT_MAG_INTENSITY_NV 0x86DC
    #define GL_DSDT_MAG_NV 0x86F6
    #define GL_DSDT_MAG_VIB_NV 0x86F7
    #define GL_DSDT_NV 0x86F5
    #define GL_DST_ALPHA 0x0304
    #define GL_DST_ATOP_NV 0x928F
    #define GL_DST_COLOR 0x0306
    #define GL_DST_IN_NV 0x928B
    #define GL_DST_NV 0x9287
    #define GL_DST_OUT_NV 0x928D
    #define GL_DST_OVER_NV 0x9289
    #define GL_DS_BIAS_NV 0x8716
    #define GL_DS_SCALE_NV 0x8710
    #define GL_DT_BIAS_NV 0x8717
    #define GL_DT_SCALE_NV 0x8711
    #define GL_DU8DV8_ATI 0x877A
    #define GL_DUAL_ALPHA12_SGIS 0x8112
    #define GL_DUAL_ALPHA16_SGIS 0x8113
    #define GL_DUAL_ALPHA4_SGIS 0x8110
    #define GL_DUAL_ALPHA8_SGIS 0x8111
    #define GL_DUAL_INTENSITY12_SGIS 0x811A
    #define GL_DUAL_INTENSITY16_SGIS 0x811B
    #define GL_DUAL_INTENSITY4_SGIS 0x8118
    #define GL_DUAL_INTENSITY8_SGIS 0x8119
    #define GL_DUAL_LUMINANCE12_SGIS 0x8116
    #define GL_DUAL_LUMINANCE16_SGIS 0x8117
    #define GL_DUAL_LUMINANCE4_SGIS 0x8114
    #define GL_DUAL_LUMINANCE8_SGIS 0x8115
    #define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
    #define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
    #define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
    #define GL_DUDV_ATI 0x8779
    #define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
    #define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
    #define GL_DYNAMIC_ATI 0x8761
    #define GL_DYNAMIC_COPY 0x88EA
    #define GL_DYNAMIC_COPY_ARB 0x88EA
    #define GL_DYNAMIC_DRAW 0x88E8
    #define GL_DYNAMIC_DRAW_ARB 0x88E8
    #define GL_DYNAMIC_READ 0x88E9
    #define GL_DYNAMIC_READ_ARB 0x88E9
    #define GL_DYNAMIC_STORAGE_BIT 0x0100
    #define GL_DYNAMIC_STORAGE_BIT_EXT 0x0100
    #define GL_EDGEFLAG_BIT_PGI 0x00040000
    #define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
    #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
    #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
    #define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
    #define GL_EDGE_FLAG_ARRAY_EXT 0x8079
    #define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
    #define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
    #define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
    #define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
    #define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
    #define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
    #define GL_EIGHTH_BIT_ATI 0x00000020
    #define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
    #define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
    #define GL_ELEMENT_ARRAY_APPLE 0x8A0C
    #define GL_ELEMENT_ARRAY_ATI 0x8768
    #define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
    #define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
    #define GL_ELEMENT_ARRAY_BUFFER 0x8893
    #define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
    #define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
    #define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
    #define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
    #define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
    #define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
    #define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
    #define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
    #define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
    #define GL_EMBOSS_CONSTANT_NV 0x855E
    #define GL_EMBOSS_LIGHT_NV 0x855D
    #define GL_EMBOSS_MAP_NV 0x855F
    #define GL_EQUAL 0x0202
    #define GL_EQUIV 0x1509
    #define GL_ETC1_RGB8_OES 0x8D64
    #define GL_ETC1_SRGB8_NV 0x88EE
    #define GL_EVAL_2D_NV 0x86C0
    #define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
    #define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
    #define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
    #define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
    #define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
    #define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
    #define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
    #define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
    #define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
    #define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
    #define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
    #define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
    #define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
    #define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
    #define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
    #define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
    #define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
    #define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
    #define GL_EXCLUSION 0x92A0
    #define GL_EXCLUSION_KHR 0x92A0
    #define GL_EXCLUSION_NV 0x92A0
    #define GL_EXCLUSIVE_EXT 0x8F11
    #define GL_EXPAND_NEGATE_NV 0x8539
    #define GL_EXPAND_NORMAL_NV 0x8538
    #define GL_EXTENSIONS 0x1F03
    #define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
    #define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
    #define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
    #define GL_EYE_LINEAR_NV 0x2400
    #define GL_EYE_LINE_SGIS 0x81F6
    #define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
    #define GL_EYE_POINT_SGIS 0x81F4
    #define GL_EYE_RADIAL_NV 0x855B
    #define GL_E_TIMES_F_NV 0x8531
    #define GL_FACTOR_MAX_AMD 0x901D
    #define GL_FACTOR_MIN_AMD 0x901C
    #define GL_FAILURE_NV 0x9030
    #define GL_FALSE 0
    #define GL_FASTEST 0x1101
    #define GL_FENCE_APPLE 0x8A0B
    #define GL_FENCE_CONDITION_NV 0x84F4
    #define GL_FENCE_STATUS_NV 0x84F3
    #define GL_FETCH_PER_SAMPLE_ARM 0x8F65
    #define GL_FIELDS_NV 0x8E27
    #define GL_FIELD_LOWER_NV 0x9023
    #define GL_FIELD_UPPER_NV 0x9022
    #define GL_FILE_NAME_NV 0x9074
    #define GL_FILL 0x1B02
    #define GL_FILL_NV 0x1B02
    #define GL_FILL_RECTANGLE_NV 0x933C
    #define GL_FILTER 0x829A
    #define GL_FILTER4_SGIS 0x8146
    #define GL_FIRST_TO_REST_NV 0x90AF
    #define GL_FIRST_VERTEX_CONVENTION 0x8E4D
    #define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
    #define GL_FIRST_VERTEX_CONVENTION_OES 0x8E4D
    #define GL_FIXED 0x140C
    #define GL_FIXED_OES 0x140C
    #define GL_FIXED_ONLY 0x891D
    #define GL_FIXED_ONLY_ARB 0x891D
    #define GL_FLOAT 0x1406
    #define GL_FLOAT16_MAT2_AMD 0x91C5
    #define GL_FLOAT16_MAT2x3_AMD 0x91C8
    #define GL_FLOAT16_MAT2x4_AMD 0x91C9
    #define GL_FLOAT16_MAT3_AMD 0x91C6
    #define GL_FLOAT16_MAT3x2_AMD 0x91CA
    #define GL_FLOAT16_MAT3x4_AMD 0x91CB
    #define GL_FLOAT16_MAT4_AMD 0x91C7
    #define GL_FLOAT16_MAT4x2_AMD 0x91CC
    #define GL_FLOAT16_MAT4x3_AMD 0x91CD
    #define GL_FLOAT16_NV 0x8FF8
    #define GL_FLOAT16_VEC2_NV 0x8FF9
    #define GL_FLOAT16_VEC3_NV 0x8FFA
    #define GL_FLOAT16_VEC4_NV 0x8FFB
    #define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
    #define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
    #define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
    #define GL_FLOAT_MAT2 0x8B5A
    #define GL_FLOAT_MAT2_ARB 0x8B5A
    #define GL_FLOAT_MAT2x3 0x8B65
    #define GL_FLOAT_MAT2x3_NV 0x8B65
    #define GL_FLOAT_MAT2x4 0x8B66
    #define GL_FLOAT_MAT2x4_NV 0x8B66
    #define GL_FLOAT_MAT3 0x8B5B
    #define GL_FLOAT_MAT3_ARB 0x8B5B
    #define GL_FLOAT_MAT3x2 0x8B67
    #define GL_FLOAT_MAT3x2_NV 0x8B67
    #define GL_FLOAT_MAT3x4 0x8B68
    #define GL_FLOAT_MAT3x4_NV 0x8B68
    #define GL_FLOAT_MAT4 0x8B5C
    #define GL_FLOAT_MAT4_ARB 0x8B5C
    #define GL_FLOAT_MAT4x2 0x8B69
    #define GL_FLOAT_MAT4x2_NV 0x8B69
    #define GL_FLOAT_MAT4x3 0x8B6A
    #define GL_FLOAT_MAT4x3_NV 0x8B6A
    #define GL_FLOAT_R16_NV 0x8884
    #define GL_FLOAT_R32_NV 0x8885
    #define GL_FLOAT_RG16_NV 0x8886
    #define GL_FLOAT_RG32_NV 0x8887
    #define GL_FLOAT_RGB16_NV 0x8888
    #define GL_FLOAT_RGB32_NV 0x8889
    #define GL_FLOAT_RGBA16_NV 0x888A
    #define GL_FLOAT_RGBA32_NV 0x888B
    #define GL_FLOAT_RGBA_MODE_NV 0x888E
    #define GL_FLOAT_RGBA_NV 0x8883
    #define GL_FLOAT_RGB_NV 0x8882
    #define GL_FLOAT_RG_NV 0x8881
    #define GL_FLOAT_R_NV 0x8880
    #define GL_FLOAT_VEC2 0x8B50
    #define GL_FLOAT_VEC2_ARB 0x8B50
    #define GL_FLOAT_VEC3 0x8B51
    #define GL_FLOAT_VEC3_ARB 0x8B51
    #define GL_FLOAT_VEC4 0x8B52
    #define GL_FLOAT_VEC4_ARB 0x8B52
    #define GL_FOG_COORD 0x8451
    #define GL_FOG_COORDINATE 0x8451
    #define GL_FOG_COORDINATE_ARRAY 0x8457
    #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
    #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
    #define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
    #define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
    #define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
    #define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
    #define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
    #define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
    #define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
    #define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
    #define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
    #define GL_FOG_COORDINATE_EXT 0x8451
    #define GL_FOG_COORDINATE_SOURCE 0x8450
    #define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
    #define GL_FOG_COORD_ARRAY 0x8457
    #define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
    #define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
    #define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
    #define GL_FOG_COORD_ARRAY_POINTER 0x8456
    #define GL_FOG_COORD_ARRAY_STRIDE 0x8455
    #define GL_FOG_COORD_ARRAY_TYPE 0x8454
    #define GL_FOG_COORD_SRC 0x8450
    #define GL_FOG_DISTANCE_MODE_NV 0x855A
    #define GL_FOG_FUNC_POINTS_SGIS 0x812B
    #define GL_FOG_FUNC_SGIS 0x812A
    #define GL_FOG_OFFSET_SGIX 0x8198
    #define GL_FOG_OFFSET_VALUE_SGIX 0x8199
    #define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
    #define GL_FONT_ASCENDER_BIT_NV 0x00200000
    #define GL_FONT_DESCENDER_BIT_NV 0x00400000
    #define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
    #define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
    #define GL_FONT_HEIGHT_BIT_NV 0x00800000
    #define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
    #define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
    #define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
    #define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
    #define GL_FONT_UNAVAILABLE_NV 0x936A
    #define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
    #define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
    #define GL_FONT_UNINTELLIGIBLE_NV 0x936B
    #define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
    #define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
    #define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
    #define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
    #define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
    #define GL_FORCE_BLUE_TO_ONE_NV 0x8860
    #define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
    #define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
    #define GL_FOVEATION_ENABLE_BIT_QCOM 0x00000001
    #define GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM 0x00000002
    #define GL_FRACTIONAL_EVEN 0x8E7C
    #define GL_FRACTIONAL_EVEN_EXT 0x8E7C
    #define GL_FRACTIONAL_EVEN_OES 0x8E7C
    #define GL_FRACTIONAL_ODD 0x8E7B
    #define GL_FRACTIONAL_ODD_EXT 0x8E7B
    #define GL_FRACTIONAL_ODD_OES 0x8E7B
    #define GL_FRAGMENT_COLOR_EXT 0x834C
    #define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
    #define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
    #define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
    #define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
    #define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
    #define GL_FRAGMENT_DEPTH 0x8452
    #define GL_FRAGMENT_DEPTH_EXT 0x8452
    #define GL_FRAGMENT_INPUT_NV 0x936D
    #define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
    #define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0x8E5D
    #define GL_FRAGMENT_LIGHT0_SGIX 0x840C
    #define GL_FRAGMENT_LIGHT1_SGIX 0x840D
    #define GL_FRAGMENT_LIGHT2_SGIX 0x840E
    #define GL_FRAGMENT_LIGHT3_SGIX 0x840F
    #define GL_FRAGMENT_LIGHT4_SGIX 0x8410
    #define GL_FRAGMENT_LIGHT5_SGIX 0x8411
    #define GL_FRAGMENT_LIGHT6_SGIX 0x8412
    #define GL_FRAGMENT_LIGHT7_SGIX 0x8413
    #define GL_FRAGMENT_LIGHTING_SGIX 0x8400
    #define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
    #define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
    #define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
    #define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
    #define GL_FRAGMENT_MATERIAL_EXT 0x8349
    #define GL_FRAGMENT_NORMAL_EXT 0x834A
    #define GL_FRAGMENT_PROGRAM_ARB 0x8804
    #define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
    #define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
    #define GL_FRAGMENT_PROGRAM_NV 0x8870
    #define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
    #define GL_FRAGMENT_SHADER 0x8B30
    #define GL_FRAGMENT_SHADER_ARB 0x8B30
    #define GL_FRAGMENT_SHADER_ATI 0x8920
    #define GL_FRAGMENT_SHADER_BIT 0x00000002
    #define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
    #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
    #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
    #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0x8B8B
    #define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
    #define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM 0x8F66
    #define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
    #define GL_FRAGMENT_SUBROUTINE 0x92EC
    #define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
    #define GL_FRAGMENT_TEXTURE 0x829F
    #define GL_FRAMEBUFFER 0x8D40
    #define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
    #define GL_FRAMEBUFFER_ATTACHMENT_ANGLE 0x93A3
    #define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
    #define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
    #define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
    #define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
    #define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0x8211
    #define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
    #define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
    #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
    #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
    #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
    #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
    #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
    #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
    #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
    #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
    #define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
    #define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0x8CD4
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
    #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG 0x913F
    #define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
    #define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
    #define GL_FRAMEBUFFER_BINDING 0x8CA6
    #define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
    #define GL_FRAMEBUFFER_BLEND 0x828B
    #define GL_FRAMEBUFFER_COMPLETE 0x8CD5
    #define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
    #define GL_FRAMEBUFFER_DEFAULT 0x8218
    #define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
    #define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
    #define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
    #define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
    #define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
    #define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
    #define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
    #define GL_FRAMEBUFFER_EXT 0x8D40
    #define GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM 0x96A2
    #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
    #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
    #define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
    #define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
    #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
    #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
    #define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
    #define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0x9652
    #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
    #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
    #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
    #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
    #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
    #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
    #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
    #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
    #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
    #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG 0x913C
    #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0x8D56
    #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0x8D56
    #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
    #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0x9134
    #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0x8D56
    #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
    #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
    #define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
    #define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
    #define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
    #define GL_FRAMEBUFFER_RENDERABLE 0x8289
    #define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
    #define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
    #define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
    #define GL_FRAMEBUFFER_SRGB 0x8DB9
    #define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
    #define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
    #define GL_FRAMEBUFFER_UNDEFINED 0x8219
    #define GL_FRAMEBUFFER_UNDEFINED_OES 0x8219
    #define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
    #define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
    #define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
    #define GL_FRAMEZOOM_SGIX 0x818B
    #define GL_FRAME_NV 0x8E26
    #define GL_FRONT 0x0404
    #define GL_FRONT_AND_BACK 0x0408
    #define GL_FRONT_FACE 0x0B46
    #define GL_FRONT_FACE_COMMAND_NV 0x0012
    #define GL_FRONT_LEFT 0x0400
    #define GL_FRONT_RIGHT 0x0401
    #define GL_FULL_RANGE_EXT 0x87E1
    #define GL_FULL_STIPPLE_HINT_PGI 0x1A219
    #define GL_FULL_SUPPORT 0x82B7
    #define GL_FUNC_ADD 0x8006
    #define GL_FUNC_ADD_EXT 0x8006
    #define GL_FUNC_REVERSE_SUBTRACT 0x800B
    #define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
    #define GL_FUNC_SUBTRACT 0x800A
    #define GL_FUNC_SUBTRACT_EXT 0x800A
    #define GL_GCCSO_SHADER_BINARY_FJ 0x9260
    #define GL_GENERATE_MIPMAP 0x8191
    #define GL_GENERATE_MIPMAP_HINT 0x8192
    #define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
    #define GL_GENERATE_MIPMAP_SGIS 0x8191
    #define GL_GENERIC_ATTRIB_NV 0x8C7D
    #define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
    #define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
    #define GL_GEOMETRY_INPUT_TYPE 0x8917
    #define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
    #define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
    #define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
    #define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
    #define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
    #define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
    #define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
    #define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
    #define GL_GEOMETRY_OUTPUT_TYPE 0x8918
    #define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
    #define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
    #define GL_GEOMETRY_PROGRAM_NV 0x8C26
    #define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
    #define GL_GEOMETRY_SHADER 0x8DD9
    #define GL_GEOMETRY_SHADER_ARB 0x8DD9
    #define GL_GEOMETRY_SHADER_BIT 0x00000004
    #define GL_GEOMETRY_SHADER_BIT_EXT 0x00000004
    #define GL_GEOMETRY_SHADER_BIT_OES 0x00000004
    #define GL_GEOMETRY_SHADER_EXT 0x8DD9
    #define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
    #define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
    #define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
    #define GL_GEOMETRY_SHADER_OES 0x8DD9
    #define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
    #define GL_GEOMETRY_SUBROUTINE 0x92EB
    #define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
    #define GL_GEOMETRY_TEXTURE 0x829E
    #define GL_GEOMETRY_VERTICES_OUT 0x8916
    #define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
    #define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
    #define GL_GEQUAL 0x0206
    #define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
    #define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
    #define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
    #define GL_GLOBAL_ALPHA_SUN 0x81D9
    #define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
    #define GL_GLYPH_HEIGHT_BIT_NV 0x02
    #define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
    #define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
    #define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
    #define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
    #define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
    #define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
    #define GL_GLYPH_WIDTH_BIT_NV 0x01
    #define GL_GPU_ADDRESS_NV 0x8F34
    #define GL_GPU_DISJOINT_EXT 0x8FBB
    #define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
    #define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
    #define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
    #define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
    #define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
    #define GL_GPU_OPTIMIZED_QCOM 0x8FB2
    #define GL_GREATER 0x0204
    #define GL_GREEN 0x1904
    #define GL_GREEN_BITS 0x0D53
    #define GL_GREEN_BIT_ATI 0x00000002
    #define GL_GREEN_INTEGER 0x8D95
    #define GL_GREEN_INTEGER_EXT 0x8D95
    #define GL_GREEN_MAX_CLAMP_INGR 0x8565
    #define GL_GREEN_MIN_CLAMP_INGR 0x8561
    #define GL_GREEN_NV 0x1904
    #define GL_GUILTY_CONTEXT_RESET 0x8253
    #define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
    #define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
    #define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
    #define GL_HALF_APPLE 0x140B
    #define GL_HALF_BIAS_NEGATE_NV 0x853B
    #define GL_HALF_BIAS_NORMAL_NV 0x853A
    #define GL_HALF_BIT_ATI 0x00000008
    #define GL_HALF_FLOAT 0x140B
    #define GL_HALF_FLOAT_ARB 0x140B
    #define GL_HALF_FLOAT_NV 0x140B
    #define GL_HALF_FLOAT_OES 0x8D61
    #define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
    #define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
    #define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
    #define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
    #define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
    #define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
    #define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
    #define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
    #define GL_HARDLIGHT 0x929B
    #define GL_HARDLIGHT_KHR 0x929B
    #define GL_HARDLIGHT_NV 0x929B
    #define GL_HARDMIX_NV 0x92A9
    #define GL_HIGH_FLOAT 0x8DF2
    #define GL_HIGH_INT 0x8DF5
    #define GL_HILO16_NV 0x86F8
    #define GL_HILO8_NV 0x885E
    #define GL_HILO_NV 0x86F4
    #define GL_HISTOGRAM 0x8024
    #define GL_HISTOGRAM_ALPHA_SIZE 0x802B
    #define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
    #define GL_HISTOGRAM_BLUE_SIZE 0x802A
    #define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
    #define GL_HISTOGRAM_EXT 0x8024
    #define GL_HISTOGRAM_FORMAT 0x8027
    #define GL_HISTOGRAM_FORMAT_EXT 0x8027
    #define GL_HISTOGRAM_GREEN_SIZE 0x8029
    #define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
    #define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
    #define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
    #define GL_HISTOGRAM_RED_SIZE 0x8028
    #define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
    #define GL_HISTOGRAM_SINK 0x802D
    #define GL_HISTOGRAM_SINK_EXT 0x802D
    #define GL_HISTOGRAM_WIDTH 0x8026
    #define GL_HISTOGRAM_WIDTH_EXT 0x8026
    #define GL_HI_BIAS_NV 0x8714
    #define GL_HI_SCALE_NV 0x870E
    #define GL_HORIZONTAL_LINE_TO_NV 0x06
    #define GL_HSL_COLOR 0x92AF
    #define GL_HSL_COLOR_KHR 0x92AF
    #define GL_HSL_COLOR_NV 0x92AF
    #define GL_HSL_HUE 0x92AD
    #define GL_HSL_HUE_KHR 0x92AD
    #define GL_HSL_HUE_NV 0x92AD
    #define GL_HSL_LUMINOSITY 0x92B0
    #define GL_HSL_LUMINOSITY_KHR 0x92B0
    #define GL_HSL_LUMINOSITY_NV 0x92B0
    #define GL_HSL_SATURATION 0x92AE
    #define GL_HSL_SATURATION_KHR 0x92AE
    #define GL_HSL_SATURATION_NV 0x92AE
    #define GL_IDENTITY_NV 0x862A
    #define GL_IGNORE_BORDER_HP 0x8150
    #define GL_IMAGE_1D 0x904C
    #define GL_IMAGE_1D_ARRAY 0x9052
    #define GL_IMAGE_1D_ARRAY_EXT 0x9052
    #define GL_IMAGE_1D_EXT 0x904C
    #define GL_IMAGE_2D 0x904D
    #define GL_IMAGE_2D_ARRAY 0x9053
    #define GL_IMAGE_2D_ARRAY_EXT 0x9053
    #define GL_IMAGE_2D_EXT 0x904D
    #define GL_IMAGE_2D_MULTISAMPLE 0x9055
    #define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
    #define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
    #define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
    #define GL_IMAGE_2D_RECT 0x904F
    #define GL_IMAGE_2D_RECT_EXT 0x904F
    #define GL_IMAGE_3D 0x904E
    #define GL_IMAGE_3D_EXT 0x904E
    #define GL_IMAGE_BINDING_ACCESS 0x8F3E
    #define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
    #define GL_IMAGE_BINDING_FORMAT 0x906E
    #define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
    #define GL_IMAGE_BINDING_LAYER 0x8F3D
    #define GL_IMAGE_BINDING_LAYERED 0x8F3C
    #define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
    #define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
    #define GL_IMAGE_BINDING_LEVEL 0x8F3B
    #define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
    #define GL_IMAGE_BINDING_NAME 0x8F3A
    #define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
    #define GL_IMAGE_BUFFER 0x9051
    #define GL_IMAGE_BUFFER_EXT 0x9051
    #define GL_IMAGE_BUFFER_OES 0x9051
    #define GL_IMAGE_CLASS_10_10_10_2 0x82C3
    #define GL_IMAGE_CLASS_11_11_10 0x82C2
    #define GL_IMAGE_CLASS_1_X_16 0x82BE
    #define GL_IMAGE_CLASS_1_X_32 0x82BB
    #define GL_IMAGE_CLASS_1_X_8 0x82C1
    #define GL_IMAGE_CLASS_2_X_16 0x82BD
    #define GL_IMAGE_CLASS_2_X_32 0x82BA
    #define GL_IMAGE_CLASS_2_X_8 0x82C0
    #define GL_IMAGE_CLASS_4_X_16 0x82BC
    #define GL_IMAGE_CLASS_4_X_32 0x82B9
    #define GL_IMAGE_CLASS_4_X_8 0x82BF
    #define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
    #define GL_IMAGE_CUBE 0x9050
    #define GL_IMAGE_CUBE_EXT 0x9050
    #define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
    #define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
    #define GL_IMAGE_CUBE_MAP_ARRAY_OES 0x9054
    #define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
    #define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
    #define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
    #define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
    #define GL_IMAGE_MAG_FILTER_HP 0x815C
    #define GL_IMAGE_MIN_FILTER_HP 0x815D
    #define GL_IMAGE_PIXEL_FORMAT 0x82A9
    #define GL_IMAGE_PIXEL_TYPE 0x82AA
    #define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
    #define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
    #define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
    #define GL_IMAGE_SCALE_X_HP 0x8155
    #define GL_IMAGE_SCALE_Y_HP 0x8156
    #define GL_IMAGE_TEXEL_SIZE 0x82A7
    #define GL_IMAGE_TRANSFORM_2D_HP 0x8161
    #define GL_IMAGE_TRANSLATE_X_HP 0x8157
    #define GL_IMAGE_TRANSLATE_Y_HP 0x8158
    #define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
    #define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
    #define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
    #define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
    #define GL_INCLUSIVE_EXT 0x8F10
    #define GL_INCR 0x1E02
    #define GL_INCR_WRAP 0x8507
    #define GL_INCR_WRAP_EXT 0x8507
    #define GL_INDEX 0x8222
    #define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
    #define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
    #define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
    #define GL_INDEX_ARRAY_COUNT_EXT 0x8087
    #define GL_INDEX_ARRAY_EXT 0x8077
    #define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
    #define GL_INDEX_ARRAY_LIST_IBM 103073
    #define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
    #define GL_INDEX_ARRAY_POINTER_EXT 0x8091
    #define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
    #define GL_INDEX_ARRAY_TYPE_EXT 0x8085
    #define GL_INDEX_BIT_PGI 0x00080000
    #define GL_INDEX_MATERIAL_EXT 0x81B8
    #define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
    #define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
    #define GL_INDEX_TEST_EXT 0x81B5
    #define GL_INDEX_TEST_FUNC_EXT 0x81B6
    #define GL_INDEX_TEST_REF_EXT 0x81B7
    #define GL_INFO_LOG_LENGTH 0x8B84
    #define GL_INNOCENT_CONTEXT_RESET 0x8254
    #define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
    #define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
    #define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
    #define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
    #define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
    #define GL_INT 0x1404
    #define GL_INT16_NV 0x8FE4
    #define GL_INT16_VEC2_NV 0x8FE5
    #define GL_INT16_VEC3_NV 0x8FE6
    #define GL_INT16_VEC4_NV 0x8FE7
    #define GL_INT64_ARB 0x140E
    #define GL_INT64_NV 0x140E
    #define GL_INT64_VEC2_ARB 0x8FE9
    #define GL_INT64_VEC2_NV 0x8FE9
    #define GL_INT64_VEC3_ARB 0x8FEA
    #define GL_INT64_VEC3_NV 0x8FEA
    #define GL_INT64_VEC4_ARB 0x8FEB
    #define GL_INT64_VEC4_NV 0x8FEB
    #define GL_INT8_NV 0x8FE0
    #define GL_INT8_VEC2_NV 0x8FE1
    #define GL_INT8_VEC3_NV 0x8FE2
    #define GL_INT8_VEC4_NV 0x8FE3
    #define GL_INTENSITY12_EXT 0x804C
    #define GL_INTENSITY16F_ARB 0x881D
    #define GL_INTENSITY16I_EXT 0x8D8B
    #define GL_INTENSITY16UI_EXT 0x8D79
    #define GL_INTENSITY16_EXT 0x804D
    #define GL_INTENSITY16_SNORM 0x901B
    #define GL_INTENSITY32F_ARB 0x8817
    #define GL_INTENSITY32I_EXT 0x8D85
    #define GL_INTENSITY32UI_EXT 0x8D73
    #define GL_INTENSITY4_EXT 0x804A
    #define GL_INTENSITY8I_EXT 0x8D91
    #define GL_INTENSITY8UI_EXT 0x8D7F
    #define GL_INTENSITY8_EXT 0x804B
    #define GL_INTENSITY8_SNORM 0x9017
    #define GL_INTENSITY_EXT 0x8049
    #define GL_INTENSITY_FLOAT16_APPLE 0x881D
    #define GL_INTENSITY_FLOAT16_ATI 0x881D
    #define GL_INTENSITY_FLOAT32_APPLE 0x8817
    #define GL_INTENSITY_FLOAT32_ATI 0x8817
    #define GL_INTENSITY_SNORM 0x9013
    #define GL_INTERLACE_OML 0x8980
    #define GL_INTERLACE_READ_INGR 0x8568
    #define GL_INTERLACE_READ_OML 0x8981
    #define GL_INTERLACE_SGIX 0x8094
    #define GL_INTERLEAVED_ATTRIBS 0x8C8C
    #define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
    #define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
    #define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
    #define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
    #define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
    #define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
    #define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
    #define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
    #define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
    #define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
    #define GL_INTERNALFORMAT_PREFERRED 0x8270
    #define GL_INTERNALFORMAT_RED_SIZE 0x8271
    #define GL_INTERNALFORMAT_RED_TYPE 0x8278
    #define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
    #define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
    #define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
    #define GL_INTERNALFORMAT_SUPPORTED 0x826F
    #define GL_INTERPOLATE 0x8575
    #define GL_INTERPOLATE_ARB 0x8575
    #define GL_INTERPOLATE_EXT 0x8575
    #define GL_INT_10_10_10_2_OES 0x8DF7
    #define GL_INT_2_10_10_10_REV 0x8D9F
    #define GL_INT_IMAGE_1D 0x9057
    #define GL_INT_IMAGE_1D_ARRAY 0x905D
    #define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
    #define GL_INT_IMAGE_1D_EXT 0x9057
    #define GL_INT_IMAGE_2D 0x9058
    #define GL_INT_IMAGE_2D_ARRAY 0x905E
    #define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
    #define GL_INT_IMAGE_2D_EXT 0x9058
    #define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
    #define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
    #define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
    #define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
    #define GL_INT_IMAGE_2D_RECT 0x905A
    #define GL_INT_IMAGE_2D_RECT_EXT 0x905A
    #define GL_INT_IMAGE_3D 0x9059
    #define GL_INT_IMAGE_3D_EXT 0x9059
    #define GL_INT_IMAGE_BUFFER 0x905C
    #define GL_INT_IMAGE_BUFFER_EXT 0x905C
    #define GL_INT_IMAGE_BUFFER_OES 0x905C
    #define GL_INT_IMAGE_CUBE 0x905B
    #define GL_INT_IMAGE_CUBE_EXT 0x905B
    #define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
    #define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
    #define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x905F
    #define GL_INT_SAMPLER_1D 0x8DC9
    #define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
    #define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
    #define GL_INT_SAMPLER_1D_EXT 0x8DC9
    #define GL_INT_SAMPLER_2D 0x8DCA
    #define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
    #define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
    #define GL_INT_SAMPLER_2D_EXT 0x8DCA
    #define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
    #define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
    #define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
    #define GL_INT_SAMPLER_2D_RECT 0x8DCD
    #define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
    #define GL_INT_SAMPLER_3D 0x8DCB
    #define GL_INT_SAMPLER_3D_EXT 0x8DCB
    #define GL_INT_SAMPLER_BUFFER 0x8DD0
    #define GL_INT_SAMPLER_BUFFER_AMD 0x9002
    #define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
    #define GL_INT_SAMPLER_BUFFER_OES 0x8DD0
    #define GL_INT_SAMPLER_CUBE 0x8DCC
    #define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
    #define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
    #define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
    #define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900E
    #define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900E
    #define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
    #define GL_INT_VEC2 0x8B53
    #define GL_INT_VEC2_ARB 0x8B53
    #define GL_INT_VEC3 0x8B54
    #define GL_INT_VEC3_ARB 0x8B54
    #define GL_INT_VEC4 0x8B55
    #define GL_INT_VEC4_ARB 0x8B55
    #define GL_INVALID_ENUM 0x0500
    #define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
    #define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
    #define GL_INVALID_INDEX 0xFFFFFFFFu
    #define GL_INVALID_OPERATION 0x0502
    #define GL_INVALID_VALUE 0x0501
    #define GL_INVARIANT_DATATYPE_EXT 0x87EB
    #define GL_INVARIANT_EXT 0x87C2
    #define GL_INVARIANT_VALUE_EXT 0x87EA
    #define GL_INVERSE_NV 0x862B
    #define GL_INVERSE_TRANSPOSE_NV 0x862D
    #define GL_INVERT 0x150A
    #define GL_INVERTED_SCREEN_W_REND 0x8491
    #define GL_INVERT_OVG_NV 0x92B4
    #define GL_INVERT_RGB_NV 0x92A3
    #define GL_IR_INSTRUMENT1_SGIX 0x817F
    #define GL_ISOLINES 0x8E7A
    #define GL_ISOLINES_EXT 0x8E7A
    #define GL_ISOLINES_OES 0x8E7A
    #define GL_IS_PER_PATCH 0x92E7
    #define GL_IS_PER_PATCH_EXT 0x92E7
    #define GL_IS_PER_PATCH_OES 0x92E7
    #define GL_IS_ROW_MAJOR 0x9300
    #define GL_ITALIC_BIT_NV 0x02
    #define GL_IUI_N3F_V2F_EXT 0x81AF
    #define GL_IUI_N3F_V3F_EXT 0x81B0
    #define GL_IUI_V2F_EXT 0x81AD
    #define GL_IUI_V3F_EXT 0x81AE
    #define GL_KEEP 0x1E00
    #define GL_KTX_BACK_REGION 0x1
    #define GL_KTX_FRONT_REGION 0x0
    #define GL_KTX_STENCIL_REGION 0x3
    #define GL_KTX_Z_REGION 0x2
    #define GL_LARGE_CCW_ARC_TO_NV 0x16
    #define GL_LARGE_CW_ARC_TO_NV 0x18
    #define GL_LAST_VERTEX_CONVENTION 0x8E4E
    #define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
    #define GL_LAST_VERTEX_CONVENTION_OES 0x8E4E
    #define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
    #define GL_LAYER_NV 0x8DAA
    #define GL_LAYER_PROVOKING_VERTEX 0x825E
    #define GL_LAYER_PROVOKING_VERTEX_EXT 0x825E
    #define GL_LAYER_PROVOKING_VERTEX_OES 0x825E
    #define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
    #define GL_LAYOUT_DEFAULT_INTEL 0
    #define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
    #define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
    #define GL_LAYOUT_GENERAL_EXT 0x958D
    #define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
    #define GL_LAYOUT_LINEAR_INTEL 1
    #define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
    #define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
    #define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
    #define GL_LEFT 0x0406
    #define GL_LEQUAL 0x0203
    #define GL_LERP_ATI 0x8969
    #define GL_LESS 0x0201
    #define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
    #define GL_LIGHTEN 0x9298
    #define GL_LIGHTEN_KHR 0x9298
    #define GL_LIGHTEN_NV 0x9298
    #define GL_LIGHT_ENV_MODE_SGIX 0x8407
    #define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
    #define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
    #define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
    #define GL_LINE 0x1B01
    #define GL_LINEAR 0x2601
    #define GL_LINEARBURN_NV 0x92A5
    #define GL_LINEARDODGE_NV 0x92A4
    #define GL_LINEARLIGHT_NV 0x92A7
    #define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
    #define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
    #define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
    #define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
    #define GL_LINEAR_DETAIL_SGIS 0x8097
    #define GL_LINEAR_MIPMAP_LINEAR 0x2703
    #define GL_LINEAR_MIPMAP_NEAREST 0x2701
    #define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
    #define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
    #define GL_LINEAR_SHARPEN_SGIS 0x80AD
    #define GL_LINEAR_TILING_EXT 0x9585
    #define GL_LINES 0x0001
    #define GL_LINES_ADJACENCY 0x000A
    #define GL_LINES_ADJACENCY_ARB 0x000A
    #define GL_LINES_ADJACENCY_EXT 0x000A
    #define GL_LINES_ADJACENCY_OES 0x000A
    #define GL_LINE_LOOP 0x0002
    #define GL_LINE_NV 0x1B01
    #define GL_LINE_SMOOTH 0x0B20
    #define GL_LINE_SMOOTH_HINT 0x0C52
    #define GL_LINE_STRIP 0x0003
    #define GL_LINE_STRIP_ADJACENCY 0x000B
    #define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
    #define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
    #define GL_LINE_STRIP_ADJACENCY_OES 0x000B
    #define GL_LINE_TO_NV 0x04
    #define GL_LINE_WIDTH 0x0B21
    #define GL_LINE_WIDTH_COMMAND_NV 0x000D
    #define GL_LINE_WIDTH_GRANULARITY 0x0B23
    #define GL_LINE_WIDTH_RANGE 0x0B22
    #define GL_LINK_STATUS 0x8B82
    #define GL_LIST_PRIORITY_SGIX 0x8182
    #define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
    #define GL_LOCAL_CONSTANT_EXT 0x87C3
    #define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
    #define GL_LOCAL_EXT 0x87C4
    #define GL_LOCATION 0x930E
    #define GL_LOCATION_COMPONENT 0x934A
    #define GL_LOCATION_INDEX 0x930F
    #define GL_LOCATION_INDEX_EXT 0x930F
    #define GL_LOGIC_OP_MODE 0x0BF0
    #define GL_LOSE_CONTEXT_ON_RESET 0x8252
    #define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
    #define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
    #define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
    #define GL_LOWER_LEFT 0x8CA1
    #define GL_LOW_FLOAT 0x8DF0
    #define GL_LOW_INT 0x8DF3
    #define GL_LO_BIAS_NV 0x8715
    #define GL_LO_SCALE_NV 0x870F
    #define GL_LUID_SIZE_EXT 8
    #define GL_LUMINANCE 0x1909
    #define GL_LUMINANCE12_ALPHA12_EXT 0x8047
    #define GL_LUMINANCE12_ALPHA4_EXT 0x8046
    #define GL_LUMINANCE12_EXT 0x8041
    #define GL_LUMINANCE16F_ARB 0x881E
    #define GL_LUMINANCE16F_EXT 0x881E
    #define GL_LUMINANCE16I_EXT 0x8D8C
    #define GL_LUMINANCE16UI_EXT 0x8D7A
    #define GL_LUMINANCE16_ALPHA16_EXT 0x8048
    #define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
    #define GL_LUMINANCE16_EXT 0x8042
    #define GL_LUMINANCE16_SNORM 0x9019
    #define GL_LUMINANCE32F_ARB 0x8818
    #define GL_LUMINANCE32F_EXT 0x8818
    #define GL_LUMINANCE32I_EXT 0x8D86
    #define GL_LUMINANCE32UI_EXT 0x8D74
    #define GL_LUMINANCE4_ALPHA4_EXT 0x8043
    #define GL_LUMINANCE4_ALPHA4_OES 0x8043
    #define GL_LUMINANCE4_EXT 0x803F
    #define GL_LUMINANCE6_ALPHA2_EXT 0x8044
    #define GL_LUMINANCE8I_EXT 0x8D92
    #define GL_LUMINANCE8UI_EXT 0x8D80
    #define GL_LUMINANCE8_ALPHA8_EXT 0x8045
    #define GL_LUMINANCE8_ALPHA8_OES 0x8045
    #define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
    #define GL_LUMINANCE8_EXT 0x8040
    #define GL_LUMINANCE8_OES 0x8040
    #define GL_LUMINANCE8_SNORM 0x9015
    #define GL_LUMINANCE_ALPHA 0x190A
    #define GL_LUMINANCE_ALPHA16F_ARB 0x881F
    #define GL_LUMINANCE_ALPHA16F_EXT 0x881F
    #define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
    #define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
    #define GL_LUMINANCE_ALPHA32F_ARB 0x8819
    #define GL_LUMINANCE_ALPHA32F_EXT 0x8819
    #define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
    #define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
    #define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
    #define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
    #define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
    #define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
    #define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
    #define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
    #define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
    #define GL_LUMINANCE_ALPHA_SNORM 0x9012
    #define GL_LUMINANCE_FLOAT16_APPLE 0x881E
    #define GL_LUMINANCE_FLOAT16_ATI 0x881E
    #define GL_LUMINANCE_FLOAT32_APPLE 0x8818
    #define GL_LUMINANCE_FLOAT32_ATI 0x8818
    #define GL_LUMINANCE_INTEGER_EXT 0x8D9C
    #define GL_LUMINANCE_SNORM 0x9011
    #define GL_MAD_ATI 0x8968
    #define GL_MAGNITUDE_BIAS_NV 0x8718
    #define GL_MAGNITUDE_SCALE_NV 0x8712
    #define GL_MAJOR_VERSION 0x821B
    #define GL_MALI_PROGRAM_BINARY_ARM 0x8F61
    #define GL_MALI_SHADER_BINARY_ARM 0x8F60
    #define GL_MANUAL_GENERATE_MIPMAP 0x8294
    #define GL_MAP1_BINORMAL_EXT 0x8446
    #define GL_MAP1_TANGENT_EXT 0x8444
    #define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
    #define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
    #define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
    #define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
    #define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
    #define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
    #define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
    #define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
    #define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
    #define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
    #define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
    #define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
    #define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
    #define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
    #define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
    #define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
    #define GL_MAP2_BINORMAL_EXT 0x8447
    #define GL_MAP2_TANGENT_EXT 0x8445
    #define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
    #define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
    #define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
    #define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
    #define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
    #define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
    #define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
    #define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
    #define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
    #define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
    #define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
    #define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
    #define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
    #define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
    #define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
    #define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
    #define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
    #define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
    #define GL_MAP_COHERENT_BIT 0x0080
    #define GL_MAP_COHERENT_BIT_EXT 0x0080
    #define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
    #define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
    #define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
    #define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
    #define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
    #define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
    #define GL_MAP_PERSISTENT_BIT 0x0040
    #define GL_MAP_PERSISTENT_BIT_EXT 0x0040
    #define GL_MAP_READ_BIT 0x0001
    #define GL_MAP_READ_BIT_EXT 0x0001
    #define GL_MAP_TESSELLATION_NV 0x86C2
    #define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
    #define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
    #define GL_MAP_WRITE_BIT 0x0002
    #define GL_MAP_WRITE_BIT_EXT 0x0002
    #define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
    #define GL_MATRIX0_ARB 0x88C0
    #define GL_MATRIX0_NV 0x8630
    #define GL_MATRIX10_ARB 0x88CA
    #define GL_MATRIX11_ARB 0x88CB
    #define GL_MATRIX12_ARB 0x88CC
    #define GL_MATRIX13_ARB 0x88CD
    #define GL_MATRIX14_ARB 0x88CE
    #define GL_MATRIX15_ARB 0x88CF
    #define GL_MATRIX16_ARB 0x88D0
    #define GL_MATRIX17_ARB 0x88D1
    #define GL_MATRIX18_ARB 0x88D2
    #define GL_MATRIX19_ARB 0x88D3
    #define GL_MATRIX1_ARB 0x88C1
    #define GL_MATRIX1_NV 0x8631
    #define GL_MATRIX20_ARB 0x88D4
    #define GL_MATRIX21_ARB 0x88D5
    #define GL_MATRIX22_ARB 0x88D6
    #define GL_MATRIX23_ARB 0x88D7
    #define GL_MATRIX24_ARB 0x88D8
    #define GL_MATRIX25_ARB 0x88D9
    #define GL_MATRIX26_ARB 0x88DA
    #define GL_MATRIX27_ARB 0x88DB
    #define GL_MATRIX28_ARB 0x88DC
    #define GL_MATRIX29_ARB 0x88DD
    #define GL_MATRIX2_ARB 0x88C2
    #define GL_MATRIX2_NV 0x8632
    #define GL_MATRIX30_ARB 0x88DE
    #define GL_MATRIX31_ARB 0x88DF
    #define GL_MATRIX3_ARB 0x88C3
    #define GL_MATRIX3_NV 0x8633
    #define GL_MATRIX4_ARB 0x88C4
    #define GL_MATRIX4_NV 0x8634
    #define GL_MATRIX5_ARB 0x88C5
    #define GL_MATRIX5_NV 0x8635
    #define GL_MATRIX6_ARB 0x88C6
    #define GL_MATRIX6_NV 0x8636
    #define GL_MATRIX7_ARB 0x88C7
    #define GL_MATRIX7_NV 0x8637
    #define GL_MATRIX8_ARB 0x88C8
    #define GL_MATRIX9_ARB 0x88C9
    #define GL_MATRIX_EXT 0x87C0
    #define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
    #define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
    #define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
    #define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
    #define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
    #define GL_MATRIX_PALETTE_ARB 0x8840
    #define GL_MATRIX_STRIDE 0x92FF
    #define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
    #define GL_MAT_AMBIENT_BIT_PGI 0x00100000
    #define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
    #define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
    #define GL_MAT_EMISSION_BIT_PGI 0x00800000
    #define GL_MAT_SHININESS_BIT_PGI 0x02000000
    #define GL_MAT_SPECULAR_BIT_PGI 0x04000000
    #define GL_MAX 0x8008
    #define GL_MAX_3D_TEXTURE_SIZE 0x8073
    #define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
    #define GL_MAX_3D_TEXTURE_SIZE_OES 0x8073
    #define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
    #define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
    #define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
    #define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
    #define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
    #define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
    #define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
    #define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
    #define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
    #define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
    #define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
    #define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
    #define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
    #define GL_MAX_CLIP_DISTANCES 0x0D32
    #define GL_MAX_CLIP_DISTANCES_APPLE 0x0D32
    #define GL_MAX_CLIP_DISTANCES_EXT 0x0D32
    #define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
    #define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
    #define GL_MAX_COLOR_ATTACHMENTS_NV 0x8CDF
    #define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
    #define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
    #define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
    #define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
    #define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
    #define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
    #define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0x82FA
    #define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
    #define GL_MAX_COMBINED_DIMENSIONS 0x8282
    #define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
    #define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
    #define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
    #define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
    #define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
    #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
    #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
    #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
    #define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
    #define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
    #define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
    #define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
    #define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
    #define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
    #define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
    #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
    #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
    #define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
    #define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
    #define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
    #define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
    #define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
    #define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
    #define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
    #define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
    #define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
    #define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
    #define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
    #define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
    #define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
    #define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
    #define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
    #define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
    #define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
    #define GL_MAX_CONVOLUTION_HEIGHT 0x801B
    #define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
    #define GL_MAX_CONVOLUTION_WIDTH 0x801A
    #define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
    #define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
    #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
    #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
    #define GL_MAX_CULL_DISTANCES 0x82F9
    #define GL_MAX_CULL_DISTANCES_EXT 0x82F9
    #define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
    #define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
    #define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
    #define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
    #define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
    #define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
    #define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
    #define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
    #define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
    #define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
    #define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
    #define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
    #define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
    #define GL_MAX_DEPTH 0x8280
    #define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
    #define GL_MAX_DRAW_BUFFERS 0x8824
    #define GL_MAX_DRAW_BUFFERS_ARB 0x8824
    #define GL_MAX_DRAW_BUFFERS_ATI 0x8824
    #define GL_MAX_DRAW_BUFFERS_EXT 0x8824
    #define GL_MAX_DRAW_BUFFERS_NV 0x8824
    #define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
    #define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0x88FC
    #define GL_MAX_ELEMENTS_INDICES 0x80E9
    #define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
    #define GL_MAX_ELEMENTS_VERTICES 0x80E8
    #define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
    #define GL_MAX_ELEMENT_INDEX 0x8D6B
    #define GL_MAX_EXT 0x8008
    #define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
    #define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
    #define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
    #define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
    #define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
    #define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
    #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
    #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
    #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5C
    #define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
    #define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
    #define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
    #define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
    #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
    #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
    #define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
    #define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
    #define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
    #define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0x9317
    #define GL_MAX_FRAMEBUFFER_LAYERS_OES 0x9317
    #define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
    #define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
    #define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
    #define GL_MAX_GENERAL_COMBINERS_NV 0x854D
    #define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
    #define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
    #define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
    #define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
    #define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
    #define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
    #define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
    #define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
    #define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
    #define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
    #define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
    #define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
    #define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
    #define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
    #define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
    #define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
    #define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
    #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
    #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
    #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
    #define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
    #define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
    #define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
    #define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
    #define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
    #define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
    #define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
    #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
    #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
    #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
    #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
    #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
    #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
    #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
    #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
    #define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
    #define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
    #define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
    #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
    #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
    #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
    #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
    #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
    #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
    #define GL_MAX_HEIGHT 0x827F
    #define GL_MAX_IMAGE_SAMPLES 0x906D
    #define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
    #define GL_MAX_IMAGE_UNITS 0x8F38
    #define GL_MAX_IMAGE_UNITS_EXT 0x8F38
    #define GL_MAX_INTEGER_SAMPLES 0x9110
    #define GL_MAX_LABEL_LENGTH 0x82E8
    #define GL_MAX_LABEL_LENGTH_KHR 0x82E8
    #define GL_MAX_LAYERS 0x8281
    #define GL_MAX_LGPU_GPUS_NVX 0x92BA
    #define GL_MAX_MAP_TESSELLATION_NV 0x86D6
    #define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
    #define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
    #define GL_MAX_MULTIVIEW_BUFFERS_EXT 0x90F2
    #define GL_MAX_NAME_LENGTH 0x92F6
    #define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
    #define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
    #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
    #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
    #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
    #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
    #define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
    #define GL_MAX_PALETTE_MATRICES_ARB 0x8842
    #define GL_MAX_PATCH_VERTICES 0x8E7D
    #define GL_MAX_PATCH_VERTICES_EXT 0x8E7D
    #define GL_MAX_PATCH_VERTICES_OES 0x8E7D
    #define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
    #define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
    #define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
    #define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
    #define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
    #define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
    #define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
    #define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
    #define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
    #define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
    #define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
    #define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
    #define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
    #define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
    #define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
    #define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
    #define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
    #define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
    #define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
    #define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
    #define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
    #define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
    #define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
    #define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
    #define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
    #define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
    #define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
    #define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
    #define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
    #define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
    #define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
    #define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
    #define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
    #define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
    #define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
    #define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
    #define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
    #define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
    #define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
    #define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
    #define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
    #define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
    #define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
    #define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
    #define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
    #define GL_MAX_RASTER_SAMPLES_EXT 0x9329
    #define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
    #define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
    #define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
    #define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
    #define GL_MAX_RENDERBUFFER_SIZE 0x84E8
    #define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
    #define GL_MAX_SAMPLES 0x8D57
    #define GL_MAX_SAMPLES_ANGLE 0x8D57
    #define GL_MAX_SAMPLES_APPLE 0x8D57
    #define GL_MAX_SAMPLES_EXT 0x8D57
    #define GL_MAX_SAMPLES_IMG 0x9135
    #define GL_MAX_SAMPLES_NV 0x8D57
    #define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
    #define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
    #define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
    #define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
    #define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
    #define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0x9650
    #define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0x9651
    #define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
    #define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0x8F63
    #define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0x8F67
    #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
    #define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
    #define GL_MAX_SHININESS_NV 0x8504
    #define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
    #define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
    #define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0x9199
    #define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
    #define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
    #define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0x919A
    #define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
    #define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
    #define GL_MAX_SPARSE_TEXTURE_SIZE_EXT 0x9198
    #define GL_MAX_SPOT_EXPONENT_NV 0x8505
    #define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
    #define GL_MAX_SUBROUTINES 0x8DE7
    #define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
    #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
    #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
    #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
    #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
    #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
    #define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
    #define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
    #define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
    #define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
    #define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
    #define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
    #define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
    #define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
    #define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
    #define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
    #define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
    #define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
    #define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
    #define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
    #define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
    #define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
    #define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
    #define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
    #define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
    #define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
    #define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
    #define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
    #define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
    #define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
    #define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
    #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
    #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
    #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
    #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
    #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
    #define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
    #define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
    #define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
    #define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
    #define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
    #define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
    #define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
    #define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
    #define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
    #define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
    #define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
    #define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
    #define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
    #define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
    #define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
    #define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
    #define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
    #define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
    #define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
    #define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
    #define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
    #define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
    #define GL_MAX_TESS_GEN_LEVEL 0x8E7E
    #define GL_MAX_TESS_GEN_LEVEL_EXT 0x8E7E
    #define GL_MAX_TESS_GEN_LEVEL_OES 0x8E7E
    #define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
    #define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0x8E84
    #define GL_MAX_TESS_PATCH_COMPONENTS_OES 0x8E84
    #define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
    #define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
    #define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
    #define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0x8C2B
    #define GL_MAX_TEXTURE_COORDS 0x8871
    #define GL_MAX_TEXTURE_COORDS_ARB 0x8871
    #define GL_MAX_TEXTURE_COORDS_NV 0x8871
    #define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
    #define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
    #define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
    #define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
    #define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
    #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
    #define GL_MAX_TEXTURE_SIZE 0x0D33
    #define GL_MAX_TEXTURE_UNITS 0x84E2
    #define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
    #define GL_MAX_TRACK_MATRICES_NV 0x862F
    #define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
    #define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
    #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
    #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
    #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
    #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
    #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
    #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
    #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
    #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
    #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
    #define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
    #define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
    #define GL_MAX_UNIFORM_LOCATIONS 0x826E
    #define GL_MAX_VARYING_COMPONENTS 0x8B4B
    #define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
    #define GL_MAX_VARYING_FLOATS 0x8B4B
    #define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
    #define GL_MAX_VARYING_VECTORS 0x8DFC
    #define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
    #define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
    #define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
    #define GL_MAX_VERTEX_ATTRIBS 0x8869
    #define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
    #define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
    #define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
    #define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
    #define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
    #define GL_MAX_VERTEX_HINT_PGI 0x1A22D
    #define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
    #define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
    #define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
    #define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
    #define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
    #define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
    #define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
    #define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
    #define GL_MAX_VERTEX_STREAMS 0x8E71
    #define GL_MAX_VERTEX_STREAMS_ATI 0x876B
    #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
    #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
    #define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
    #define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
    #define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
    #define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
    #define GL_MAX_VERTEX_UNITS_ARB 0x86A4
    #define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
    #define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
    #define GL_MAX_VIEWPORTS 0x825B
    #define GL_MAX_VIEWPORTS_NV 0x825B
    #define GL_MAX_VIEWPORTS_OES 0x825B
    #define GL_MAX_VIEWPORT_DIMS 0x0D3A
    #define GL_MAX_VIEWS_OVR 0x9631
    #define GL_MAX_WIDTH 0x827E
    #define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
    #define GL_MEDIUM_FLOAT 0x8DF1
    #define GL_MEDIUM_INT 0x8DF4
    #define GL_MIN 0x8007
    #define GL_MINMAX 0x802E
    #define GL_MINMAX_EXT 0x802E
    #define GL_MINMAX_FORMAT 0x802F
    #define GL_MINMAX_FORMAT_EXT 0x802F
    #define GL_MINMAX_SINK 0x8030
    #define GL_MINMAX_SINK_EXT 0x8030
    #define GL_MINOR_VERSION 0x821C
    #define GL_MINUS_CLAMPED_NV 0x92B3
    #define GL_MINUS_NV 0x929F
    #define GL_MIN_EXT 0x8007
    #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
    #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
    #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5B
    #define GL_MIN_LOD_WARNING_AMD 0x919C
    #define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
    #define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
    #define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
    #define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
    #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
    #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
    #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
    #define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
    #define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
    #define GL_MIN_SAMPLE_SHADING_VALUE_OES 0x8C37
    #define GL_MIN_SPARSE_LEVEL_AMD 0x919B
    #define GL_MIPMAP 0x8293
    #define GL_MIRRORED_REPEAT 0x8370
    #define GL_MIRRORED_REPEAT_ARB 0x8370
    #define GL_MIRRORED_REPEAT_IBM 0x8370
    #define GL_MIRROR_CLAMP_ATI 0x8742
    #define GL_MIRROR_CLAMP_EXT 0x8742
    #define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
    #define GL_MIRROR_CLAMP_TO_EDGE 0x8743
    #define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
    #define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
    #define GL_MITER_REVERT_NV 0x90A7
    #define GL_MITER_TRUNCATE_NV 0x90A8
    #define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
    #define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
    #define GL_MODELVIEW0_ARB 0x1700
    #define GL_MODELVIEW0_EXT 0x1700
    #define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
    #define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
    #define GL_MODELVIEW10_ARB 0x872A
    #define GL_MODELVIEW11_ARB 0x872B
    #define GL_MODELVIEW12_ARB 0x872C
    #define GL_MODELVIEW13_ARB 0x872D
    #define GL_MODELVIEW14_ARB 0x872E
    #define GL_MODELVIEW15_ARB 0x872F
    #define GL_MODELVIEW16_ARB 0x8730
    #define GL_MODELVIEW17_ARB 0x8731
    #define GL_MODELVIEW18_ARB 0x8732
    #define GL_MODELVIEW19_ARB 0x8733
    #define GL_MODELVIEW1_ARB 0x850A
    #define GL_MODELVIEW1_EXT 0x850A
    #define GL_MODELVIEW1_MATRIX_EXT 0x8506
    #define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
    #define GL_MODELVIEW20_ARB 0x8734
    #define GL_MODELVIEW21_ARB 0x8735
    #define GL_MODELVIEW22_ARB 0x8736
    #define GL_MODELVIEW23_ARB 0x8737
    #define GL_MODELVIEW24_ARB 0x8738
    #define GL_MODELVIEW25_ARB 0x8739
    #define GL_MODELVIEW26_ARB 0x873A
    #define GL_MODELVIEW27_ARB 0x873B
    #define GL_MODELVIEW28_ARB 0x873C
    #define GL_MODELVIEW29_ARB 0x873D
    #define GL_MODELVIEW2_ARB 0x8722
    #define GL_MODELVIEW30_ARB 0x873E
    #define GL_MODELVIEW31_ARB 0x873F
    #define GL_MODELVIEW3_ARB 0x8723
    #define GL_MODELVIEW4_ARB 0x8724
    #define GL_MODELVIEW5_ARB 0x8725
    #define GL_MODELVIEW6_ARB 0x8726
    #define GL_MODELVIEW7_ARB 0x8727
    #define GL_MODELVIEW8_ARB 0x8728
    #define GL_MODELVIEW9_ARB 0x8729
    #define GL_MODELVIEW_PROJECTION_NV 0x8629
    #define GL_MODULATE_ADD_ATI 0x8744
    #define GL_MODULATE_SIGNED_ADD_ATI 0x8745
    #define GL_MODULATE_SUBTRACT_ATI 0x8746
    #define GL_MOVE_TO_CONTINUES_NV 0x90B6
    #define GL_MOVE_TO_NV 0x02
    #define GL_MOVE_TO_RESETS_NV 0x90B5
    #define GL_MOV_ATI 0x8961
    #define GL_MULTICAST_GPUS_NV 0x92BA
    #define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
    #define GL_MULTIPLY 0x9294
    #define GL_MULTIPLY_KHR 0x9294
    #define GL_MULTIPLY_NV 0x9294
    #define GL_MULTISAMPLE 0x809D
    #define GL_MULTISAMPLES_NV 0x9371
    #define GL_MULTISAMPLE_3DFX 0x86B2
    #define GL_MULTISAMPLE_ARB 0x809D
    #define GL_MULTISAMPLE_BIT 0x20000000
    #define GL_MULTISAMPLE_BIT_3DFX 0x20000000
    #define GL_MULTISAMPLE_BIT_ARB 0x20000000
    #define GL_MULTISAMPLE_BIT_EXT 0x20000000
    #define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0x01000000
    #define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0x02000000
    #define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0x04000000
    #define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0x08000000
    #define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0x10000000
    #define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0x20000000
    #define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0x40000000
    #define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0x80000000
    #define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
    #define GL_MULTISAMPLE_EXT 0x809D
    #define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
    #define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
    #define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
    #define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
    #define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
    #define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
    #define GL_MULTISAMPLE_SGIS 0x809D
    #define GL_MULTIVIEW_EXT 0x90F1
    #define GL_MUL_ATI 0x8964
    #define GL_MVP_MATRIX_EXT 0x87E3
    #define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
    #define GL_NAMED_STRING_TYPE_ARB 0x8DEA
    #define GL_NAME_LENGTH 0x92F9
    #define GL_NAND 0x150E
    #define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
    #define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
    #define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
    #define GL_NEAREST 0x2600
    #define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
    #define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
    #define GL_NEAREST_MIPMAP_LINEAR 0x2702
    #define GL_NEAREST_MIPMAP_NEAREST 0x2700
    #define GL_NEGATE_BIT_ATI 0x00000004
    #define GL_NEGATIVE_ONE_EXT 0x87DF
    #define GL_NEGATIVE_ONE_TO_ONE 0x935E
    #define GL_NEGATIVE_W_EXT 0x87DC
    #define GL_NEGATIVE_X_EXT 0x87D9
    #define GL_NEGATIVE_Y_EXT 0x87DA
    #define GL_NEGATIVE_Z_EXT 0x87DB
    #define GL_NEVER 0x0200
    #define GL_NEXT_BUFFER_NV -2
    #define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
    #define GL_NICEST 0x1102
    #define GL_NONE 0
    #define GL_NOOP 0x1505
    #define GL_NOP_COMMAND_NV 0x0001
    #define GL_NOR 0x1508
    #define GL_NORMALIZED_RANGE_EXT 0x87E0
    #define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
    #define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
    #define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
    #define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
    #define GL_NORMAL_ARRAY_EXT 0x8075
    #define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
    #define GL_NORMAL_ARRAY_LIST_IBM 103071
    #define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
    #define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
    #define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
    #define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
    #define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
    #define GL_NORMAL_BIT_PGI 0x08000000
    #define GL_NORMAL_MAP 0x8511
    #define GL_NORMAL_MAP_ARB 0x8511
    #define GL_NORMAL_MAP_EXT 0x8511
    #define GL_NORMAL_MAP_NV 0x8511
    #define GL_NOTEQUAL 0x0205
    #define GL_NO_ERROR 0
    #define GL_NO_RESET_NOTIFICATION 0x8261
    #define GL_NO_RESET_NOTIFICATION_ARB 0x8261
    #define GL_NO_RESET_NOTIFICATION_EXT 0x8261
    #define GL_NO_RESET_NOTIFICATION_KHR 0x8261
    #define GL_NUM_ACTIVE_VARIABLES 0x9304
    #define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
    #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
    #define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
    #define GL_NUM_DEVICE_UUIDS_EXT 0x9596
    #define GL_NUM_DOWNSAMPLE_SCALES_IMG 0x913D
    #define GL_NUM_EXTENSIONS 0x821D
    #define GL_NUM_FILL_STREAMS_NV 0x8E29
    #define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
    #define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
    #define GL_NUM_GENERAL_COMBINERS_NV 0x854E
    #define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
    #define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
    #define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
    #define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
    #define GL_NUM_PASSES_ATI 0x8970
    #define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
    #define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
    #define GL_NUM_SAMPLE_COUNTS 0x9380
    #define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
    #define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
    #define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
    #define GL_NUM_SPARSE_LEVELS_EXT 0x91AA
    #define GL_NUM_TILING_TYPES_EXT 0x9582
    #define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
    #define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
    #define GL_NUM_VIRTUAL_PAGE_SIZES_EXT 0x91A8
    #define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
    #define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
    #define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
    #define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
    #define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
    #define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
    #define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
    #define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
    #define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
    #define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
    #define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
    #define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
    #define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
    #define GL_OBJECT_LINEAR_NV 0x2401
    #define GL_OBJECT_LINE_SGIS 0x81F7
    #define GL_OBJECT_LINK_STATUS_ARB 0x8B82
    #define GL_OBJECT_POINT_SGIS 0x81F5
    #define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
    #define GL_OBJECT_SUBTYPE_ARB 0x8B4F
    #define GL_OBJECT_TYPE 0x9112
    #define GL_OBJECT_TYPE_APPLE 0x9112
    #define GL_OBJECT_TYPE_ARB 0x8B4E
    #define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
    #define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
    #define GL_OCCLUSION_TEST_HP 0x8165
    #define GL_OCCLUSION_TEST_RESULT_HP 0x8166
    #define GL_OFFSET 0x92FC
    #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
    #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
    #define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
    #define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
    #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
    #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
    #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
    #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
    #define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
    #define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
    #define GL_OFFSET_TEXTURE_2D_NV 0x86E8
    #define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
    #define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
    #define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
    #define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
    #define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
    #define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
    #define GL_ONE 1
    #define GL_ONE_EXT 0x87DE
    #define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
    #define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
    #define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
    #define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
    #define GL_ONE_MINUS_DST_ALPHA 0x0305
    #define GL_ONE_MINUS_DST_COLOR 0x0307
    #define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
    #define GL_ONE_MINUS_SRC1_ALPHA_EXT 0x88FB
    #define GL_ONE_MINUS_SRC1_COLOR 0x88FA
    #define GL_ONE_MINUS_SRC1_COLOR_EXT 0x88FA
    #define GL_ONE_MINUS_SRC_ALPHA 0x0303
    #define GL_ONE_MINUS_SRC_COLOR 0x0301
    #define GL_OPERAND0_ALPHA 0x8598
    #define GL_OPERAND0_ALPHA_ARB 0x8598
    #define GL_OPERAND0_ALPHA_EXT 0x8598
    #define GL_OPERAND0_RGB 0x8590
    #define GL_OPERAND0_RGB_ARB 0x8590
    #define GL_OPERAND0_RGB_EXT 0x8590
    #define GL_OPERAND1_ALPHA 0x8599
    #define GL_OPERAND1_ALPHA_ARB 0x8599
    #define GL_OPERAND1_ALPHA_EXT 0x8599
    #define GL_OPERAND1_RGB 0x8591
    #define GL_OPERAND1_RGB_ARB 0x8591
    #define GL_OPERAND1_RGB_EXT 0x8591
    #define GL_OPERAND2_ALPHA 0x859A
    #define GL_OPERAND2_ALPHA_ARB 0x859A
    #define GL_OPERAND2_ALPHA_EXT 0x859A
    #define GL_OPERAND2_RGB 0x8592
    #define GL_OPERAND2_RGB_ARB 0x8592
    #define GL_OPERAND2_RGB_EXT 0x8592
    #define GL_OPERAND3_ALPHA_NV 0x859B
    #define GL_OPERAND3_RGB_NV 0x8593
    #define GL_OPTIMAL_TILING_EXT 0x9584
    #define GL_OP_ADD_EXT 0x8787
    #define GL_OP_CLAMP_EXT 0x878E
    #define GL_OP_CROSS_PRODUCT_EXT 0x8797
    #define GL_OP_DOT3_EXT 0x8784
    #define GL_OP_DOT4_EXT 0x8785
    #define GL_OP_EXP_BASE_2_EXT 0x8791
    #define GL_OP_FLOOR_EXT 0x878F
    #define GL_OP_FRAC_EXT 0x8789
    #define GL_OP_INDEX_EXT 0x8782
    #define GL_OP_LOG_BASE_2_EXT 0x8792
    #define GL_OP_MADD_EXT 0x8788
    #define GL_OP_MAX_EXT 0x878A
    #define GL_OP_MIN_EXT 0x878B
    #define GL_OP_MOV_EXT 0x8799
    #define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
    #define GL_OP_MUL_EXT 0x8786
    #define GL_OP_NEGATE_EXT 0x8783
    #define GL_OP_POWER_EXT 0x8793
    #define GL_OP_RECIP_EXT 0x8794
    #define GL_OP_RECIP_SQRT_EXT 0x8795
    #define GL_OP_ROUND_EXT 0x8790
    #define GL_OP_SET_GE_EXT 0x878C
    #define GL_OP_SET_LT_EXT 0x878D
    #define GL_OP_SUB_EXT 0x8796
    #define GL_OR 0x1507
    #define GL_OR_INVERTED 0x150D
    #define GL_OR_REVERSE 0x150B
    #define GL_OUTPUT_COLOR0_EXT 0x879B
    #define GL_OUTPUT_COLOR1_EXT 0x879C
    #define GL_OUTPUT_FOG_EXT 0x87BD
    #define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
    #define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
    #define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
    #define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
    #define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
    #define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
    #define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
    #define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
    #define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
    #define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
    #define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
    #define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
    #define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
    #define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
    #define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
    #define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
    #define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
    #define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
    #define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
    #define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
    #define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
    #define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
    #define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
    #define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
    #define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
    #define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
    #define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
    #define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
    #define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
    #define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
    #define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
    #define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
    #define GL_OUTPUT_VERTEX_EXT 0x879A
    #define GL_OUT_OF_MEMORY 0x0505
    #define GL_OVERLAY 0x9296
    #define GL_OVERLAY_KHR 0x9296
    #define GL_OVERLAY_NV 0x9296
    #define GL_PACK_ALIGNMENT 0x0D05
    #define GL_PACK_CMYK_HINT_EXT 0x800E
    #define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
    #define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
    #define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
    #define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
    #define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
    #define GL_PACK_IMAGE_HEIGHT 0x806C
    #define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
    #define GL_PACK_INVERT_MESA 0x8758
    #define GL_PACK_LSB_FIRST 0x0D01
    #define GL_PACK_RESAMPLE_OML 0x8984
    #define GL_PACK_RESAMPLE_SGIX 0x842E
    #define GL_PACK_REVERSE_ROW_ORDER_ANGLE 0x93A4
    #define GL_PACK_ROW_BYTES_APPLE 0x8A15
    #define GL_PACK_ROW_LENGTH 0x0D02
    #define GL_PACK_SKIP_IMAGES 0x806B
    #define GL_PACK_SKIP_IMAGES_EXT 0x806B
    #define GL_PACK_SKIP_PIXELS 0x0D04
    #define GL_PACK_SKIP_ROWS 0x0D03
    #define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
    #define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
    #define GL_PACK_SWAP_BYTES 0x0D00
    #define GL_PALETTE4_R5_G6_B5_OES 0x8B92
    #define GL_PALETTE4_RGB5_A1_OES 0x8B94
    #define GL_PALETTE4_RGB8_OES 0x8B90
    #define GL_PALETTE4_RGBA4_OES 0x8B93
    #define GL_PALETTE4_RGBA8_OES 0x8B91
    #define GL_PALETTE8_R5_G6_B5_OES 0x8B97
    #define GL_PALETTE8_RGB5_A1_OES 0x8B99
    #define GL_PALETTE8_RGB8_OES 0x8B95
    #define GL_PALETTE8_RGBA4_OES 0x8B98
    #define GL_PALETTE8_RGBA8_OES 0x8B96
    #define GL_PARALLEL_ARRAYS_INTEL 0x83F4
    #define GL_PARAMETER_BUFFER_ARB 0x80EE
    #define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
    #define GL_PARTIAL_SUCCESS_NV 0x902E
    #define GL_PASS_THROUGH_NV 0x86E6
    #define GL_PATCHES 0x000E
    #define GL_PATCHES_EXT 0x000E
    #define GL_PATCHES_OES 0x000E
    #define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
    #define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
    #define GL_PATCH_VERTICES 0x8E72
    #define GL_PATCH_VERTICES_EXT 0x8E72
    #define GL_PATCH_VERTICES_OES 0x8E72
    #define GL_PATH_CLIENT_LENGTH_NV 0x907F
    #define GL_PATH_COMMAND_COUNT_NV 0x909D
    #define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
    #define GL_PATH_COORD_COUNT_NV 0x909E
    #define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
    #define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
    #define GL_PATH_DASH_CAPS_NV 0x907B
    #define GL_PATH_DASH_OFFSET_NV 0x907E
    #define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
    #define GL_PATH_END_CAPS_NV 0x9076
    #define GL_PATH_ERROR_POSITION_NV 0x90AB
    #define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
    #define GL_PATH_FILL_COVER_MODE_NV 0x9082
    #define GL_PATH_FILL_MASK_NV 0x9081
    #define GL_PATH_FILL_MODE_NV 0x9080
    #define GL_PATH_FOG_GEN_MODE_NV 0x90AC
    #define GL_PATH_FORMAT_PS_NV 0x9071
    #define GL_PATH_FORMAT_SVG_NV 0x9070
    #define GL_PATH_GEN_COEFF_NV 0x90B1
    #define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
    #define GL_PATH_GEN_COMPONENTS_NV 0x90B3
    #define GL_PATH_GEN_MODE_NV 0x90B0
    #define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
    #define GL_PATH_INITIAL_END_CAP_NV 0x9077
    #define GL_PATH_JOIN_STYLE_NV 0x9079
    #define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
    #define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
    #define GL_PATH_MITER_LIMIT_NV 0x907A
    #define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
    #define GL_PATH_MODELVIEW_NV 0x1700
    #define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
    #define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
    #define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
    #define GL_PATH_PROJECTION_NV 0x1701
    #define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
    #define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
    #define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
    #define GL_PATH_STENCIL_FUNC_NV 0x90B7
    #define GL_PATH_STENCIL_REF_NV 0x90B8
    #define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
    #define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
    #define GL_PATH_STROKE_COVER_MODE_NV 0x9083
    #define GL_PATH_STROKE_MASK_NV 0x9084
    #define GL_PATH_STROKE_WIDTH_NV 0x9075
    #define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
    #define GL_PATH_TERMINAL_END_CAP_NV 0x9078
    #define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
    #define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
    #define GL_PERCENTAGE_AMD 0x8BC3
    #define GL_PERFMON_GLOBAL_MODE_QCOM 0x8FA0
    #define GL_PERFMON_RESULT_AMD 0x8BC6
    #define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
    #define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
    #define GL_PERFORMANCE_MONITOR_AMD 0x9152
    #define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
    #define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
    #define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
    #define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
    #define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
    #define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
    #define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
    #define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
    #define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
    #define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
    #define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
    #define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
    #define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
    #define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
    #define GL_PERFQUERY_FLUSH_INTEL 0x83FA
    #define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
    #define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
    #define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
    #define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
    #define GL_PERFQUERY_WAIT_INTEL 0x83FB
    #define GL_PERTURB_EXT 0x85AE
    #define GL_PER_GPU_STORAGE_BIT_NV 0x0800
    #define GL_PER_GPU_STORAGE_NV 0x9548
    #define GL_PER_STAGE_CONSTANTS_NV 0x8535
    #define GL_PHONG_HINT_WIN 0x80EB
    #define GL_PHONG_WIN 0x80EA
    #define GL_PINLIGHT_NV 0x92A8
    #define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
    #define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
    #define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
    #define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
    #define GL_PIXEL_COUNTER_BITS_NV 0x8864
    #define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
    #define GL_PIXEL_COUNT_NV 0x8866
    #define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
    #define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
    #define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
    #define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
    #define GL_PIXEL_MAG_FILTER_EXT 0x8331
    #define GL_PIXEL_MIN_FILTER_EXT 0x8332
    #define GL_PIXEL_PACK_BUFFER 0x88EB
    #define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
    #define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
    #define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
    #define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
    #define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
    #define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
    #define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
    #define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
    #define GL_PIXEL_TEXTURE_SGIS 0x8353
    #define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
    #define GL_PIXEL_TEX_GEN_SGIX 0x8139
    #define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
    #define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
    #define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
    #define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
    #define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
    #define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
    #define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
    #define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
    #define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
    #define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
    #define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
    #define GL_PIXEL_UNPACK_BUFFER 0x88EC
    #define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
    #define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
    #define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
    #define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
    #define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
    #define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
    #define GL_PLUS_CLAMPED_NV 0x92B1
    #define GL_PLUS_DARKER_NV 0x9292
    #define GL_PLUS_NV 0x9291
    #define GL_PN_TRIANGLES_ATI 0x87F0
    #define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
    #define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
    #define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
    #define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
    #define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
    #define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
    #define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
    #define GL_POINT 0x1B00
    #define GL_POINTS 0x0000
    #define GL_POINT_DISTANCE_ATTENUATION 0x8129
    #define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
    #define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
    #define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
    #define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
    #define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
    #define GL_POINT_NV 0x1B00
    #define GL_POINT_SIZE 0x0B11
    #define GL_POINT_SIZE_GRANULARITY 0x0B13
    #define GL_POINT_SIZE_MAX 0x8127
    #define GL_POINT_SIZE_MAX_ARB 0x8127
    #define GL_POINT_SIZE_MAX_EXT 0x8127
    #define GL_POINT_SIZE_MAX_SGIS 0x8127
    #define GL_POINT_SIZE_MIN 0x8126
    #define GL_POINT_SIZE_MIN_ARB 0x8126
    #define GL_POINT_SIZE_MIN_EXT 0x8126
    #define GL_POINT_SIZE_MIN_SGIS 0x8126
    #define GL_POINT_SIZE_RANGE 0x0B12
    #define GL_POINT_SPRITE 0x8861
    #define GL_POINT_SPRITE_ARB 0x8861
    #define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
    #define GL_POINT_SPRITE_NV 0x8861
    #define GL_POINT_SPRITE_R_MODE_NV 0x8863
    #define GL_POLYGON_MODE 0x0B40
    #define GL_POLYGON_MODE_NV 0x0B40
    #define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
    #define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
    #define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
    #define GL_POLYGON_OFFSET_EXT 0x8037
    #define GL_POLYGON_OFFSET_FACTOR 0x8038
    #define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
    #define GL_POLYGON_OFFSET_FILL 0x8037
    #define GL_POLYGON_OFFSET_LINE 0x2A02
    #define GL_POLYGON_OFFSET_LINE_NV 0x2A02
    #define GL_POLYGON_OFFSET_POINT 0x2A01
    #define GL_POLYGON_OFFSET_POINT_NV 0x2A01
    #define GL_POLYGON_OFFSET_UNITS 0x2A00
    #define GL_POLYGON_SMOOTH 0x0B41
    #define GL_POLYGON_SMOOTH_HINT 0x0C53
    #define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
    #define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
    #define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
    #define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
    #define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
    #define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
    #define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
    #define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
    #define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
    #define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
    #define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
    #define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
    #define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
    #define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
    #define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
    #define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
    #define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
    #define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
    #define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
    #define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
    #define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
    #define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
    #define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
    #define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
    #define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
    #define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
    #define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
    #define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
    #define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
    #define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
    #define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
    #define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
    #define GL_POST_CONVOLUTION_RED_BIAS 0x8020
    #define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
    #define GL_POST_CONVOLUTION_RED_SCALE 0x801C
    #define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
    #define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
    #define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
    #define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
    #define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
    #define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
    #define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
    #define GL_PRESENT_DURATION_NV 0x8E2B
    #define GL_PRESENT_TIME_NV 0x8E2A
    #define GL_PRESERVE_ATI 0x8762
    #define GL_PREVIOUS 0x8578
    #define GL_PREVIOUS_ARB 0x8578
    #define GL_PREVIOUS_EXT 0x8578
    #define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
    #define GL_PRIMARY_COLOR 0x8577
    #define GL_PRIMARY_COLOR_ARB 0x8577
    #define GL_PRIMARY_COLOR_EXT 0x8577
    #define GL_PRIMARY_COLOR_NV 0x852C
    #define GL_PRIMITIVES_GENERATED 0x8C87
    #define GL_PRIMITIVES_GENERATED_EXT 0x8C87
    #define GL_PRIMITIVES_GENERATED_NV 0x8C87
    #define GL_PRIMITIVES_GENERATED_OES 0x8C87
    #define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
    #define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
    #define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
    #define GL_PRIMITIVE_BOUNDING_BOX_EXT 0x92BE
    #define GL_PRIMITIVE_BOUNDING_BOX_OES 0x92BE
    #define GL_PRIMITIVE_ID_NV 0x8C7C
    #define GL_PRIMITIVE_RESTART 0x8F9D
    #define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
    #define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
    #define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
    #define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
    #define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
    #define GL_PRIMITIVE_RESTART_NV 0x8558
    #define GL_PROGRAM 0x82E2
    #define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
    #define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
    #define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
    #define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
    #define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
    #define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
    #define GL_PROGRAM_ATTRIBS_ARB 0x88AC
    #define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
    #define GL_PROGRAM_BINARY_ANGLE 0x93A6
    #define GL_PROGRAM_BINARY_FORMATS 0x87FF
    #define GL_PROGRAM_BINARY_FORMATS_OES 0x87FF
    #define GL_PROGRAM_BINARY_LENGTH 0x8741
    #define GL_PROGRAM_BINARY_LENGTH_OES 0x8741
    #define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
    #define GL_PROGRAM_BINDING_ARB 0x8677
    #define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
    #define GL_PROGRAM_ERROR_POSITION_NV 0x864B
    #define GL_PROGRAM_ERROR_STRING_ARB 0x8874
    #define GL_PROGRAM_ERROR_STRING_NV 0x8874
    #define GL_PROGRAM_FORMAT_ARB 0x8876
    #define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
    #define GL_PROGRAM_INPUT 0x92E3
    #define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
    #define GL_PROGRAM_KHR 0x82E2
    #define GL_PROGRAM_LENGTH_ARB 0x8627
    #define GL_PROGRAM_LENGTH_NV 0x8627
    #define GL_PROGRAM_MATRIX_EXT 0x8E2D
    #define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
    #define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
    #define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
    #define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
    #define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
    #define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
    #define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
    #define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
    #define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
    #define GL_PROGRAM_OBJECT_ARB 0x8B40
    #define GL_PROGRAM_OBJECT_EXT 0x8B40
    #define GL_PROGRAM_OUTPUT 0x92E4
    #define GL_PROGRAM_PARAMETERS_ARB 0x88A8
    #define GL_PROGRAM_PARAMETER_NV 0x8644
    #define GL_PROGRAM_PIPELINE 0x82E4
    #define GL_PROGRAM_PIPELINE_BINDING 0x825A
    #define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
    #define GL_PROGRAM_PIPELINE_KHR 0x82E4
    #define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
    #define GL_PROGRAM_POINT_SIZE 0x8642
    #define GL_PROGRAM_POINT_SIZE_ARB 0x8642
    #define GL_PROGRAM_POINT_SIZE_EXT 0x8642
    #define GL_PROGRAM_RESIDENT_NV 0x8647
    #define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
    #define GL_PROGRAM_SEPARABLE 0x8258
    #define GL_PROGRAM_SEPARABLE_EXT 0x8258
    #define GL_PROGRAM_STRING_ARB 0x8628
    #define GL_PROGRAM_STRING_NV 0x8628
    #define GL_PROGRAM_TARGET_NV 0x8646
    #define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
    #define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
    #define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
    #define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
    #define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
    #define GL_PROVOKING_VERTEX 0x8E4F
    #define GL_PROVOKING_VERTEX_EXT 0x8E4F
    #define GL_PROXY_COLOR_TABLE 0x80D3
    #define GL_PROXY_COLOR_TABLE_SGI 0x80D3
    #define GL_PROXY_HISTOGRAM 0x8025
    #define GL_PROXY_HISTOGRAM_EXT 0x8025
    #define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
    #define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
    #define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
    #define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
    #define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
    #define GL_PROXY_TEXTURE_1D 0x8063
    #define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
    #define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
    #define GL_PROXY_TEXTURE_1D_EXT 0x8063
    #define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
    #define GL_PROXY_TEXTURE_2D 0x8064
    #define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
    #define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
    #define GL_PROXY_TEXTURE_2D_EXT 0x8064
    #define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
    #define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
    #define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
    #define GL_PROXY_TEXTURE_3D 0x8070
    #define GL_PROXY_TEXTURE_3D_EXT 0x8070
    #define GL_PROXY_TEXTURE_4D_SGIS 0x8135
    #define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
    #define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
    #define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
    #define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
    #define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
    #define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
    #define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
    #define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
    #define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
    #define GL_PURGEABLE_APPLE 0x8A1D
    #define GL_PURGED_CONTEXT_RESET_NV 0x92BB
    #define GL_QUADRATIC_CURVE_TO_NV 0x0A
    #define GL_QUADS 0x0007
    #define GL_QUADS_EXT 0x0007
    #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
    #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
    #define GL_QUADS_OES 0x0007
    #define GL_QUAD_ALPHA4_SGIS 0x811E
    #define GL_QUAD_ALPHA8_SGIS 0x811F
    #define GL_QUAD_INTENSITY4_SGIS 0x8122
    #define GL_QUAD_INTENSITY8_SGIS 0x8123
    #define GL_QUAD_LUMINANCE4_SGIS 0x8120
    #define GL_QUAD_LUMINANCE8_SGIS 0x8121
    #define GL_QUAD_MESH_SUN 0x8614
    #define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
    #define GL_QUARTER_BIT_ATI 0x00000010
    #define GL_QUERY 0x82E3
    #define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
    #define GL_QUERY_BUFFER 0x9192
    #define GL_QUERY_BUFFER_AMD 0x9192
    #define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
    #define GL_QUERY_BUFFER_BINDING 0x9193
    #define GL_QUERY_BUFFER_BINDING_AMD 0x9193
    #define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
    #define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
    #define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
    #define GL_QUERY_BY_REGION_WAIT 0x8E15
    #define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
    #define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
    #define GL_QUERY_COUNTER_BITS 0x8864
    #define GL_QUERY_COUNTER_BITS_ARB 0x8864
    #define GL_QUERY_COUNTER_BITS_EXT 0x8864
    #define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
    #define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
    #define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
    #define GL_QUERY_KHR 0x82E3
    #define GL_QUERY_NO_WAIT 0x8E14
    #define GL_QUERY_NO_WAIT_INVERTED 0x8E18
    #define GL_QUERY_NO_WAIT_NV 0x8E14
    #define GL_QUERY_OBJECT_AMD 0x9153
    #define GL_QUERY_OBJECT_EXT 0x9153
    #define GL_QUERY_RESULT 0x8866
    #define GL_QUERY_RESULT_ARB 0x8866
    #define GL_QUERY_RESULT_AVAILABLE 0x8867
    #define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
    #define GL_QUERY_RESULT_AVAILABLE_EXT 0x8867
    #define GL_QUERY_RESULT_EXT 0x8866
    #define GL_QUERY_RESULT_NO_WAIT 0x9194
    #define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
    #define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
    #define GL_QUERY_TARGET 0x82EA
    #define GL_QUERY_WAIT 0x8E13
    #define GL_QUERY_WAIT_INVERTED 0x8E17
    #define GL_QUERY_WAIT_NV 0x8E13
    #define GL_R11F_G11F_B10F 0x8C3A
    #define GL_R11F_G11F_B10F_APPLE 0x8C3A
    #define GL_R11F_G11F_B10F_EXT 0x8C3A
    #define GL_R16 0x822A
    #define GL_R16F 0x822D
    #define GL_R16F_EXT 0x822D
    #define GL_R16I 0x8233
    #define GL_R16UI 0x8234
    #define GL_R16_EXT 0x822A
    #define GL_R16_SNORM 0x8F98
    #define GL_R16_SNORM_EXT 0x8F98
    #define GL_R1UI_C3F_V3F_SUN 0x85C6
    #define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
    #define GL_R1UI_C4UB_V3F_SUN 0x85C5
    #define GL_R1UI_N3F_V3F_SUN 0x85C7
    #define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
    #define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
    #define GL_R1UI_T2F_V3F_SUN 0x85C9
    #define GL_R1UI_V3F_SUN 0x85C4
    #define GL_R32F 0x822E
    #define GL_R32F_EXT 0x822E
    #define GL_R32I 0x8235
    #define GL_R32UI 0x8236
    #define GL_R3_G3_B2 0x2A10
    #define GL_R8 0x8229
    #define GL_R8I 0x8231
    #define GL_R8UI 0x8232
    #define GL_R8_EXT 0x8229
    #define GL_R8_SNORM 0x8F94
    #define GL_RASTERIZER_DISCARD 0x8C89
    #define GL_RASTERIZER_DISCARD_EXT 0x8C89
    #define GL_RASTERIZER_DISCARD_NV 0x8C89
    #define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
    #define GL_RASTER_MULTISAMPLE_EXT 0x9327
    #define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
    #define GL_RASTER_SAMPLES_EXT 0x9328
    #define GL_READ_BUFFER 0x0C02
    #define GL_READ_BUFFER_EXT 0x0C02
    #define GL_READ_BUFFER_NV 0x0C02
    #define GL_READ_FRAMEBUFFER 0x8CA8
    #define GL_READ_FRAMEBUFFER_ANGLE 0x8CA8
    #define GL_READ_FRAMEBUFFER_APPLE 0x8CA8
    #define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
    #define GL_READ_FRAMEBUFFER_BINDING_ANGLE 0x8CAA
    #define GL_READ_FRAMEBUFFER_BINDING_APPLE 0x8CAA
    #define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
    #define GL_READ_FRAMEBUFFER_BINDING_NV 0x8CAA
    #define GL_READ_FRAMEBUFFER_EXT 0x8CA8
    #define GL_READ_FRAMEBUFFER_NV 0x8CA8
    #define GL_READ_ONLY 0x88B8
    #define GL_READ_ONLY_ARB 0x88B8
    #define GL_READ_PIXELS 0x828C
    #define GL_READ_PIXELS_FORMAT 0x828D
    #define GL_READ_PIXELS_TYPE 0x828E
    #define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
    #define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
    #define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
    #define GL_READ_WRITE 0x88BA
    #define GL_READ_WRITE_ARB 0x88BA
    #define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
    #define GL_RECT_NV 0xF6
    #define GL_RED 0x1903
    #define GL_REDUCE 0x8016
    #define GL_REDUCE_EXT 0x8016
    #define GL_RED_BITS 0x0D52
    #define GL_RED_BIT_ATI 0x00000001
    #define GL_RED_EXT 0x1903
    #define GL_RED_INTEGER 0x8D94
    #define GL_RED_INTEGER_EXT 0x8D94
    #define GL_RED_MAX_CLAMP_INGR 0x8564
    #define GL_RED_MIN_CLAMP_INGR 0x8560
    #define GL_RED_NV 0x1903
    #define GL_RED_SNORM 0x8F90
    #define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
    #define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
    #define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
    #define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
    #define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
    #define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
    #define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
    #define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
    #define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
    #define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
    #define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
    #define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
    #define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
    #define GL_REFERENCE_PLANE_SGIX 0x817D
    #define GL_REFLECTION_MAP 0x8512
    #define GL_REFLECTION_MAP_ARB 0x8512
    #define GL_REFLECTION_MAP_EXT 0x8512
    #define GL_REFLECTION_MAP_NV 0x8512
    #define GL_REGISTER_COMBINERS_NV 0x8522
    #define GL_REG_0_ATI 0x8921
    #define GL_REG_10_ATI 0x892B
    #define GL_REG_11_ATI 0x892C
    #define GL_REG_12_ATI 0x892D
    #define GL_REG_13_ATI 0x892E
    #define GL_REG_14_ATI 0x892F
    #define GL_REG_15_ATI 0x8930
    #define GL_REG_16_ATI 0x8931
    #define GL_REG_17_ATI 0x8932
    #define GL_REG_18_ATI 0x8933
    #define GL_REG_19_ATI 0x8934
    #define GL_REG_1_ATI 0x8922
    #define GL_REG_20_ATI 0x8935
    #define GL_REG_21_ATI 0x8936
    #define GL_REG_22_ATI 0x8937
    #define GL_REG_23_ATI 0x8938
    #define GL_REG_24_ATI 0x8939
    #define GL_REG_25_ATI 0x893A
    #define GL_REG_26_ATI 0x893B
    #define GL_REG_27_ATI 0x893C
    #define GL_REG_28_ATI 0x893D
    #define GL_REG_29_ATI 0x893E
    #define GL_REG_2_ATI 0x8923
    #define GL_REG_30_ATI 0x893F
    #define GL_REG_31_ATI 0x8940
    #define GL_REG_3_ATI 0x8924
    #define GL_REG_4_ATI 0x8925
    #define GL_REG_5_ATI 0x8926
    #define GL_REG_6_ATI 0x8927
    #define GL_REG_7_ATI 0x8928
    #define GL_REG_8_ATI 0x8929
    #define GL_REG_9_ATI 0x892A
    #define GL_RELATIVE_ARC_TO_NV 0xFF
    #define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
    #define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
    #define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
    #define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
    #define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
    #define GL_RELATIVE_LINE_TO_NV 0x05
    #define GL_RELATIVE_MOVE_TO_NV 0x03
    #define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
    #define GL_RELATIVE_RECT_NV 0xF7
    #define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
    #define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
    #define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
    #define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
    #define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
    #define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
    #define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
    #define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
    #define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
    #define GL_RELEASED_APPLE 0x8A19
    #define GL_RENDERBUFFER 0x8D41
    #define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
    #define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
    #define GL_RENDERBUFFER_BINDING 0x8CA7
    #define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
    #define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
    #define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
    #define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
    #define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
    #define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
    #define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
    #define GL_RENDERBUFFER_EXT 0x8D41
    #define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
    #define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
    #define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
    #define GL_RENDERBUFFER_HEIGHT 0x8D43
    #define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
    #define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
    #define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
    #define GL_RENDERBUFFER_RED_SIZE 0x8D50
    #define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
    #define GL_RENDERBUFFER_SAMPLES 0x8CAB
    #define GL_RENDERBUFFER_SAMPLES_ANGLE 0x8CAB
    #define GL_RENDERBUFFER_SAMPLES_APPLE 0x8CAB
    #define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
    #define GL_RENDERBUFFER_SAMPLES_IMG 0x9133
    #define GL_RENDERBUFFER_SAMPLES_NV 0x8CAB
    #define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
    #define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
    #define GL_RENDERBUFFER_WIDTH 0x8D42
    #define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
    #define GL_RENDERER 0x1F01
    #define GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM 0x8FB3
    #define GL_RENDER_GPU_MASK_NV 0x9558
    #define GL_REPEAT 0x2901
    #define GL_REPLACE 0x1E01
    #define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
    #define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
    #define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
    #define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
    #define GL_REPLACEMENT_CODE_SUN 0x81D8
    #define GL_REPLACE_EXT 0x8062
    #define GL_REPLACE_MIDDLE_SUN 0x0002
    #define GL_REPLACE_OLDEST_SUN 0x0003
    #define GL_REPLACE_VALUE_AMD 0x874B
    #define GL_REPLICATE_BORDER 0x8153
    #define GL_REPLICATE_BORDER_HP 0x8153
    #define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
    #define GL_RESAMPLE_AVERAGE_OML 0x8988
    #define GL_RESAMPLE_DECIMATE_OML 0x8989
    #define GL_RESAMPLE_DECIMATE_SGIX 0x8430
    #define GL_RESAMPLE_REPLICATE_OML 0x8986
    #define GL_RESAMPLE_REPLICATE_SGIX 0x8433
    #define GL_RESAMPLE_ZERO_FILL_OML 0x8987
    #define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
    #define GL_RESCALE_NORMAL 0x803A
    #define GL_RESCALE_NORMAL_EXT 0x803A
    #define GL_RESET_NOTIFICATION_STRATEGY 0x8256
    #define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
    #define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
    #define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
    #define GL_RESTART_PATH_NV 0xF0
    #define GL_RESTART_SUN 0x0001
    #define GL_RETAINED_APPLE 0x8A1B
    #define GL_RG 0x8227
    #define GL_RG16 0x822C
    #define GL_RG16F 0x822F
    #define GL_RG16F_EXT 0x822F
    #define GL_RG16I 0x8239
    #define GL_RG16UI 0x823A
    #define GL_RG16_EXT 0x822C
    #define GL_RG16_SNORM 0x8F99
    #define GL_RG16_SNORM_EXT 0x8F99
    #define GL_RG32F 0x8230
    #define GL_RG32F_EXT 0x8230
    #define GL_RG32I 0x823B
    #define GL_RG32UI 0x823C
    #define GL_RG8 0x822B
    #define GL_RG8I 0x8237
    #define GL_RG8UI 0x8238
    #define GL_RG8_EXT 0x822B
    #define GL_RG8_SNORM 0x8F95
    #define GL_RGB 0x1907
    #define GL_RGB10 0x8052
    #define GL_RGB10_A2 0x8059
    #define GL_RGB10_A2UI 0x906F
    #define GL_RGB10_A2_EXT 0x8059
    #define GL_RGB10_EXT 0x8052
    #define GL_RGB12 0x8053
    #define GL_RGB12_EXT 0x8053
    #define GL_RGB16 0x8054
    #define GL_RGB16F 0x881B
    #define GL_RGB16F_ARB 0x881B
    #define GL_RGB16F_EXT 0x881B
    #define GL_RGB16I 0x8D89
    #define GL_RGB16I_EXT 0x8D89
    #define GL_RGB16UI 0x8D77
    #define GL_RGB16UI_EXT 0x8D77
    #define GL_RGB16_EXT 0x8054
    #define GL_RGB16_SNORM 0x8F9A
    #define GL_RGB16_SNORM_EXT 0x8F9A
    #define GL_RGB2_EXT 0x804E
    #define GL_RGB32F 0x8815
    #define GL_RGB32F_ARB 0x8815
    #define GL_RGB32F_EXT 0x8815
    #define GL_RGB32I 0x8D83
    #define GL_RGB32I_EXT 0x8D83
    #define GL_RGB32UI 0x8D71
    #define GL_RGB32UI_EXT 0x8D71
    #define GL_RGB4 0x804F
    #define GL_RGB4_EXT 0x804F
    #define GL_RGB4_S3TC 0x83A1
    #define GL_RGB5 0x8050
    #define GL_RGB565 0x8D62
    #define GL_RGB565_OES 0x8D62
    #define GL_RGB5_A1 0x8057
    #define GL_RGB5_A1_EXT 0x8057
    #define GL_RGB5_A1_OES 0x8057
    #define GL_RGB5_EXT 0x8050
    #define GL_RGB8 0x8051
    #define GL_RGB8I 0x8D8F
    #define GL_RGB8I_EXT 0x8D8F
    #define GL_RGB8UI 0x8D7D
    #define GL_RGB8UI_EXT 0x8D7D
    #define GL_RGB8_EXT 0x8051
    #define GL_RGB8_OES 0x8051
    #define GL_RGB8_SNORM 0x8F96
    #define GL_RGB9_E5 0x8C3D
    #define GL_RGB9_E5_APPLE 0x8C3D
    #define GL_RGB9_E5_EXT 0x8C3D
    #define GL_RGBA 0x1908
    #define GL_RGBA12 0x805A
    #define GL_RGBA12_EXT 0x805A
    #define GL_RGBA16 0x805B
    #define GL_RGBA16F 0x881A
    #define GL_RGBA16F_ARB 0x881A
    #define GL_RGBA16F_EXT 0x881A
    #define GL_RGBA16I 0x8D88
    #define GL_RGBA16I_EXT 0x8D88
    #define GL_RGBA16UI 0x8D76
    #define GL_RGBA16UI_EXT 0x8D76
    #define GL_RGBA16_EXT 0x805B
    #define GL_RGBA16_SNORM 0x8F9B
    #define GL_RGBA16_SNORM_EXT 0x8F9B
    #define GL_RGBA2 0x8055
    #define GL_RGBA2_EXT 0x8055
    #define GL_RGBA32F 0x8814
    #define GL_RGBA32F_ARB 0x8814
    #define GL_RGBA32F_EXT 0x8814
    #define GL_RGBA32I 0x8D82
    #define GL_RGBA32I_EXT 0x8D82
    #define GL_RGBA32UI 0x8D70
    #define GL_RGBA32UI_EXT 0x8D70
    #define GL_RGBA4 0x8056
    #define GL_RGBA4_DXT5_S3TC 0x83A5
    #define GL_RGBA4_EXT 0x8056
    #define GL_RGBA4_OES 0x8056
    #define GL_RGBA4_S3TC 0x83A3
    #define GL_RGBA8 0x8058
    #define GL_RGBA8I 0x8D8E
    #define GL_RGBA8I_EXT 0x8D8E
    #define GL_RGBA8UI 0x8D7C
    #define GL_RGBA8UI_EXT 0x8D7C
    #define GL_RGBA8_EXT 0x8058
    #define GL_RGBA8_OES 0x8058
    #define GL_RGBA8_SNORM 0x8F97
    #define GL_RGBA_DXT5_S3TC 0x83A4
    #define GL_RGBA_FLOAT16_APPLE 0x881A
    #define GL_RGBA_FLOAT16_ATI 0x881A
    #define GL_RGBA_FLOAT32_APPLE 0x8814
    #define GL_RGBA_FLOAT32_ATI 0x8814
    #define GL_RGBA_FLOAT_MODE_ARB 0x8820
    #define GL_RGBA_FLOAT_MODE_ATI 0x8820
    #define GL_RGBA_INTEGER 0x8D99
    #define GL_RGBA_INTEGER_EXT 0x8D99
    #define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
    #define GL_RGBA_S3TC 0x83A2
    #define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
    #define GL_RGBA_SNORM 0x8F93
    #define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
    #define GL_RGB_422_APPLE 0x8A1F
    #define GL_RGB_FLOAT16_APPLE 0x881B
    #define GL_RGB_FLOAT16_ATI 0x881B
    #define GL_RGB_FLOAT32_APPLE 0x8815
    #define GL_RGB_FLOAT32_ATI 0x8815
    #define GL_RGB_INTEGER 0x8D98
    #define GL_RGB_INTEGER_EXT 0x8D98
    #define GL_RGB_RAW_422_APPLE 0x8A51
    #define GL_RGB_S3TC 0x83A0
    #define GL_RGB_SCALE 0x8573
    #define GL_RGB_SCALE_ARB 0x8573
    #define GL_RGB_SCALE_EXT 0x8573
    #define GL_RGB_SNORM 0x8F92
    #define GL_RG_EXT 0x8227
    #define GL_RG_INTEGER 0x8228
    #define GL_RG_SNORM 0x8F91
    #define GL_RIGHT 0x0407
    #define GL_ROUNDED_RECT2_NV 0xEA
    #define GL_ROUNDED_RECT4_NV 0xEC
    #define GL_ROUNDED_RECT8_NV 0xEE
    #define GL_ROUNDED_RECT_NV 0xE8
    #define GL_ROUND_NV 0x90A4
    #define GL_SAMPLER 0x82E6
    #define GL_SAMPLER_1D 0x8B5D
    #define GL_SAMPLER_1D_ARB 0x8B5D
    #define GL_SAMPLER_1D_ARRAY 0x8DC0
    #define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
    #define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
    #define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
    #define GL_SAMPLER_1D_SHADOW 0x8B61
    #define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
    #define GL_SAMPLER_2D 0x8B5E
    #define GL_SAMPLER_2D_ARB 0x8B5E
    #define GL_SAMPLER_2D_ARRAY 0x8DC1
    #define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
    #define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
    #define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
    #define GL_SAMPLER_2D_ARRAY_SHADOW_NV 0x8DC4
    #define GL_SAMPLER_2D_MULTISAMPLE 0x9108
    #define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
    #define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
    #define GL_SAMPLER_2D_RECT 0x8B63
    #define GL_SAMPLER_2D_RECT_ARB 0x8B63
    #define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
    #define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
    #define GL_SAMPLER_2D_SHADOW 0x8B62
    #define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
    #define GL_SAMPLER_2D_SHADOW_EXT 0x8B62
    #define GL_SAMPLER_3D 0x8B5F
    #define GL_SAMPLER_3D_ARB 0x8B5F
    #define GL_SAMPLER_3D_OES 0x8B5F
    #define GL_SAMPLER_BINDING 0x8919
    #define GL_SAMPLER_BUFFER 0x8DC2
    #define GL_SAMPLER_BUFFER_AMD 0x9001
    #define GL_SAMPLER_BUFFER_EXT 0x8DC2
    #define GL_SAMPLER_BUFFER_OES 0x8DC2
    #define GL_SAMPLER_CUBE 0x8B60
    #define GL_SAMPLER_CUBE_ARB 0x8B60
    #define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
    #define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
    #define GL_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900C
    #define GL_SAMPLER_CUBE_MAP_ARRAY_OES 0x900C
    #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
    #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
    #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0x900D
    #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0x900D
    #define GL_SAMPLER_CUBE_SHADOW 0x8DC5
    #define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
    #define GL_SAMPLER_CUBE_SHADOW_NV 0x8DC5
    #define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT 0x8BE7
    #define GL_SAMPLER_EXTERNAL_OES 0x8D66
    #define GL_SAMPLER_KHR 0x82E6
    #define GL_SAMPLER_OBJECT_AMD 0x9155
    #define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
    #define GL_SAMPLES 0x80A9
    #define GL_SAMPLES_3DFX 0x86B4
    #define GL_SAMPLES_ARB 0x80A9
    #define GL_SAMPLES_EXT 0x80A9
    #define GL_SAMPLES_PASSED 0x8914
    #define GL_SAMPLES_PASSED_ARB 0x8914
    #define GL_SAMPLES_SGIS 0x80A9
    #define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
    #define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
    #define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
    #define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
    #define GL_SAMPLE_ALPHA_TO_ONE 0x809F
    #define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
    #define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
    #define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
    #define GL_SAMPLE_BUFFERS 0x80A8
    #define GL_SAMPLE_BUFFERS_3DFX 0x86B3
    #define GL_SAMPLE_BUFFERS_ARB 0x80A8
    #define GL_SAMPLE_BUFFERS_EXT 0x80A8
    #define GL_SAMPLE_BUFFERS_SGIS 0x80A8
    #define GL_SAMPLE_COVERAGE 0x80A0
    #define GL_SAMPLE_COVERAGE_ARB 0x80A0
    #define GL_SAMPLE_COVERAGE_INVERT 0x80AB
    #define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
    #define GL_SAMPLE_COVERAGE_VALUE 0x80AA
    #define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
    #define GL_SAMPLE_LOCATION_ARB 0x8E50
    #define GL_SAMPLE_LOCATION_NV 0x8E50
    #define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
    #define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
    #define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
    #define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
    #define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
    #define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
    #define GL_SAMPLE_MASK 0x8E51
    #define GL_SAMPLE_MASK_EXT 0x80A0
    #define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
    #define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
    #define GL_SAMPLE_MASK_NV 0x8E51
    #define GL_SAMPLE_MASK_SGIS 0x80A0
    #define GL_SAMPLE_MASK_VALUE 0x8E52
    #define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
    #define GL_SAMPLE_MASK_VALUE_NV 0x8E52
    #define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
    #define GL_SAMPLE_PATTERN_EXT 0x80AC
    #define GL_SAMPLE_PATTERN_SGIS 0x80AC
    #define GL_SAMPLE_POSITION 0x8E50
    #define GL_SAMPLE_POSITION_NV 0x8E50
    #define GL_SAMPLE_SHADING 0x8C36
    #define GL_SAMPLE_SHADING_ARB 0x8C36
    #define GL_SAMPLE_SHADING_OES 0x8C36
    #define GL_SATURATE_BIT_ATI 0x00000040
    #define GL_SCALAR_EXT 0x87BE
    #define GL_SCALEBIAS_HINT_SGIX 0x8322
    #define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
    #define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
    #define GL_SCALE_BY_FOUR_NV 0x853F
    #define GL_SCALE_BY_ONE_HALF_NV 0x8540
    #define GL_SCALE_BY_TWO_NV 0x853E
    #define GL_SCISSOR_BOX 0x0C10
    #define GL_SCISSOR_COMMAND_NV 0x0011
    #define GL_SCISSOR_TEST 0x0C11
    #define GL_SCREEN 0x9295
    #define GL_SCREEN_COORDINATES_REND 0x8490
    #define GL_SCREEN_KHR 0x9295
    #define GL_SCREEN_NV 0x9295
    #define GL_SECONDARY_COLOR_ARRAY 0x845E
    #define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
    #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
    #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
    #define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
    #define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
    #define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
    #define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
    #define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
    #define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
    #define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
    #define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
    #define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
    #define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
    #define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
    #define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
    #define GL_SECONDARY_COLOR_NV 0x852D
    #define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
    #define GL_SEPARABLE_2D 0x8012
    #define GL_SEPARABLE_2D_EXT 0x8012
    #define GL_SEPARATE_ATTRIBS 0x8C8D
    #define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
    #define GL_SEPARATE_ATTRIBS_NV 0x8C8D
    #define GL_SEPARATE_SPECULAR_COLOR 0x81FA
    #define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
    #define GL_SET 0x150F
    #define GL_SET_AMD 0x874A
    #define GL_SGX_BINARY_IMG 0x8C0A
    #define GL_SGX_PROGRAM_BINARY_IMG 0x9130
    #define GL_SHADER 0x82E1
    #define GL_SHADER_BINARY_DMP 0x9250
    #define GL_SHADER_BINARY_FORMATS 0x8DF8
    #define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
    #define GL_SHADER_BINARY_VIV 0x8FC4
    #define GL_SHADER_COMPILER 0x8DFA
    #define GL_SHADER_CONSISTENT_NV 0x86DD
    #define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
    #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
    #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
    #define GL_SHADER_IMAGE_ATOMIC 0x82A6
    #define GL_SHADER_IMAGE_LOAD 0x82A4
    #define GL_SHADER_IMAGE_STORE 0x82A5
    #define GL_SHADER_INCLUDE_ARB 0x8DAE
    #define GL_SHADER_KHR 0x82E1
    #define GL_SHADER_OBJECT_ARB 0x8B48
    #define GL_SHADER_OBJECT_EXT 0x8B48
    #define GL_SHADER_OPERATION_NV 0x86DF
    #define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0x8F64
    #define GL_SHADER_SOURCE_LENGTH 0x8B88
    #define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
    #define GL_SHADER_STORAGE_BLOCK 0x92E6
    #define GL_SHADER_STORAGE_BUFFER 0x90D2
    #define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
    #define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
    #define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
    #define GL_SHADER_STORAGE_BUFFER_START 0x90D4
    #define GL_SHADER_TYPE 0x8B4F
    #define GL_SHADING_LANGUAGE_VERSION 0x8B8C
    #define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
    #define GL_SHADOW_AMBIENT_SGIX 0x80BF
    #define GL_SHADOW_ATTENUATION_EXT 0x834E
    #define GL_SHARED_EDGE_NV 0xC0
    #define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
    #define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
    #define GL_SHORT 0x1402
    #define GL_SIGNALED 0x9119
    #define GL_SIGNALED_APPLE 0x9119
    #define GL_SIGNED_ALPHA8_NV 0x8706
    #define GL_SIGNED_ALPHA_NV 0x8705
    #define GL_SIGNED_HILO16_NV 0x86FA
    #define GL_SIGNED_HILO8_NV 0x885F
    #define GL_SIGNED_HILO_NV 0x86F9
    #define GL_SIGNED_IDENTITY_NV 0x853C
    #define GL_SIGNED_INTENSITY8_NV 0x8708
    #define GL_SIGNED_INTENSITY_NV 0x8707
    #define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
    #define GL_SIGNED_LUMINANCE8_NV 0x8702
    #define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
    #define GL_SIGNED_LUMINANCE_NV 0x8701
    #define GL_SIGNED_NEGATE_NV 0x853D
    #define GL_SIGNED_NORMALIZED 0x8F9C
    #define GL_SIGNED_RGB8_NV 0x86FF
    #define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
    #define GL_SIGNED_RGBA8_NV 0x86FC
    #define GL_SIGNED_RGBA_NV 0x86FB
    #define GL_SIGNED_RGB_NV 0x86FE
    #define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
    #define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
    #define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
    #define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
    #define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
    #define GL_SINGLE_COLOR 0x81F9
    #define GL_SINGLE_COLOR_EXT 0x81F9
    #define GL_SKIP_COMPONENTS1_NV -6
    #define GL_SKIP_COMPONENTS2_NV -5
    #define GL_SKIP_COMPONENTS3_NV -4
    #define GL_SKIP_COMPONENTS4_NV -3
    #define GL_SKIP_DECODE_EXT 0x8A4A
    #define GL_SKIP_MISSING_GLYPH_NV 0x90A9
    #define GL_SLICE_ACCUM_SUN 0x85CC
    #define GL_SLUMINANCE 0x8C46
    #define GL_SLUMINANCE8 0x8C47
    #define GL_SLUMINANCE8_ALPHA8 0x8C45
    #define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
    #define GL_SLUMINANCE8_ALPHA8_NV 0x8C45
    #define GL_SLUMINANCE8_EXT 0x8C47
    #define GL_SLUMINANCE8_NV 0x8C47
    #define GL_SLUMINANCE_ALPHA 0x8C44
    #define GL_SLUMINANCE_ALPHA_EXT 0x8C44
    #define GL_SLUMINANCE_ALPHA_NV 0x8C44
    #define GL_SLUMINANCE_EXT 0x8C46
    #define GL_SLUMINANCE_NV 0x8C46
    #define GL_SMALL_CCW_ARC_TO_NV 0x12
    #define GL_SMALL_CW_ARC_TO_NV 0x14
    #define GL_SMAPHS30_PROGRAM_BINARY_DMP 0x9251
    #define GL_SMAPHS_PROGRAM_BINARY_DMP 0x9252
    #define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
    #define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
    #define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
    #define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
    #define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
    #define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
    #define GL_SM_COUNT_NV 0x933B
    #define GL_SOFTLIGHT 0x929C
    #define GL_SOFTLIGHT_KHR 0x929C
    #define GL_SOFTLIGHT_NV 0x929C
    #define GL_SOURCE0_ALPHA 0x8588
    #define GL_SOURCE0_ALPHA_ARB 0x8588
    #define GL_SOURCE0_ALPHA_EXT 0x8588
    #define GL_SOURCE0_RGB 0x8580
    #define GL_SOURCE0_RGB_ARB 0x8580
    #define GL_SOURCE0_RGB_EXT 0x8580
    #define GL_SOURCE1_ALPHA 0x8589
    #define GL_SOURCE1_ALPHA_ARB 0x8589
    #define GL_SOURCE1_ALPHA_EXT 0x8589
    #define GL_SOURCE1_RGB 0x8581
    #define GL_SOURCE1_RGB_ARB 0x8581
    #define GL_SOURCE1_RGB_EXT 0x8581
    #define GL_SOURCE2_ALPHA 0x858A
    #define GL_SOURCE2_ALPHA_ARB 0x858A
    #define GL_SOURCE2_ALPHA_EXT 0x858A
    #define GL_SOURCE2_RGB 0x8582
    #define GL_SOURCE2_RGB_ARB 0x8582
    #define GL_SOURCE2_RGB_EXT 0x8582
    #define GL_SOURCE3_ALPHA_NV 0x858B
    #define GL_SOURCE3_RGB_NV 0x8583
    #define GL_SPARE0_NV 0x852E
    #define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
    #define GL_SPARE1_NV 0x852F
    #define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
    #define GL_SPARSE_STORAGE_BIT_ARB 0x0400
    #define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
    #define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0x91A9
    #define GL_SPIR_V_BINARY_ARB 0x9552
    #define GL_SPRITE_AXIAL_SGIX 0x814C
    #define GL_SPRITE_AXIS_SGIX 0x814A
    #define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
    #define GL_SPRITE_MODE_SGIX 0x8149
    #define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
    #define GL_SPRITE_SGIX 0x8148
    #define GL_SPRITE_TRANSLATION_SGIX 0x814B
    #define GL_SQUARE_NV 0x90A3
    #define GL_SR8_EXT 0x8FBD
    #define GL_SRC0_ALPHA 0x8588
    #define GL_SRC0_RGB 0x8580
    #define GL_SRC1_ALPHA 0x8589
    #define GL_SRC1_ALPHA_EXT 0x8589
    #define GL_SRC1_COLOR 0x88F9
    #define GL_SRC1_COLOR_EXT 0x88F9
    #define GL_SRC1_RGB 0x8581
    #define GL_SRC2_ALPHA 0x858A
    #define GL_SRC2_RGB 0x8582
    #define GL_SRC_ALPHA 0x0302
    #define GL_SRC_ALPHA_SATURATE 0x0308
    #define GL_SRC_ALPHA_SATURATE_EXT 0x0308
    #define GL_SRC_ATOP_NV 0x928E
    #define GL_SRC_COLOR 0x0300
    #define GL_SRC_IN_NV 0x928A
    #define GL_SRC_NV 0x9286
    #define GL_SRC_OUT_NV 0x928C
    #define GL_SRC_OVER_NV 0x9288
    #define GL_SRG8_EXT 0x8FBE
    #define GL_SRGB 0x8C40
    #define GL_SRGB8 0x8C41
    #define GL_SRGB8_ALPHA8 0x8C43
    #define GL_SRGB8_ALPHA8_EXT 0x8C43
    #define GL_SRGB8_EXT 0x8C41
    #define GL_SRGB8_NV 0x8C41
    #define GL_SRGB_ALPHA 0x8C42
    #define GL_SRGB_ALPHA_EXT 0x8C42
    #define GL_SRGB_DECODE_ARB 0x8299
    #define GL_SRGB_EXT 0x8C40
    #define GL_SRGB_READ 0x8297
    #define GL_SRGB_WRITE 0x8298
    #define GL_STACK_OVERFLOW 0x0503
    #define GL_STACK_OVERFLOW_KHR 0x0503
    #define GL_STACK_UNDERFLOW 0x0504
    #define GL_STACK_UNDERFLOW_KHR 0x0504
    #define GL_STANDARD_FONT_FORMAT_NV 0x936C
    #define GL_STANDARD_FONT_NAME_NV 0x9072
    #define GL_STATE_RESTORE 0x8BDC
    #define GL_STATIC_ATI 0x8760
    #define GL_STATIC_COPY 0x88E6
    #define GL_STATIC_COPY_ARB 0x88E6
    #define GL_STATIC_DRAW 0x88E4
    #define GL_STATIC_DRAW_ARB 0x88E4
    #define GL_STATIC_READ 0x88E5
    #define GL_STATIC_READ_ARB 0x88E5
    #define GL_STATIC_VERTEX_ARRAY_IBM 103061
    #define GL_STENCIL 0x1802
    #define GL_STENCIL_ATTACHMENT 0x8D20
    #define GL_STENCIL_ATTACHMENT_EXT 0x8D20
    #define GL_STENCIL_BACK_FAIL 0x8801
    #define GL_STENCIL_BACK_FAIL_ATI 0x8801
    #define GL_STENCIL_BACK_FUNC 0x8800
    #define GL_STENCIL_BACK_FUNC_ATI 0x8800
    #define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
    #define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
    #define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
    #define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
    #define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
    #define GL_STENCIL_BACK_REF 0x8CA3
    #define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
    #define GL_STENCIL_BACK_WRITEMASK 0x8CA5
    #define GL_STENCIL_BITS 0x0D57
    #define GL_STENCIL_BUFFER_BIT 0x00000400
    #define GL_STENCIL_BUFFER_BIT0_QCOM 0x00010000
    #define GL_STENCIL_BUFFER_BIT1_QCOM 0x00020000
    #define GL_STENCIL_BUFFER_BIT2_QCOM 0x00040000
    #define GL_STENCIL_BUFFER_BIT3_QCOM 0x00080000
    #define GL_STENCIL_BUFFER_BIT4_QCOM 0x00100000
    #define GL_STENCIL_BUFFER_BIT5_QCOM 0x00200000
    #define GL_STENCIL_BUFFER_BIT6_QCOM 0x00400000
    #define GL_STENCIL_BUFFER_BIT7_QCOM 0x00800000
    #define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
    #define GL_STENCIL_CLEAR_VALUE 0x0B91
    #define GL_STENCIL_COMPONENTS 0x8285
    #define GL_STENCIL_EXT 0x1802
    #define GL_STENCIL_FAIL 0x0B94
    #define GL_STENCIL_FUNC 0x0B92
    #define GL_STENCIL_INDEX 0x1901
    #define GL_STENCIL_INDEX1 0x8D46
    #define GL_STENCIL_INDEX16 0x8D49
    #define GL_STENCIL_INDEX16_EXT 0x8D49
    #define GL_STENCIL_INDEX1_EXT 0x8D46
    #define GL_STENCIL_INDEX1_OES 0x8D46
    #define GL_STENCIL_INDEX4 0x8D47
    #define GL_STENCIL_INDEX4_EXT 0x8D47
    #define GL_STENCIL_INDEX4_OES 0x8D47
    #define GL_STENCIL_INDEX8 0x8D48
    #define GL_STENCIL_INDEX8_EXT 0x8D48
    #define GL_STENCIL_INDEX8_OES 0x8D48
    #define GL_STENCIL_INDEX_OES 0x1901
    #define GL_STENCIL_OP_VALUE_AMD 0x874C
    #define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
    #define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
    #define GL_STENCIL_REF 0x0B97
    #define GL_STENCIL_REF_COMMAND_NV 0x000C
    #define GL_STENCIL_RENDERABLE 0x8288
    #define GL_STENCIL_SAMPLES_NV 0x932E
    #define GL_STENCIL_TAG_BITS_EXT 0x88F2
    #define GL_STENCIL_TEST 0x0B90
    #define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
    #define GL_STENCIL_VALUE_MASK 0x0B93
    #define GL_STENCIL_WRITEMASK 0x0B98
    #define GL_STEREO 0x0C33
    #define GL_STORAGE_CACHED_APPLE 0x85BE
    #define GL_STORAGE_CLIENT_APPLE 0x85B4
    #define GL_STORAGE_PRIVATE_APPLE 0x85BD
    #define GL_STORAGE_SHARED_APPLE 0x85BF
    #define GL_STREAM_COPY 0x88E2
    #define GL_STREAM_COPY_ARB 0x88E2
    #define GL_STREAM_DRAW 0x88E0
    #define GL_STREAM_DRAW_ARB 0x88E0
    #define GL_STREAM_RASTERIZATION_AMD 0x91A0
    #define GL_STREAM_READ 0x88E1
    #define GL_STREAM_READ_ARB 0x88E1
    #define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
    #define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
    #define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
    #define GL_SUBPIXEL_BITS 0x0D50
    #define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
    #define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
    #define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
    #define GL_SUBTRACT 0x84E7
    #define GL_SUBTRACT_ARB 0x84E7
    #define GL_SUB_ATI 0x8965
    #define GL_SUCCESS_NV 0x902F
    #define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
    #define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
    #define GL_SURFACE_MAPPED_NV 0x8700
    #define GL_SURFACE_REGISTERED_NV 0x86FD
    #define GL_SURFACE_STATE_NV 0x86EB
    #define GL_SWIZZLE_STQ_ATI 0x8977
    #define GL_SWIZZLE_STQ_DQ_ATI 0x8979
    #define GL_SWIZZLE_STRQ_ATI 0x897A
    #define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
    #define GL_SWIZZLE_STR_ATI 0x8976
    #define GL_SWIZZLE_STR_DR_ATI 0x8978
    #define GL_SYNC_CL_EVENT_ARB 0x8240
    #define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
    #define GL_SYNC_CONDITION 0x9113
    #define GL_SYNC_CONDITION_APPLE 0x9113
    #define GL_SYNC_FENCE 0x9116
    #define GL_SYNC_FENCE_APPLE 0x9116
    #define GL_SYNC_FLAGS 0x9115
    #define GL_SYNC_FLAGS_APPLE 0x9115
    #define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
    #define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
    #define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
    #define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
    #define GL_SYNC_OBJECT_APPLE 0x8A53
    #define GL_SYNC_STATUS 0x9114
    #define GL_SYNC_STATUS_APPLE 0x9114
    #define GL_SYNC_X11_FENCE_EXT 0x90E1
    #define GL_SYSTEM_FONT_NAME_NV 0x9073
    #define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
    #define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
    #define GL_T2F_IUI_V2F_EXT 0x81B1
    #define GL_T2F_IUI_V3F_EXT 0x81B2
    #define GL_TABLE_TOO_LARGE 0x8031
    #define GL_TABLE_TOO_LARGE_EXT 0x8031
    #define GL_TANGENT_ARRAY_EXT 0x8439
    #define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
    #define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
    #define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
    #define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
    #define GL_TESSELLATION_FACTOR_AMD 0x9005
    #define GL_TESSELLATION_MODE_AMD 0x9004
    #define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
    #define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
    #define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
    #define GL_TESS_CONTROL_PROGRAM_NV 0x891E
    #define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
    #define GL_TESS_CONTROL_SHADER 0x8E88
    #define GL_TESS_CONTROL_SHADER_BIT 0x00000008
    #define GL_TESS_CONTROL_SHADER_BIT_EXT 0x00000008
    #define GL_TESS_CONTROL_SHADER_BIT_OES 0x00000008
    #define GL_TESS_CONTROL_SHADER_EXT 0x8E88
    #define GL_TESS_CONTROL_SHADER_OES 0x8E88
    #define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
    #define GL_TESS_CONTROL_SUBROUTINE 0x92E9
    #define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
    #define GL_TESS_CONTROL_TEXTURE 0x829C
    #define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
    #define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
    #define GL_TESS_EVALUATION_SHADER 0x8E87
    #define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
    #define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
    #define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
    #define GL_TESS_EVALUATION_SHADER_EXT 0x8E87
    #define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
    #define GL_TESS_EVALUATION_SHADER_OES 0x8E87
    #define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
    #define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
    #define GL_TESS_EVALUATION_TEXTURE 0x829D
    #define GL_TESS_GEN_MODE 0x8E76
    #define GL_TESS_GEN_MODE_EXT 0x8E76
    #define GL_TESS_GEN_MODE_OES 0x8E76
    #define GL_TESS_GEN_POINT_MODE 0x8E79
    #define GL_TESS_GEN_POINT_MODE_EXT 0x8E79
    #define GL_TESS_GEN_POINT_MODE_OES 0x8E79
    #define GL_TESS_GEN_SPACING 0x8E77
    #define GL_TESS_GEN_SPACING_EXT 0x8E77
    #define GL_TESS_GEN_SPACING_OES 0x8E77
    #define GL_TESS_GEN_VERTEX_ORDER 0x8E78
    #define GL_TESS_GEN_VERTEX_ORDER_EXT 0x8E78
    #define GL_TESS_GEN_VERTEX_ORDER_OES 0x8E78
    #define GL_TEXCOORD1_BIT_PGI 0x10000000
    #define GL_TEXCOORD2_BIT_PGI 0x20000000
    #define GL_TEXCOORD3_BIT_PGI 0x40000000
    #define GL_TEXCOORD4_BIT_PGI 0x80000000
    #define GL_TEXTURE 0x1702
    #define GL_TEXTURE0 0x84C0
    #define GL_TEXTURE0_ARB 0x84C0
    #define GL_TEXTURE1 0x84C1
    #define GL_TEXTURE10 0x84CA
    #define GL_TEXTURE10_ARB 0x84CA
    #define GL_TEXTURE11 0x84CB
    #define GL_TEXTURE11_ARB 0x84CB
    #define GL_TEXTURE12 0x84CC
    #define GL_TEXTURE12_ARB 0x84CC
    #define GL_TEXTURE13 0x84CD
    #define GL_TEXTURE13_ARB 0x84CD
    #define GL_TEXTURE14 0x84CE
    #define GL_TEXTURE14_ARB 0x84CE
    #define GL_TEXTURE15 0x84CF
    #define GL_TEXTURE15_ARB 0x84CF
    #define GL_TEXTURE16 0x84D0
    #define GL_TEXTURE16_ARB 0x84D0
    #define GL_TEXTURE17 0x84D1
    #define GL_TEXTURE17_ARB 0x84D1
    #define GL_TEXTURE18 0x84D2
    #define GL_TEXTURE18_ARB 0x84D2
    #define GL_TEXTURE19 0x84D3
    #define GL_TEXTURE19_ARB 0x84D3
    #define GL_TEXTURE1_ARB 0x84C1
    #define GL_TEXTURE2 0x84C2
    #define GL_TEXTURE20 0x84D4
    #define GL_TEXTURE20_ARB 0x84D4
    #define GL_TEXTURE21 0x84D5
    #define GL_TEXTURE21_ARB 0x84D5
    #define GL_TEXTURE22 0x84D6
    #define GL_TEXTURE22_ARB 0x84D6
    #define GL_TEXTURE23 0x84D7
    #define GL_TEXTURE23_ARB 0x84D7
    #define GL_TEXTURE24 0x84D8
    #define GL_TEXTURE24_ARB 0x84D8
    #define GL_TEXTURE25 0x84D9
    #define GL_TEXTURE25_ARB 0x84D9
    #define GL_TEXTURE26 0x84DA
    #define GL_TEXTURE26_ARB 0x84DA
    #define GL_TEXTURE27 0x84DB
    #define GL_TEXTURE27_ARB 0x84DB
    #define GL_TEXTURE28 0x84DC
    #define GL_TEXTURE28_ARB 0x84DC
    #define GL_TEXTURE29 0x84DD
    #define GL_TEXTURE29_ARB 0x84DD
    #define GL_TEXTURE2_ARB 0x84C2
    #define GL_TEXTURE3 0x84C3
    #define GL_TEXTURE30 0x84DE
    #define GL_TEXTURE30_ARB 0x84DE
    #define GL_TEXTURE31 0x84DF
    #define GL_TEXTURE31_ARB 0x84DF
    #define GL_TEXTURE3_ARB 0x84C3
    #define GL_TEXTURE4 0x84C4
    #define GL_TEXTURE4_ARB 0x84C4
    #define GL_TEXTURE5 0x84C5
    #define GL_TEXTURE5_ARB 0x84C5
    #define GL_TEXTURE6 0x84C6
    #define GL_TEXTURE6_ARB 0x84C6
    #define GL_TEXTURE7 0x84C7
    #define GL_TEXTURE7_ARB 0x84C7
    #define GL_TEXTURE8 0x84C8
    #define GL_TEXTURE8_ARB 0x84C8
    #define GL_TEXTURE9 0x84C9
    #define GL_TEXTURE9_ARB 0x84C9
    #define GL_TEXTURE_1D 0x0DE0
    #define GL_TEXTURE_1D_ARRAY 0x8C18
    #define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
    #define GL_TEXTURE_1D_BINDING_EXT 0x8068
    #define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
    #define GL_TEXTURE_1D_STACK_MESAX 0x8759
    #define GL_TEXTURE_2D 0x0DE1
    #define GL_TEXTURE_2D_ARRAY 0x8C1A
    #define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
    #define GL_TEXTURE_2D_BINDING_EXT 0x8069
    #define GL_TEXTURE_2D_MULTISAMPLE 0x9100
    #define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
    #define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
    #define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
    #define GL_TEXTURE_2D_STACK_MESAX 0x875A
    #define GL_TEXTURE_3D 0x806F
    #define GL_TEXTURE_3D_BINDING_EXT 0x806A
    #define GL_TEXTURE_3D_EXT 0x806F
    #define GL_TEXTURE_3D_OES 0x806F
    #define GL_TEXTURE_4DSIZE_SGIS 0x8136
    #define GL_TEXTURE_4D_BINDING_SGIS 0x814F
    #define GL_TEXTURE_4D_SGIS 0x8134
    #define GL_TEXTURE_ALPHA_SIZE 0x805F
    #define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
    #define GL_TEXTURE_ALPHA_TYPE 0x8C13
    #define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
    #define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
    #define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0x8F69
    #define GL_TEXTURE_BASE_LEVEL 0x813C
    #define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
    #define GL_TEXTURE_BINDING_1D 0x8068
    #define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
    #define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
    #define GL_TEXTURE_BINDING_2D 0x8069
    #define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
    #define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
    #define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
    #define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
    #define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
    #define GL_TEXTURE_BINDING_3D 0x806A
    #define GL_TEXTURE_BINDING_3D_OES 0x806A
    #define GL_TEXTURE_BINDING_BUFFER 0x8C2C
    #define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
    #define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
    #define GL_TEXTURE_BINDING_BUFFER_OES 0x8C2C
    #define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
    #define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
    #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
    #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
    #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0x900A
    #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0x900A
    #define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
    #define GL_TEXTURE_BINDING_EXTERNAL_OES 0x8D67
    #define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
    #define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
    #define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
    #define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
    #define GL_TEXTURE_BLUE_SIZE 0x805E
    #define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
    #define GL_TEXTURE_BLUE_TYPE 0x8C12
    #define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
    #define GL_TEXTURE_BORDER_COLOR 0x1004
    #define GL_TEXTURE_BORDER_COLOR_EXT 0x1004
    #define GL_TEXTURE_BORDER_COLOR_NV 0x1004
    #define GL_TEXTURE_BORDER_COLOR_OES 0x1004
    #define GL_TEXTURE_BORDER_VALUES_NV 0x871A
    #define GL_TEXTURE_BUFFER 0x8C2A
    #define GL_TEXTURE_BUFFER_ARB 0x8C2A
    #define GL_TEXTURE_BUFFER_BINDING 0x8C2A
    #define GL_TEXTURE_BUFFER_BINDING_EXT 0x8C2A
    #define GL_TEXTURE_BUFFER_BINDING_OES 0x8C2A
    #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
    #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
    #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
    #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
    #define GL_TEXTURE_BUFFER_EXT 0x8C2A
    #define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
    #define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
    #define GL_TEXTURE_BUFFER_OES 0x8C2A
    #define GL_TEXTURE_BUFFER_OFFSET 0x919D
    #define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
    #define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
    #define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
    #define GL_TEXTURE_BUFFER_OFFSET_EXT 0x919D
    #define GL_TEXTURE_BUFFER_OFFSET_OES 0x919D
    #define GL_TEXTURE_BUFFER_SIZE 0x919E
    #define GL_TEXTURE_BUFFER_SIZE_EXT 0x919E
    #define GL_TEXTURE_BUFFER_SIZE_OES 0x919E
    #define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
    #define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
    #define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
    #define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
    #define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
    #define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
    #define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
    #define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
    #define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
    #define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
    #define GL_TEXTURE_COMPARE_FUNC 0x884D
    #define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
    #define GL_TEXTURE_COMPARE_FUNC_EXT 0x884D
    #define GL_TEXTURE_COMPARE_MODE 0x884C
    #define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
    #define GL_TEXTURE_COMPARE_MODE_EXT 0x884C
    #define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
    #define GL_TEXTURE_COMPARE_SGIX 0x819A
    #define GL_TEXTURE_COMPRESSED 0x86A1
    #define GL_TEXTURE_COMPRESSED_ARB 0x86A1
    #define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
    #define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
    #define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
    #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
    #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
    #define GL_TEXTURE_COMPRESSION_HINT 0x84EF
    #define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
    #define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
    #define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
    #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
    #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
    #define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
    #define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
    #define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
    #define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
    #define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
    #define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
    #define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
    #define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
    #define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
    #define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
    #define GL_TEXTURE_COORD_NV 0x8C79
    #define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
    #define GL_TEXTURE_CUBE_MAP 0x8513
    #define GL_TEXTURE_CUBE_MAP_ARB 0x8513
    #define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
    #define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
    #define GL_TEXTURE_CUBE_MAP_ARRAY_EXT 0x9009
    #define GL_TEXTURE_CUBE_MAP_ARRAY_OES 0x9009
    #define GL_TEXTURE_CUBE_MAP_EXT 0x8513
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
    #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
    #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
    #define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
    #define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
    #define GL_TEXTURE_DEFORMATION_SGIX 0x8195
    #define GL_TEXTURE_DEPTH 0x8071
    #define GL_TEXTURE_DEPTH_EXT 0x8071
    #define GL_TEXTURE_DEPTH_QCOM 0x8BD4
    #define GL_TEXTURE_DEPTH_SIZE 0x884A
    #define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
    #define GL_TEXTURE_DEPTH_TYPE 0x8C16
    #define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
    #define GL_TEXTURE_DS_SIZE_NV 0x871D
    #define GL_TEXTURE_DT_SIZE_NV 0x871E
    #define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
    #define GL_TEXTURE_EXTERNAL_OES 0x8D65
    #define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
    #define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
    #define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
    #define GL_TEXTURE_FILTER_CONTROL 0x8500
    #define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
    #define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
    #define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
    #define GL_TEXTURE_FORMAT_QCOM 0x8BD6
    #define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
    #define GL_TEXTURE_GATHER 0x82A2
    #define GL_TEXTURE_GATHER_SHADOW 0x82A3
    #define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
    #define GL_TEXTURE_GREEN_SIZE 0x805D
    #define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
    #define GL_TEXTURE_GREEN_TYPE 0x8C11
    #define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
    #define GL_TEXTURE_HEIGHT 0x1001
    #define GL_TEXTURE_HEIGHT_QCOM 0x8BD3
    #define GL_TEXTURE_HI_SIZE_NV 0x871B
    #define GL_TEXTURE_IMAGE_FORMAT 0x828F
    #define GL_TEXTURE_IMAGE_TYPE 0x8290
    #define GL_TEXTURE_IMAGE_VALID_QCOM 0x8BD8
    #define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
    #define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
    #define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
    #define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
    #define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
    #define GL_TEXTURE_INTENSITY_TYPE 0x8C15
    #define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
    #define GL_TEXTURE_INTERNAL_FORMAT 0x1003
    #define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0x8BD5
    #define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
    #define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
    #define GL_TEXTURE_LIGHT_EXT 0x8350
    #define GL_TEXTURE_LOD_BIAS 0x8501
    #define GL_TEXTURE_LOD_BIAS_EXT 0x8501
    #define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
    #define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
    #define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
    #define GL_TEXTURE_LO_SIZE_NV 0x871C
    #define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
    #define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
    #define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
    #define GL_TEXTURE_MAG_FILTER 0x2800
    #define GL_TEXTURE_MAG_SIZE_NV 0x871F
    #define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
    #define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
    #define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
    #define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
    #define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
    #define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
    #define GL_TEXTURE_MAX_LEVEL 0x813D
    #define GL_TEXTURE_MAX_LEVEL_APPLE 0x813D
    #define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
    #define GL_TEXTURE_MAX_LOD 0x813B
    #define GL_TEXTURE_MAX_LOD_SGIS 0x813B
    #define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
    #define GL_TEXTURE_MIN_FILTER 0x2801
    #define GL_TEXTURE_MIN_LOD 0x813A
    #define GL_TEXTURE_MIN_LOD_SGIS 0x813A
    #define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
    #define GL_TEXTURE_NORMAL_EXT 0x85AF
    #define GL_TEXTURE_NUM_LEVELS_QCOM 0x8BD9
    #define GL_TEXTURE_OBJECT_VALID_QCOM 0x8BDB
    #define GL_TEXTURE_POST_SPECULAR_HP 0x8168
    #define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
    #define GL_TEXTURE_PRIORITY_EXT 0x8066
    #define GL_TEXTURE_PROTECTED_EXT 0x8BFA
    #define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
    #define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
    #define GL_TEXTURE_RECTANGLE 0x84F5
    #define GL_TEXTURE_RECTANGLE_ARB 0x84F5
    #define GL_TEXTURE_RECTANGLE_NV 0x84F5
    #define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
    #define GL_TEXTURE_RED_SIZE 0x805C
    #define GL_TEXTURE_RED_SIZE_EXT 0x805C
    #define GL_TEXTURE_RED_TYPE 0x8C10
    #define GL_TEXTURE_RED_TYPE_ARB 0x8C10
    #define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
    #define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
    #define GL_TEXTURE_RESIDENT_EXT 0x8067
    #define GL_TEXTURE_SAMPLES 0x9106
    #define GL_TEXTURE_SAMPLES_IMG 0x9136
    #define GL_TEXTURE_SHADER_NV 0x86DE
    #define GL_TEXTURE_SHADOW 0x82A1
    #define GL_TEXTURE_SHARED_SIZE 0x8C3F
    #define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
    #define GL_TEXTURE_SPARSE_ARB 0x91A6
    #define GL_TEXTURE_SPARSE_EXT 0x91A6
    #define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
    #define GL_TEXTURE_STENCIL_SIZE 0x88F1
    #define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
    #define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
    #define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
    #define GL_TEXTURE_SWIZZLE_A 0x8E45
    #define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
    #define GL_TEXTURE_SWIZZLE_B 0x8E44
    #define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
    #define GL_TEXTURE_SWIZZLE_G 0x8E43
    #define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
    #define GL_TEXTURE_SWIZZLE_R 0x8E42
    #define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
    #define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
    #define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
    #define GL_TEXTURE_TARGET 0x1006
    #define GL_TEXTURE_TARGET_QCOM 0x8BDA
    #define GL_TEXTURE_TILING_EXT 0x9580
    #define GL_TEXTURE_TOO_LARGE_EXT 0x8065
    #define GL_TEXTURE_TYPE_QCOM 0x8BD7
    #define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
    #define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
    #define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
    #define GL_TEXTURE_USAGE_ANGLE 0x93A2
    #define GL_TEXTURE_VIEW 0x82B5
    #define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
    #define GL_TEXTURE_VIEW_MIN_LAYER_EXT 0x82DD
    #define GL_TEXTURE_VIEW_MIN_LAYER_OES 0x82DD
    #define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
    #define GL_TEXTURE_VIEW_MIN_LEVEL_EXT 0x82DB
    #define GL_TEXTURE_VIEW_MIN_LEVEL_OES 0x82DB
    #define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
    #define GL_TEXTURE_VIEW_NUM_LAYERS_EXT 0x82DE
    #define GL_TEXTURE_VIEW_NUM_LAYERS_OES 0x82DE
    #define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
    #define GL_TEXTURE_VIEW_NUM_LEVELS_EXT 0x82DC
    #define GL_TEXTURE_VIEW_NUM_LEVELS_OES 0x82DC
    #define GL_TEXTURE_WIDTH 0x1000
    #define GL_TEXTURE_WIDTH_QCOM 0x8BD2
    #define GL_TEXTURE_WRAP_Q_SGIS 0x8137
    #define GL_TEXTURE_WRAP_R 0x8072
    #define GL_TEXTURE_WRAP_R_EXT 0x8072
    #define GL_TEXTURE_WRAP_R_OES 0x8072
    #define GL_TEXTURE_WRAP_S 0x2802
    #define GL_TEXTURE_WRAP_T 0x2803
    #define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
    #define GL_TILING_TYPES_EXT 0x9583
    #define GL_TIMEOUT_EXPIRED 0x911B
    #define GL_TIMEOUT_EXPIRED_APPLE 0x911B
    #define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
    #define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFFull
    #define GL_TIMESTAMP 0x8E28
    #define GL_TIMESTAMP_EXT 0x8E28
    #define GL_TIME_ELAPSED 0x88BF
    #define GL_TIME_ELAPSED_EXT 0x88BF
    #define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
    #define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
    #define GL_TRACK_MATRIX_NV 0x8648
    #define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
    #define GL_TRANSFORM_FEEDBACK 0x8E22
    #define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
    #define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
    #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
    #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
    #define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
    #define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
    #define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
    #define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
    #define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
    #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
    #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
    #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
    #define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
    #define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
    #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
    #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
    #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
    #define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
    #define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
    #define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
    #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
    #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
    #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
    #define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
    #define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
    #define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
    #define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
    #define GL_TRANSFORM_FEEDBACK_NV 0x8E22
    #define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
    #define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
    #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
    #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
    #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
    #define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
    #define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
    #define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
    #define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
    #define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
    #define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
    #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
    #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
    #define GL_TRANSFORM_HINT_APPLE 0x85B1
    #define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0x93A0
    #define GL_TRANSLATE_2D_NV 0x9090
    #define GL_TRANSLATE_3D_NV 0x9091
    #define GL_TRANSLATE_X_NV 0x908E
    #define GL_TRANSLATE_Y_NV 0x908F
    #define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
    #define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
    #define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
    #define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
    #define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
    #define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
    #define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
    #define GL_TRANSPOSE_NV 0x862C
    #define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
    #define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
    #define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
    #define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
    #define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
    #define GL_TRIANGLES 0x0004
    #define GL_TRIANGLES_ADJACENCY 0x000C
    #define GL_TRIANGLES_ADJACENCY_ARB 0x000C
    #define GL_TRIANGLES_ADJACENCY_EXT 0x000C
    #define GL_TRIANGLES_ADJACENCY_OES 0x000C
    #define GL_TRIANGLE_FAN 0x0006
    #define GL_TRIANGLE_LIST_SUN 0x81D7
    #define GL_TRIANGLE_MESH_SUN 0x8615
    #define GL_TRIANGLE_STRIP 0x0005
    #define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
    #define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
    #define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
    #define GL_TRIANGLE_STRIP_ADJACENCY_OES 0x000D
    #define GL_TRIANGULAR_NV 0x90A5
    #define GL_TRUE 1
    #define GL_TYPE 0x92FA
    #define GL_UNCORRELATED_NV 0x9282
    #define GL_UNDEFINED_APPLE 0x8A1C
    #define GL_UNDEFINED_VERTEX 0x8260
    #define GL_UNDEFINED_VERTEX_EXT 0x8260
    #define GL_UNDEFINED_VERTEX_OES 0x8260
    #define GL_UNIFORM 0x92E1
    #define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
    #define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
    #define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
    #define GL_UNIFORM_BARRIER_BIT 0x00000004
    #define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
    #define GL_UNIFORM_BLOCK 0x92E2
    #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
    #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
    #define GL_UNIFORM_BLOCK_BINDING 0x8A3F
    #define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
    #define GL_UNIFORM_BLOCK_INDEX 0x8A3A
    #define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
    #define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
    #define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
    #define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
    #define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
    #define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
    #define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
    #define GL_UNIFORM_BUFFER 0x8A11
    #define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
    #define GL_UNIFORM_BUFFER_BINDING 0x8A28
    #define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
    #define GL_UNIFORM_BUFFER_EXT 0x8DEE
    #define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
    #define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
    #define GL_UNIFORM_BUFFER_SIZE 0x8A2A
    #define GL_UNIFORM_BUFFER_START 0x8A29
    #define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
    #define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
    #define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
    #define GL_UNIFORM_NAME_LENGTH 0x8A39
    #define GL_UNIFORM_OFFSET 0x8A3B
    #define GL_UNIFORM_SIZE 0x8A38
    #define GL_UNIFORM_TYPE 0x8A37
    #define GL_UNKNOWN_CONTEXT_RESET 0x8255
    #define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
    #define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
    #define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
    #define GL_UNPACK_ALIGNMENT 0x0CF5
    #define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
    #define GL_UNPACK_CMYK_HINT_EXT 0x800F
    #define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
    #define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
    #define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
    #define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
    #define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
    #define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
    #define GL_UNPACK_IMAGE_HEIGHT 0x806E
    #define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
    #define GL_UNPACK_LSB_FIRST 0x0CF1
    #define GL_UNPACK_RESAMPLE_OML 0x8985
    #define GL_UNPACK_RESAMPLE_SGIX 0x842F
    #define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
    #define GL_UNPACK_ROW_LENGTH 0x0CF2
    #define GL_UNPACK_ROW_LENGTH_EXT 0x0CF2
    #define GL_UNPACK_SKIP_IMAGES 0x806D
    #define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
    #define GL_UNPACK_SKIP_PIXELS 0x0CF4
    #define GL_UNPACK_SKIP_PIXELS_EXT 0x0CF4
    #define GL_UNPACK_SKIP_ROWS 0x0CF3
    #define GL_UNPACK_SKIP_ROWS_EXT 0x0CF3
    #define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
    #define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
    #define GL_UNPACK_SWAP_BYTES 0x0CF0
    #define GL_UNSIGNALED 0x9118
    #define GL_UNSIGNALED_APPLE 0x9118
    #define GL_UNSIGNED_BYTE 0x1401
    #define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
    #define GL_UNSIGNED_BYTE_3_3_2 0x8032
    #define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
    #define GL_UNSIGNED_IDENTITY_NV 0x8536
    #define GL_UNSIGNED_INT 0x1405
    #define GL_UNSIGNED_INT16_NV 0x8FF0
    #define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
    #define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
    #define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
    #define GL_UNSIGNED_INT64_AMD 0x8BC2
    #define GL_UNSIGNED_INT64_ARB 0x140F
    #define GL_UNSIGNED_INT64_NV 0x140F
    #define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
    #define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
    #define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
    #define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
    #define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
    #define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
    #define GL_UNSIGNED_INT8_NV 0x8FEC
    #define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
    #define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
    #define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
    #define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
    #define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE 0x8C3B
    #define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
    #define GL_UNSIGNED_INT_10_10_10_2 0x8036
    #define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
    #define GL_UNSIGNED_INT_10_10_10_2_OES 0x8DF6
    #define GL_UNSIGNED_INT_24_8 0x84FA
    #define GL_UNSIGNED_INT_24_8_EXT 0x84FA
    #define GL_UNSIGNED_INT_24_8_NV 0x84FA
    #define GL_UNSIGNED_INT_24_8_OES 0x84FA
    #define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
    #define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0x8368
    #define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
    #define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE 0x8C3E
    #define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
    #define GL_UNSIGNED_INT_8_8_8_8 0x8035
    #define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
    #define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
    #define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
    #define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
    #define GL_UNSIGNED_INT_IMAGE_1D 0x9062
    #define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
    #define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
    #define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
    #define GL_UNSIGNED_INT_IMAGE_2D 0x9063
    #define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
    #define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
    #define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
    #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
    #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
    #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
    #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
    #define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
    #define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
    #define GL_UNSIGNED_INT_IMAGE_3D 0x9064
    #define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
    #define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
    #define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
    #define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0x9067
    #define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
    #define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
    #define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
    #define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
    #define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x906A
    #define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
    #define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
    #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
    #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
    #define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
    #define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
    #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
    #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
    #define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
    #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
    #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
    #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
    #define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
    #define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
    #define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
    #define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
    #define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
    #define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
    #define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
    #define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
    #define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
    #define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
    #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
    #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
    #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900F
    #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900F
    #define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
    #define GL_UNSIGNED_INT_VEC2 0x8DC6
    #define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
    #define GL_UNSIGNED_INT_VEC3 0x8DC7
    #define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
    #define GL_UNSIGNED_INT_VEC4 0x8DC8
    #define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
    #define GL_UNSIGNED_INVERT_NV 0x8537
    #define GL_UNSIGNED_NORMALIZED 0x8C17
    #define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
    #define GL_UNSIGNED_NORMALIZED_EXT 0x8C17
    #define GL_UNSIGNED_SHORT 0x1403
    #define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
    #define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
    #define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
    #define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
    #define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
    #define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
    #define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0x8365
    #define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
    #define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
    #define GL_UNSIGNED_SHORT_5_6_5 0x8363
    #define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
    #define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
    #define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
    #define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
    #define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
    #define GL_UPPER_LEFT 0x8CA2
    #define GL_USE_MISSING_GLYPH_NV 0x90AA
    #define GL_UTF16_NV 0x909B
    #define GL_UTF8_NV 0x909A
    #define GL_UUID_SIZE_EXT 16
    #define GL_VALIDATE_STATUS 0x8B83
    #define GL_VARIABLE_A_NV 0x8523
    #define GL_VARIABLE_B_NV 0x8524
    #define GL_VARIABLE_C_NV 0x8525
    #define GL_VARIABLE_D_NV 0x8526
    #define GL_VARIABLE_E_NV 0x8527
    #define GL_VARIABLE_F_NV 0x8528
    #define GL_VARIABLE_G_NV 0x8529
    #define GL_VARIANT_ARRAY_EXT 0x87E8
    #define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
    #define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
    #define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
    #define GL_VARIANT_DATATYPE_EXT 0x87E5
    #define GL_VARIANT_EXT 0x87C1
    #define GL_VARIANT_VALUE_EXT 0x87E4
    #define GL_VBO_FREE_MEMORY_ATI 0x87FB
    #define GL_VECTOR_EXT 0x87BF
    #define GL_VENDOR 0x1F00
    #define GL_VERSION 0x1F02
    #define GL_VERTEX23_BIT_PGI 0x00000004
    #define GL_VERTEX4_BIT_PGI 0x00000008
    #define GL_VERTEX_ARRAY 0x8074
    #define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
    #define GL_VERTEX_ARRAY_BINDING 0x85B5
    #define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
    #define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
    #define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
    #define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
    #define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
    #define GL_VERTEX_ARRAY_EXT 0x8074
    #define GL_VERTEX_ARRAY_KHR 0x8074
    #define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
    #define GL_VERTEX_ARRAY_LIST_IBM 103070
    #define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
    #define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
    #define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
    #define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
    #define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
    #define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
    #define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
    #define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
    #define GL_VERTEX_ARRAY_RANGE_NV 0x851D
    #define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
    #define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
    #define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
    #define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
    #define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
    #define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
    #define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
    #define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
    #define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
    #define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
    #define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
    #define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
    #define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
    #define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
    #define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
    #define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
    #define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
    #define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
    #define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
    #define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
    #define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
    #define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
    #define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
    #define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
    #define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
    #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
    #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
    #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
    #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
    #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
    #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0x88FE
    #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
    #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
    #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0x88FE
    #define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
    #define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
    #define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
    #define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
    #define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
    #define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
    #define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
    #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
    #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
    #define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
    #define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
    #define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
    #define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
    #define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
    #define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
    #define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
    #define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
    #define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
    #define GL_VERTEX_ATTRIB_BINDING 0x82D4
    #define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
    #define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
    #define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
    #define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
    #define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
    #define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
    #define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
    #define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
    #define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
    #define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
    #define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
    #define GL_VERTEX_BINDING_BUFFER 0x8F4F
    #define GL_VERTEX_BINDING_DIVISOR 0x82D6
    #define GL_VERTEX_BINDING_OFFSET 0x82D7
    #define GL_VERTEX_BINDING_STRIDE 0x82D8
    #define GL_VERTEX_BLEND_ARB 0x86A7
    #define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
    #define GL_VERTEX_DATA_HINT_PGI 0x1A22A
    #define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
    #define GL_VERTEX_ID_NV 0x8C7B
    #define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
    #define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
    #define GL_VERTEX_PRECLIP_SGIX 0x83EE
    #define GL_VERTEX_PROGRAM_ARB 0x8620
    #define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
    #define GL_VERTEX_PROGRAM_NV 0x8620
    #define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
    #define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
    #define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
    #define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
    #define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
    #define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
    #define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
    #define GL_VERTEX_SHADER 0x8B31
    #define GL_VERTEX_SHADER_ARB 0x8B31
    #define GL_VERTEX_SHADER_BINDING_EXT 0x8781
    #define GL_VERTEX_SHADER_BIT 0x00000001
    #define GL_VERTEX_SHADER_BIT_EXT 0x00000001
    #define GL_VERTEX_SHADER_EXT 0x8780
    #define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
    #define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
    #define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
    #define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
    #define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
    #define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
    #define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
    #define GL_VERTEX_SOURCE_ATI 0x8774
    #define GL_VERTEX_STATE_PROGRAM_NV 0x8621
    #define GL_VERTEX_STREAM0_ATI 0x876C
    #define GL_VERTEX_STREAM1_ATI 0x876D
    #define GL_VERTEX_STREAM2_ATI 0x876E
    #define GL_VERTEX_STREAM3_ATI 0x876F
    #define GL_VERTEX_STREAM4_ATI 0x8770
    #define GL_VERTEX_STREAM5_ATI 0x8771
    #define GL_VERTEX_STREAM6_ATI 0x8772
    #define GL_VERTEX_STREAM7_ATI 0x8773
    #define GL_VERTEX_SUBROUTINE 0x92E8
    #define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
    #define GL_VERTEX_TEXTURE 0x829B
    #define GL_VERTEX_WEIGHTING_EXT 0x8509
    #define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
    #define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
    #define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
    #define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
    #define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
    #define GL_VERTICAL_LINE_TO_NV 0x08
    #define GL_VERTICES_SUBMITTED_ARB 0x82EE
    #define GL_VIBRANCE_BIAS_NV 0x8719
    #define GL_VIBRANCE_SCALE_NV 0x8713
    #define GL_VIDEO_BUFFER_BINDING_NV 0x9021
    #define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
    #define GL_VIDEO_BUFFER_NV 0x9020
    #define GL_VIDEO_BUFFER_PITCH_NV 0x9028
    #define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
    #define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
    #define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
    #define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
    #define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
    #define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
    #define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
    #define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
    #define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
    #define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
    #define GL_VIEWPORT 0x0BA2
    #define GL_VIEWPORT_BOUNDS_RANGE 0x825D
    #define GL_VIEWPORT_BOUNDS_RANGE_NV 0x825D
    #define GL_VIEWPORT_BOUNDS_RANGE_OES 0x825D
    #define GL_VIEWPORT_COMMAND_NV 0x0010
    #define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
    #define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0x825F
    #define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
    #define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
    #define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
    #define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
    #define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
    #define GL_VIEWPORT_SUBPIXEL_BITS_NV 0x825C
    #define GL_VIEWPORT_SUBPIXEL_BITS_OES 0x825C
    #define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
    #define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
    #define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
    #define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
    #define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
    #define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
    #define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
    #define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
    #define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
    #define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
    #define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
    #define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
    #define GL_VIEW_CLASS_128_BITS 0x82C4
    #define GL_VIEW_CLASS_16_BITS 0x82CA
    #define GL_VIEW_CLASS_24_BITS 0x82C9
    #define GL_VIEW_CLASS_32_BITS 0x82C8
    #define GL_VIEW_CLASS_48_BITS 0x82C7
    #define GL_VIEW_CLASS_64_BITS 0x82C6
    #define GL_VIEW_CLASS_8_BITS 0x82CB
    #define GL_VIEW_CLASS_96_BITS 0x82C5
    #define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
    #define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
    #define GL_VIEW_CLASS_RGTC1_RED 0x82D0
    #define GL_VIEW_CLASS_RGTC2_RG 0x82D1
    #define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
    #define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
    #define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
    #define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
    #define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
    #define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
    #define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT 0x91A7
    #define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
    #define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
    #define GL_VIRTUAL_PAGE_SIZE_X_EXT 0x9195
    #define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
    #define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
    #define GL_VIRTUAL_PAGE_SIZE_Y_EXT 0x9196
    #define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
    #define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
    #define GL_VIRTUAL_PAGE_SIZE_Z_EXT 0x9197
    #define GL_VIVIDLIGHT_NV 0x92A6
    #define GL_VOLATILE_APPLE 0x8A1A
    #define GL_WAIT_FAILED 0x911D
    #define GL_WAIT_FAILED_APPLE 0x911D
    #define GL_WARPS_PER_SM_NV 0x933A
    #define GL_WARP_SIZE_NV 0x9339
    #define GL_WEIGHTED_AVERAGE_ARB 0x9367
    #define GL_WEIGHT_ARRAY_ARB 0x86AD
    #define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
    #define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
    #define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
    #define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
    #define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
    #define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
    #define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
    #define GL_WIDE_LINE_HINT_PGI 0x1A222
    #define GL_WINDOW_RECTANGLE_EXT 0x8F12
    #define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
    #define GL_WRAP_BORDER_SUN 0x81D4
    #define GL_WRITEONLY_RENDERING_QCOM 0x8823
    #define GL_WRITE_DISCARD_NV 0x88BE
    #define GL_WRITE_ONLY 0x88B9
    #define GL_WRITE_ONLY_ARB 0x88B9
    #define GL_WRITE_ONLY_OES 0x88B9
    #define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
    #define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
    #define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
    #define GL_W_EXT 0x87D8
    #define GL_XOR 0x1506
    #define GL_XOR_NV 0x1506
    #define GL_X_EXT 0x87D5
    #define GL_YCBAYCR8A_4224_NV 0x9032
    #define GL_YCBCR_422_APPLE 0x85B9
    #define GL_YCBCR_MESA 0x8757
    #define GL_YCBYCR8_422_NV 0x9031
    #define GL_YCRCBA_SGIX 0x8319
    #define GL_YCRCB_422_SGIX 0x81BB
    #define GL_YCRCB_444_SGIX 0x81BC
    #define GL_YCRCB_SGIX 0x8318
    #define GL_Y_EXT 0x87D6
    #define GL_Z400_BINARY_AMD 0x8740
    #define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
    #define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
    #define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
    #define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
    #define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
    #define GL_ZERO 0
    #define GL_ZERO_EXT 0x87DD
    #define GL_ZERO_TO_ONE 0x935F
    #define GL_Z_EXT 0x87D7

    /* Version IDs */
    #define GL_ES_VERSION_2_0 1
    #define GL_ES_VERSION_3_0 2
    #define GL_ES_VERSION_3_1 3
    #define GL_ES_VERSION_3_2 4
    #define GL_VERSION_1_0 5
    #define GL_VERSION_1_1 6
    #define GL_VERSION_1_2 7
    #define GL_VERSION_1_3 8
    #define GL_VERSION_1_4 9
    #define GL_VERSION_1_5 10
    #define GL_VERSION_2_0 11
    #define GL_VERSION_2_1 12
    #define GL_VERSION_3_0 13
    #define GL_VERSION_3_1 14
    #define GL_VERSION_3_2 15
    #define GL_VERSION_3_3 16
    #define GL_VERSION_4_0 17
    #define GL_VERSION_4_1 18
    #define GL_VERSION_4_2 19
    #define GL_VERSION_4_3 20
    #define GL_VERSION_4_4 21
    #define GL_VERSION_4_5 22

    /* Extension IDs */
    #undef GL_3DFX_multisample
    #define GL_3DFX_multisample 23
    #undef GL_3DFX_tbuffer
    #define GL_3DFX_tbuffer 24
    #undef GL_3DFX_texture_compression_FXT1
    #define GL_3DFX_texture_compression_FXT1 25
    #undef GL_AMD_blend_minmax_factor
    #define GL_AMD_blend_minmax_factor 26
    #undef GL_AMD_compressed_3DC_texture
    #define GL_AMD_compressed_3DC_texture 27
    #undef GL_AMD_compressed_ATC_texture
    #define GL_AMD_compressed_ATC_texture 28
    #undef GL_AMD_conservative_depth
    #define GL_AMD_conservative_depth 29
    #undef GL_AMD_debug_output
    #define GL_AMD_debug_output 30
    #undef GL_AMD_depth_clamp_separate
    #define GL_AMD_depth_clamp_separate 31
    #undef GL_AMD_draw_buffers_blend
    #define GL_AMD_draw_buffers_blend 32
    #undef GL_AMD_framebuffer_sample_positions
    #define GL_AMD_framebuffer_sample_positions 33
    #undef GL_AMD_gcn_shader
    #define GL_AMD_gcn_shader 34
    #undef GL_AMD_gpu_shader_half_float
    #define GL_AMD_gpu_shader_half_float 35
    #undef GL_AMD_gpu_shader_int16
    #define GL_AMD_gpu_shader_int16 36
    #undef GL_AMD_gpu_shader_int64
    #define GL_AMD_gpu_shader_int64 37
    #undef GL_AMD_interleaved_elements
    #define GL_AMD_interleaved_elements 38
    #undef GL_AMD_multi_draw_indirect
    #define GL_AMD_multi_draw_indirect 39
    #undef GL_AMD_name_gen_delete
    #define GL_AMD_name_gen_delete 40
    #undef GL_AMD_occlusion_query_event
    #define GL_AMD_occlusion_query_event 41
    #undef GL_AMD_performance_monitor
    #define GL_AMD_performance_monitor 42
    #undef GL_AMD_pinned_memory
    #define GL_AMD_pinned_memory 43
    #undef GL_AMD_program_binary_Z400
    #define GL_AMD_program_binary_Z400 44
    #undef GL_AMD_query_buffer_object
    #define GL_AMD_query_buffer_object 45
    #undef GL_AMD_sample_positions
    #define GL_AMD_sample_positions 46
    #undef GL_AMD_seamless_cubemap_per_texture
    #define GL_AMD_seamless_cubemap_per_texture 47
    #undef GL_AMD_shader_atomic_counter_ops
    #define GL_AMD_shader_atomic_counter_ops 48
    #undef GL_AMD_shader_ballot
    #define GL_AMD_shader_ballot 49
    #undef GL_AMD_shader_explicit_vertex_parameter
    #define GL_AMD_shader_explicit_vertex_parameter 50
    #undef GL_AMD_shader_stencil_export
    #define GL_AMD_shader_stencil_export 51
    #undef GL_AMD_shader_trinary_minmax
    #define GL_AMD_shader_trinary_minmax 52
    #undef GL_AMD_sparse_texture
    #define GL_AMD_sparse_texture 53
    #undef GL_AMD_stencil_operation_extended
    #define GL_AMD_stencil_operation_extended 54
    #undef GL_AMD_texture_gather_bias_lod
    #define GL_AMD_texture_gather_bias_lod 55
    #undef GL_AMD_texture_texture4
    #define GL_AMD_texture_texture4 56
    #undef GL_AMD_transform_feedback3_lines_triangles
    #define GL_AMD_transform_feedback3_lines_triangles 57
    #undef GL_AMD_transform_feedback4
    #define GL_AMD_transform_feedback4 58
    #undef GL_AMD_vertex_shader_layer
    #define GL_AMD_vertex_shader_layer 59
    #undef GL_AMD_vertex_shader_tessellator
    #define GL_AMD_vertex_shader_tessellator 60
    #undef GL_AMD_vertex_shader_viewport_index
    #define GL_AMD_vertex_shader_viewport_index 61
    #undef GL_ANDROID_extension_pack_es31a
    #define GL_ANDROID_extension_pack_es31a 62
    #undef GL_ANGLE_depth_texture
    #define GL_ANGLE_depth_texture 63
    #undef GL_ANGLE_framebuffer_blit
    #define GL_ANGLE_framebuffer_blit 64
    #undef GL_ANGLE_framebuffer_multisample
    #define GL_ANGLE_framebuffer_multisample 65
    #undef GL_ANGLE_instanced_arrays
    #define GL_ANGLE_instanced_arrays 66
    #undef GL_ANGLE_pack_reverse_row_order
    #define GL_ANGLE_pack_reverse_row_order 67
    #undef GL_ANGLE_program_binary
    #define GL_ANGLE_program_binary 68
    #undef GL_ANGLE_texture_compression_dxt3
    #define GL_ANGLE_texture_compression_dxt3 69
    #undef GL_ANGLE_texture_compression_dxt5
    #define GL_ANGLE_texture_compression_dxt5 70
    #undef GL_ANGLE_texture_usage
    #define GL_ANGLE_texture_usage 71
    #undef GL_ANGLE_translated_shader_source
    #define GL_ANGLE_translated_shader_source 72
    #undef GL_APPLE_aux_depth_stencil
    #define GL_APPLE_aux_depth_stencil 73
    #undef GL_APPLE_client_storage
    #define GL_APPLE_client_storage 74
    #undef GL_APPLE_clip_distance
    #define GL_APPLE_clip_distance 75
    #undef GL_APPLE_color_buffer_packed_float
    #define GL_APPLE_color_buffer_packed_float 76
    #undef GL_APPLE_copy_texture_levels
    #define GL_APPLE_copy_texture_levels 77
    #undef GL_APPLE_element_array
    #define GL_APPLE_element_array 78
    #undef GL_APPLE_fence
    #define GL_APPLE_fence 79
    #undef GL_APPLE_float_pixels
    #define GL_APPLE_float_pixels 80
    #undef GL_APPLE_flush_buffer_range
    #define GL_APPLE_flush_buffer_range 81
    #undef GL_APPLE_framebuffer_multisample
    #define GL_APPLE_framebuffer_multisample 82
    #undef GL_APPLE_object_purgeable
    #define GL_APPLE_object_purgeable 83
    #undef GL_APPLE_rgb_422
    #define GL_APPLE_rgb_422 84
    #undef GL_APPLE_row_bytes
    #define GL_APPLE_row_bytes 85
    #undef GL_APPLE_specular_vector
    #define GL_APPLE_specular_vector 86
    #undef GL_APPLE_sync
    #define GL_APPLE_sync 87
    #undef GL_APPLE_texture_format_BGRA8888
    #define GL_APPLE_texture_format_BGRA8888 88
    #undef GL_APPLE_texture_max_level
    #define GL_APPLE_texture_max_level 89
    #undef GL_APPLE_texture_packed_float
    #define GL_APPLE_texture_packed_float 90
    #undef GL_APPLE_texture_range
    #define GL_APPLE_texture_range 91
    #undef GL_APPLE_transform_hint
    #define GL_APPLE_transform_hint 92
    #undef GL_APPLE_vertex_array_object
    #define GL_APPLE_vertex_array_object 93
    #undef GL_APPLE_vertex_array_range
    #define GL_APPLE_vertex_array_range 94
    #undef GL_APPLE_vertex_program_evaluators
    #define GL_APPLE_vertex_program_evaluators 95
    #undef GL_APPLE_ycbcr_422
    #define GL_APPLE_ycbcr_422 96
    #undef GL_ARB_ES2_compatibility
    #define GL_ARB_ES2_compatibility 97
    #undef GL_ARB_ES3_1_compatibility
    #define GL_ARB_ES3_1_compatibility 98
    #undef GL_ARB_ES3_2_compatibility
    #define GL_ARB_ES3_2_compatibility 99
    #undef GL_ARB_ES3_compatibility
    #define GL_ARB_ES3_compatibility 100
    #undef GL_ARB_arrays_of_arrays
    #define GL_ARB_arrays_of_arrays 101
    #undef GL_ARB_base_instance
    #define GL_ARB_base_instance 102
    #undef GL_ARB_bindless_texture
    #define GL_ARB_bindless_texture 103
    #undef GL_ARB_blend_func_extended
    #define GL_ARB_blend_func_extended 104
    #undef GL_ARB_buffer_storage
    #define GL_ARB_buffer_storage 105
    #undef GL_ARB_cl_event
    #define GL_ARB_cl_event 106
    #undef GL_ARB_clear_buffer_object
    #define GL_ARB_clear_buffer_object 107
    #undef GL_ARB_clear_texture
    #define GL_ARB_clear_texture 108
    #undef GL_ARB_clip_control
    #define GL_ARB_clip_control 109
    #undef GL_ARB_color_buffer_float
    #define GL_ARB_color_buffer_float 110
    #undef GL_ARB_compatibility
    #define GL_ARB_compatibility 111
    #undef GL_ARB_compressed_texture_pixel_storage
    #define GL_ARB_compressed_texture_pixel_storage 112
    #undef GL_ARB_compute_shader
    #define GL_ARB_compute_shader 113
    #undef GL_ARB_compute_variable_group_size
    #define GL_ARB_compute_variable_group_size 114
    #undef GL_ARB_conditional_render_inverted
    #define GL_ARB_conditional_render_inverted 115
    #undef GL_ARB_conservative_depth
    #define GL_ARB_conservative_depth 116
    #undef GL_ARB_copy_buffer
    #define GL_ARB_copy_buffer 117
    #undef GL_ARB_copy_image
    #define GL_ARB_copy_image 118
    #undef GL_ARB_cull_distance
    #define GL_ARB_cull_distance 119
    #undef GL_ARB_debug_output
    #define GL_ARB_debug_output 120
    #undef GL_ARB_depth_buffer_float
    #define GL_ARB_depth_buffer_float 121
    #undef GL_ARB_depth_clamp
    #define GL_ARB_depth_clamp 122
    #undef GL_ARB_depth_texture
    #define GL_ARB_depth_texture 123
    #undef GL_ARB_derivative_control
    #define GL_ARB_derivative_control 124
    #undef GL_ARB_direct_state_access
    #define GL_ARB_direct_state_access 125
    #undef GL_ARB_draw_buffers
    #define GL_ARB_draw_buffers 126
    #undef GL_ARB_draw_buffers_blend
    #define GL_ARB_draw_buffers_blend 127
    #undef GL_ARB_draw_elements_base_vertex
    #define GL_ARB_draw_elements_base_vertex 128
    #undef GL_ARB_draw_indirect
    #define GL_ARB_draw_indirect 129
    #undef GL_ARB_draw_instanced
    #define GL_ARB_draw_instanced 130
    #undef GL_ARB_enhanced_layouts
    #define GL_ARB_enhanced_layouts 131
    #undef GL_ARB_explicit_attrib_location
    #define GL_ARB_explicit_attrib_location 132
    #undef GL_ARB_explicit_uniform_location
    #define GL_ARB_explicit_uniform_location 133
    #undef GL_ARB_fragment_coord_conventions
    #define GL_ARB_fragment_coord_conventions 134
    #undef GL_ARB_fragment_layer_viewport
    #define GL_ARB_fragment_layer_viewport 135
    #undef GL_ARB_fragment_program
    #define GL_ARB_fragment_program 136
    #undef GL_ARB_fragment_program_shadow
    #define GL_ARB_fragment_program_shadow 137
    #undef GL_ARB_fragment_shader
    #define GL_ARB_fragment_shader 138
    #undef GL_ARB_fragment_shader_interlock
    #define GL_ARB_fragment_shader_interlock 139
    #undef GL_ARB_framebuffer_no_attachments
    #define GL_ARB_framebuffer_no_attachments 140
    #undef GL_ARB_framebuffer_object
    #define GL_ARB_framebuffer_object 141
    #undef GL_ARB_framebuffer_sRGB
    #define GL_ARB_framebuffer_sRGB 142
    #undef GL_ARB_geometry_shader4
    #define GL_ARB_geometry_shader4 143
    #undef GL_ARB_get_program_binary
    #define GL_ARB_get_program_binary 144
    #undef GL_ARB_get_texture_sub_image
    #define GL_ARB_get_texture_sub_image 145
    #undef GL_ARB_gl_spirv
    #define GL_ARB_gl_spirv 146
    #undef GL_ARB_gpu_shader5
    #define GL_ARB_gpu_shader5 147
    #undef GL_ARB_gpu_shader_fp64
    #define GL_ARB_gpu_shader_fp64 148
    #undef GL_ARB_gpu_shader_int64
    #define GL_ARB_gpu_shader_int64 149
    #undef GL_ARB_half_float_pixel
    #define GL_ARB_half_float_pixel 150
    #undef GL_ARB_half_float_vertex
    #define GL_ARB_half_float_vertex 151
    #undef GL_ARB_imaging
    #define GL_ARB_imaging 152
    #undef GL_ARB_indirect_parameters
    #define GL_ARB_indirect_parameters 153
    #undef GL_ARB_instanced_arrays
    #define GL_ARB_instanced_arrays 154
    #undef GL_ARB_internalformat_query
    #define GL_ARB_internalformat_query 155
    #undef GL_ARB_internalformat_query2
    #define GL_ARB_internalformat_query2 156
    #undef GL_ARB_invalidate_subdata
    #define GL_ARB_invalidate_subdata 157
    #undef GL_ARB_map_buffer_alignment
    #define GL_ARB_map_buffer_alignment 158
    #undef GL_ARB_map_buffer_range
    #define GL_ARB_map_buffer_range 159
    #undef GL_ARB_matrix_palette
    #define GL_ARB_matrix_palette 160
    #undef GL_ARB_multi_bind
    #define GL_ARB_multi_bind 161
    #undef GL_ARB_multi_draw_indirect
    #define GL_ARB_multi_draw_indirect 162
    #undef GL_ARB_multisample
    #define GL_ARB_multisample 163
    #undef GL_ARB_multitexture
    #define GL_ARB_multitexture 164
    #undef GL_ARB_occlusion_query
    #define GL_ARB_occlusion_query 165
    #undef GL_ARB_occlusion_query2
    #define GL_ARB_occlusion_query2 166
    #undef GL_ARB_parallel_shader_compile
    #define GL_ARB_parallel_shader_compile 167
    #undef GL_ARB_pipeline_statistics_query
    #define GL_ARB_pipeline_statistics_query 168
    #undef GL_ARB_pixel_buffer_object
    #define GL_ARB_pixel_buffer_object 169
    #undef GL_ARB_point_parameters
    #define GL_ARB_point_parameters 170
    #undef GL_ARB_point_sprite
    #define GL_ARB_point_sprite 171
    #undef GL_ARB_post_depth_coverage
    #define GL_ARB_post_depth_coverage 172
    #undef GL_ARB_program_interface_query
    #define GL_ARB_program_interface_query 173
    #undef GL_ARB_provoking_vertex
    #define GL_ARB_provoking_vertex 174
    #undef GL_ARB_query_buffer_object
    #define GL_ARB_query_buffer_object 175
    #undef GL_ARB_robust_buffer_access_behavior
    #define GL_ARB_robust_buffer_access_behavior 176
    #undef GL_ARB_robustness
    #define GL_ARB_robustness 177
    #undef GL_ARB_robustness_isolation
    #define GL_ARB_robustness_isolation 178
    #undef GL_ARB_sample_locations
    #define GL_ARB_sample_locations 179
    #undef GL_ARB_sample_shading
    #define GL_ARB_sample_shading 180
    #undef GL_ARB_sampler_objects
    #define GL_ARB_sampler_objects 181
    #undef GL_ARB_seamless_cube_map
    #define GL_ARB_seamless_cube_map 182
    #undef GL_ARB_seamless_cubemap_per_texture
    #define GL_ARB_seamless_cubemap_per_texture 183
    #undef GL_ARB_separate_shader_objects
    #define GL_ARB_separate_shader_objects 184
    #undef GL_ARB_shader_atomic_counter_ops
    #define GL_ARB_shader_atomic_counter_ops 185
    #undef GL_ARB_shader_atomic_counters
    #define GL_ARB_shader_atomic_counters 186
    #undef GL_ARB_shader_ballot
    #define GL_ARB_shader_ballot 187
    #undef GL_ARB_shader_bit_encoding
    #define GL_ARB_shader_bit_encoding 188
    #undef GL_ARB_shader_clock
    #define GL_ARB_shader_clock 189
    #undef GL_ARB_shader_draw_parameters
    #define GL_ARB_shader_draw_parameters 190
    #undef GL_ARB_shader_group_vote
    #define GL_ARB_shader_group_vote 191
    #undef GL_ARB_shader_image_load_store
    #define GL_ARB_shader_image_load_store 192
    #undef GL_ARB_shader_image_size
    #define GL_ARB_shader_image_size 193
    #undef GL_ARB_shader_objects
    #define GL_ARB_shader_objects 194
    #undef GL_ARB_shader_precision
    #define GL_ARB_shader_precision 195
    #undef GL_ARB_shader_stencil_export
    #define GL_ARB_shader_stencil_export 196
    #undef GL_ARB_shader_storage_buffer_object
    #define GL_ARB_shader_storage_buffer_object 197
    #undef GL_ARB_shader_subroutine
    #define GL_ARB_shader_subroutine 198
    #undef GL_ARB_shader_texture_image_samples
    #define GL_ARB_shader_texture_image_samples 199
    #undef GL_ARB_shader_texture_lod
    #define GL_ARB_shader_texture_lod 200
    #undef GL_ARB_shader_viewport_layer_array
    #define GL_ARB_shader_viewport_layer_array 201
    #undef GL_ARB_shading_language_100
    #define GL_ARB_shading_language_100 202
    #undef GL_ARB_shading_language_420pack
    #define GL_ARB_shading_language_420pack 203
    #undef GL_ARB_shading_language_include
    #define GL_ARB_shading_language_include 204
    #undef GL_ARB_shading_language_packing
    #define GL_ARB_shading_language_packing 205
    #undef GL_ARB_shadow
    #define GL_ARB_shadow 206
    #undef GL_ARB_shadow_ambient
    #define GL_ARB_shadow_ambient 207
    #undef GL_ARB_sparse_buffer
    #define GL_ARB_sparse_buffer 208
    #undef GL_ARB_sparse_texture
    #define GL_ARB_sparse_texture 209
    #undef GL_ARB_sparse_texture2
    #define GL_ARB_sparse_texture2 210
    #undef GL_ARB_sparse_texture_clamp
    #define GL_ARB_sparse_texture_clamp 211
    #undef GL_ARB_stencil_texturing
    #define GL_ARB_stencil_texturing 212
    #undef GL_ARB_sync
    #define GL_ARB_sync 213
    #undef GL_ARB_tessellation_shader
    #define GL_ARB_tessellation_shader 214
    #undef GL_ARB_texture_barrier
    #define GL_ARB_texture_barrier 215
    #undef GL_ARB_texture_border_clamp
    #define GL_ARB_texture_border_clamp 216
    #undef GL_ARB_texture_buffer_object
    #define GL_ARB_texture_buffer_object 217
    #undef GL_ARB_texture_buffer_object_rgb32
    #define GL_ARB_texture_buffer_object_rgb32 218
    #undef GL_ARB_texture_buffer_range
    #define GL_ARB_texture_buffer_range 219
    #undef GL_ARB_texture_compression
    #define GL_ARB_texture_compression 220
    #undef GL_ARB_texture_compression_bptc
    #define GL_ARB_texture_compression_bptc 221
    #undef GL_ARB_texture_compression_rgtc
    #define GL_ARB_texture_compression_rgtc 222
    #undef GL_ARB_texture_cube_map
    #define GL_ARB_texture_cube_map 223
    #undef GL_ARB_texture_cube_map_array
    #define GL_ARB_texture_cube_map_array 224
    #undef GL_ARB_texture_env_add
    #define GL_ARB_texture_env_add 225
    #undef GL_ARB_texture_env_combine
    #define GL_ARB_texture_env_combine 226
    #undef GL_ARB_texture_env_crossbar
    #define GL_ARB_texture_env_crossbar 227
    #undef GL_ARB_texture_env_dot3
    #define GL_ARB_texture_env_dot3 228
    #undef GL_ARB_texture_filter_minmax
    #define GL_ARB_texture_filter_minmax 229
    #undef GL_ARB_texture_float
    #define GL_ARB_texture_float 230
    #undef GL_ARB_texture_gather
    #define GL_ARB_texture_gather 231
    #undef GL_ARB_texture_mirror_clamp_to_edge
    #define GL_ARB_texture_mirror_clamp_to_edge 232
    #undef GL_ARB_texture_mirrored_repeat
    #define GL_ARB_texture_mirrored_repeat 233
    #undef GL_ARB_texture_multisample
    #define GL_ARB_texture_multisample 234
    #undef GL_ARB_texture_non_power_of_two
    #define GL_ARB_texture_non_power_of_two 235
    #undef GL_ARB_texture_query_levels
    #define GL_ARB_texture_query_levels 236
    #undef GL_ARB_texture_query_lod
    #define GL_ARB_texture_query_lod 237
    #undef GL_ARB_texture_rectangle
    #define GL_ARB_texture_rectangle 238
    #undef GL_ARB_texture_rg
    #define GL_ARB_texture_rg 239
    #undef GL_ARB_texture_rgb10_a2ui
    #define GL_ARB_texture_rgb10_a2ui 240
    #undef GL_ARB_texture_stencil8
    #define GL_ARB_texture_stencil8 241
    #undef GL_ARB_texture_storage
    #define GL_ARB_texture_storage 242
    #undef GL_ARB_texture_storage_multisample
    #define GL_ARB_texture_storage_multisample 243
    #undef GL_ARB_texture_swizzle
    #define GL_ARB_texture_swizzle 244
    #undef GL_ARB_texture_view
    #define GL_ARB_texture_view 245
    #undef GL_ARB_timer_query
    #define GL_ARB_timer_query 246
    #undef GL_ARB_transform_feedback2
    #define GL_ARB_transform_feedback2 247
    #undef GL_ARB_transform_feedback3
    #define GL_ARB_transform_feedback3 248
    #undef GL_ARB_transform_feedback_instanced
    #define GL_ARB_transform_feedback_instanced 249
    #undef GL_ARB_transform_feedback_overflow_query
    #define GL_ARB_transform_feedback_overflow_query 250
    #undef GL_ARB_transpose_matrix
    #define GL_ARB_transpose_matrix 251
    #undef GL_ARB_uniform_buffer_object
    #define GL_ARB_uniform_buffer_object 252
    #undef GL_ARB_vertex_array_bgra
    #define GL_ARB_vertex_array_bgra 253
    #undef GL_ARB_vertex_array_object
    #define GL_ARB_vertex_array_object 254
    #undef GL_ARB_vertex_attrib_64bit
    #define GL_ARB_vertex_attrib_64bit 255
    #undef GL_ARB_vertex_attrib_binding
    #define GL_ARB_vertex_attrib_binding 256
    #undef GL_ARB_vertex_blend
    #define GL_ARB_vertex_blend 257
    #undef GL_ARB_vertex_buffer_object
    #define GL_ARB_vertex_buffer_object 258
    #undef GL_ARB_vertex_program
    #define GL_ARB_vertex_program 259
    #undef GL_ARB_vertex_shader
    #define GL_ARB_vertex_shader 260
    #undef GL_ARB_vertex_type_10f_11f_11f_rev
    #define GL_ARB_vertex_type_10f_11f_11f_rev 261
    #undef GL_ARB_vertex_type_2_10_10_10_rev
    #define GL_ARB_vertex_type_2_10_10_10_rev 262
    #undef GL_ARB_viewport_array
    #define GL_ARB_viewport_array 263
    #undef GL_ARB_window_pos
    #define GL_ARB_window_pos 264
    #undef GL_ARM_mali_program_binary
    #define GL_ARM_mali_program_binary 265
    #undef GL_ARM_mali_shader_binary
    #define GL_ARM_mali_shader_binary 266
    #undef GL_ARM_rgba8
    #define GL_ARM_rgba8 267
    #undef GL_ARM_shader_framebuffer_fetch
    #define GL_ARM_shader_framebuffer_fetch 268
    #undef GL_ARM_shader_framebuffer_fetch_depth_stencil
    #define GL_ARM_shader_framebuffer_fetch_depth_stencil 269
    #undef GL_ATI_draw_buffers
    #define GL_ATI_draw_buffers 270
    #undef GL_ATI_element_array
    #define GL_ATI_element_array 271
    #undef GL_ATI_envmap_bumpmap
    #define GL_ATI_envmap_bumpmap 272
    #undef GL_ATI_fragment_shader
    #define GL_ATI_fragment_shader 273
    #undef GL_ATI_map_object_buffer
    #define GL_ATI_map_object_buffer 274
    #undef GL_ATI_meminfo
    #define GL_ATI_meminfo 275
    #undef GL_ATI_pixel_format_float
    #define GL_ATI_pixel_format_float 276
    #undef GL_ATI_pn_triangles
    #define GL_ATI_pn_triangles 277
    #undef GL_ATI_separate_stencil
    #define GL_ATI_separate_stencil 278
    #undef GL_ATI_text_fragment_shader
    #define GL_ATI_text_fragment_shader 279
    #undef GL_ATI_texture_env_combine3
    #define GL_ATI_texture_env_combine3 280
    #undef GL_ATI_texture_float
    #define GL_ATI_texture_float 281
    #undef GL_ATI_texture_mirror_once
    #define GL_ATI_texture_mirror_once 282
    #undef GL_ATI_vertex_array_object
    #define GL_ATI_vertex_array_object 283
    #undef GL_ATI_vertex_attrib_array_object
    #define GL_ATI_vertex_attrib_array_object 284
    #undef GL_ATI_vertex_streams
    #define GL_ATI_vertex_streams 285
    #undef GL_DMP_program_binary
    #define GL_DMP_program_binary 286
    #undef GL_DMP_shader_binary
    #define GL_DMP_shader_binary 287
    #undef GL_EXTX_framebuffer_mixed_formats
    #define GL_EXTX_framebuffer_mixed_formats 288
    #undef GL_EXT_422_pixels
    #define GL_EXT_422_pixels 289
    #undef GL_EXT_Cg_shader
    #define GL_EXT_Cg_shader 290
    #undef GL_EXT_EGL_image_array
    #define GL_EXT_EGL_image_array 291
    #undef GL_EXT_YUV_target
    #define GL_EXT_YUV_target 292
    #undef GL_EXT_abgr
    #define GL_EXT_abgr 293
    #undef GL_EXT_base_instance
    #define GL_EXT_base_instance 294
    #undef GL_EXT_bgra
    #define GL_EXT_bgra 295
    #undef GL_EXT_bindable_uniform
    #define GL_EXT_bindable_uniform 296
    #undef GL_EXT_blend_color
    #define GL_EXT_blend_color 297
    #undef GL_EXT_blend_equation_separate
    #define GL_EXT_blend_equation_separate 298
    #undef GL_EXT_blend_func_extended
    #define GL_EXT_blend_func_extended 299
    #undef GL_EXT_blend_func_separate
    #define GL_EXT_blend_func_separate 300
    #undef GL_EXT_blend_logic_op
    #define GL_EXT_blend_logic_op 301
    #undef GL_EXT_blend_minmax
    #define GL_EXT_blend_minmax 302
    #undef GL_EXT_blend_subtract
    #define GL_EXT_blend_subtract 303
    #undef GL_EXT_buffer_storage
    #define GL_EXT_buffer_storage 304
    #undef GL_EXT_clear_texture
    #define GL_EXT_clear_texture 305
    #undef GL_EXT_clip_cull_distance
    #define GL_EXT_clip_cull_distance 306
    #undef GL_EXT_clip_volume_hint
    #define GL_EXT_clip_volume_hint 307
    #undef GL_EXT_cmyka
    #define GL_EXT_cmyka 308
    #undef GL_EXT_color_buffer_float
    #define GL_EXT_color_buffer_float 309
    #undef GL_EXT_color_buffer_half_float
    #define GL_EXT_color_buffer_half_float 310
    #undef GL_EXT_color_subtable
    #define GL_EXT_color_subtable 311
    #undef GL_EXT_compiled_vertex_array
    #define GL_EXT_compiled_vertex_array 312
    #undef GL_EXT_conservative_depth
    #define GL_EXT_conservative_depth 313
    #undef GL_EXT_convolution
    #define GL_EXT_convolution 314
    #undef GL_EXT_coordinate_frame
    #define GL_EXT_coordinate_frame 315
    #undef GL_EXT_copy_image
    #define GL_EXT_copy_image 316
    #undef GL_EXT_copy_texture
    #define GL_EXT_copy_texture 317
    #undef GL_EXT_cull_vertex
    #define GL_EXT_cull_vertex 318
    #undef GL_EXT_debug_label
    #define GL_EXT_debug_label 319
    #undef GL_EXT_debug_marker
    #define GL_EXT_debug_marker 320
    #undef GL_EXT_depth_bounds_test
    #define GL_EXT_depth_bounds_test 321
    #undef GL_EXT_direct_state_access
    #define GL_EXT_direct_state_access 322
    #undef GL_EXT_discard_framebuffer
    #define GL_EXT_discard_framebuffer 323
    #undef GL_EXT_disjoint_timer_query
    #define GL_EXT_disjoint_timer_query 324
    #undef GL_EXT_draw_buffers
    #define GL_EXT_draw_buffers 325
    #undef GL_EXT_draw_buffers2
    #define GL_EXT_draw_buffers2 326
    #undef GL_EXT_draw_buffers_indexed
    #define GL_EXT_draw_buffers_indexed 327
    #undef GL_EXT_draw_elements_base_vertex
    #define GL_EXT_draw_elements_base_vertex 328
    #undef GL_EXT_draw_instanced
    #define GL_EXT_draw_instanced 329
    #undef GL_EXT_draw_range_elements
    #define GL_EXT_draw_range_elements 330
    #undef GL_EXT_draw_transform_feedback
    #define GL_EXT_draw_transform_feedback 331
    #undef GL_EXT_external_buffer
    #define GL_EXT_external_buffer 332
    #undef GL_EXT_float_blend
    #define GL_EXT_float_blend 333
    #undef GL_EXT_fog_coord
    #define GL_EXT_fog_coord 334
    #undef GL_EXT_framebuffer_blit
    #define GL_EXT_framebuffer_blit 335
    #undef GL_EXT_framebuffer_multisample
    #define GL_EXT_framebuffer_multisample 336
    #undef GL_EXT_framebuffer_multisample_blit_scaled
    #define GL_EXT_framebuffer_multisample_blit_scaled 337
    #undef GL_EXT_framebuffer_object
    #define GL_EXT_framebuffer_object 338
    #undef GL_EXT_framebuffer_sRGB
    #define GL_EXT_framebuffer_sRGB 339
    #undef GL_EXT_geometry_point_size
    #define GL_EXT_geometry_point_size 340
    #undef GL_EXT_geometry_shader
    #define GL_EXT_geometry_shader 341
    #undef GL_EXT_geometry_shader4
    #define GL_EXT_geometry_shader4 342
    #undef GL_EXT_gpu_program_parameters
    #define GL_EXT_gpu_program_parameters 343
    #undef GL_EXT_gpu_shader4
    #define GL_EXT_gpu_shader4 344
    #undef GL_EXT_gpu_shader5
    #define GL_EXT_gpu_shader5 345
    #undef GL_EXT_histogram
    #define GL_EXT_histogram 346
    #undef GL_EXT_import_sync_object
    #define GL_EXT_import_sync_object 347
    #undef GL_EXT_index_array_formats
    #define GL_EXT_index_array_formats 348
    #undef GL_EXT_index_func
    #define GL_EXT_index_func 349
    #undef GL_EXT_index_material
    #define GL_EXT_index_material 350
    #undef GL_EXT_index_texture
    #define GL_EXT_index_texture 351
    #undef GL_EXT_instanced_arrays
    #define GL_EXT_instanced_arrays 352
    #undef GL_EXT_light_texture
    #define GL_EXT_light_texture 353
    #undef GL_EXT_map_buffer_range
    #define GL_EXT_map_buffer_range 354
    #undef GL_EXT_memory_object
    #define GL_EXT_memory_object 355
    #undef GL_EXT_memory_object_fd
    #define GL_EXT_memory_object_fd 356
    #undef GL_EXT_memory_object_win32
    #define GL_EXT_memory_object_win32 357
    #undef GL_EXT_misc_attribute
    #define GL_EXT_misc_attribute 358
    #undef GL_EXT_multi_draw_arrays
    #define GL_EXT_multi_draw_arrays 359
    #undef GL_EXT_multi_draw_indirect
    #define GL_EXT_multi_draw_indirect 360
    #undef GL_EXT_multisample
    #define GL_EXT_multisample 361
    #undef GL_EXT_multisampled_compatibility
    #define GL_EXT_multisampled_compatibility 362
    #undef GL_EXT_multisampled_render_to_texture
    #define GL_EXT_multisampled_render_to_texture 363
    #undef GL_EXT_multiview_draw_buffers
    #define GL_EXT_multiview_draw_buffers 364
    #undef GL_EXT_occlusion_query_boolean
    #define GL_EXT_occlusion_query_boolean 365
    #undef GL_EXT_packed_depth_stencil
    #define GL_EXT_packed_depth_stencil 366
    #undef GL_EXT_packed_float
    #define GL_EXT_packed_float 367
    #undef GL_EXT_packed_pixels
    #define GL_EXT_packed_pixels 368
    #undef GL_EXT_paletted_texture
    #define GL_EXT_paletted_texture 369
    #undef GL_EXT_pixel_buffer_object
    #define GL_EXT_pixel_buffer_object 370
    #undef GL_EXT_pixel_transform
    #define GL_EXT_pixel_transform 371
    #undef GL_EXT_pixel_transform_color_table
    #define GL_EXT_pixel_transform_color_table 372
    #undef GL_EXT_point_parameters
    #define GL_EXT_point_parameters 373
    #undef GL_EXT_polygon_offset
    #define GL_EXT_polygon_offset 374
    #undef GL_EXT_polygon_offset_clamp
    #define GL_EXT_polygon_offset_clamp 375
    #undef GL_EXT_post_depth_coverage
    #define GL_EXT_post_depth_coverage 376
    #undef GL_EXT_primitive_bounding_box
    #define GL_EXT_primitive_bounding_box 377
    #undef GL_EXT_protected_textures
    #define GL_EXT_protected_textures 378
    #undef GL_EXT_provoking_vertex
    #define GL_EXT_provoking_vertex 379
    #undef GL_EXT_pvrtc_sRGB
    #define GL_EXT_pvrtc_sRGB 380
    #undef GL_EXT_raster_multisample
    #define GL_EXT_raster_multisample 381
    #undef GL_EXT_read_format_bgra
    #define GL_EXT_read_format_bgra 382
    #undef GL_EXT_render_snorm
    #define GL_EXT_render_snorm 383
    #undef GL_EXT_rescale_normal
    #define GL_EXT_rescale_normal 384
    #undef GL_EXT_robustness
    #define GL_EXT_robustness 385
    #undef GL_EXT_sRGB
    #define GL_EXT_sRGB 386
    #undef GL_EXT_sRGB_write_control
    #define GL_EXT_sRGB_write_control 387
    #undef GL_EXT_secondary_color
    #define GL_EXT_secondary_color 388
    #undef GL_EXT_semaphore
    #define GL_EXT_semaphore 389
    #undef GL_EXT_semaphore_fd
    #define GL_EXT_semaphore_fd 390
    #undef GL_EXT_semaphore_win32
    #define GL_EXT_semaphore_win32 391
    #undef GL_EXT_separate_shader_objects
    #define GL_EXT_separate_shader_objects 392
    #undef GL_EXT_separate_specular_color
    #define GL_EXT_separate_specular_color 393
    #undef GL_EXT_shader_framebuffer_fetch
    #define GL_EXT_shader_framebuffer_fetch 394
    #undef GL_EXT_shader_group_vote
    #define GL_EXT_shader_group_vote 395
    #undef GL_EXT_shader_image_load_formatted
    #define GL_EXT_shader_image_load_formatted 396
    #undef GL_EXT_shader_image_load_store
    #define GL_EXT_shader_image_load_store 397
    #undef GL_EXT_shader_implicit_conversions
    #define GL_EXT_shader_implicit_conversions 398
    #undef GL_EXT_shader_integer_mix
    #define GL_EXT_shader_integer_mix 399
    #undef GL_EXT_shader_io_blocks
    #define GL_EXT_shader_io_blocks 400
    #undef GL_EXT_shader_non_constant_global_initializers
    #define GL_EXT_shader_non_constant_global_initializers 401
    #undef GL_EXT_shader_pixel_local_storage
    #define GL_EXT_shader_pixel_local_storage 402
    #undef GL_EXT_shader_pixel_local_storage2
    #define GL_EXT_shader_pixel_local_storage2 403
    #undef GL_EXT_shader_texture_lod
    #define GL_EXT_shader_texture_lod 404
    #undef GL_EXT_shadow_funcs
    #define GL_EXT_shadow_funcs 405
    #undef GL_EXT_shadow_samplers
    #define GL_EXT_shadow_samplers 406
    #undef GL_EXT_shared_texture_palette
    #define GL_EXT_shared_texture_palette 407
    #undef GL_EXT_sparse_texture
    #define GL_EXT_sparse_texture 408
    #undef GL_EXT_sparse_texture2
    #define GL_EXT_sparse_texture2 409
    #undef GL_EXT_stencil_clear_tag
    #define GL_EXT_stencil_clear_tag 410
    #undef GL_EXT_stencil_two_side
    #define GL_EXT_stencil_two_side 411
    #undef GL_EXT_stencil_wrap
    #define GL_EXT_stencil_wrap 412
    #undef GL_EXT_subtexture
    #define GL_EXT_subtexture 413
    #undef GL_EXT_tessellation_point_size
    #define GL_EXT_tessellation_point_size 414
    #undef GL_EXT_tessellation_shader
    #define GL_EXT_tessellation_shader 415
    #undef GL_EXT_texture
    #define GL_EXT_texture 416
    #undef GL_EXT_texture3D
    #define GL_EXT_texture3D 417
    #undef GL_EXT_texture_array
    #define GL_EXT_texture_array 418
    #undef GL_EXT_texture_border_clamp
    #define GL_EXT_texture_border_clamp 419
    #undef GL_EXT_texture_buffer
    #define GL_EXT_texture_buffer 420
    #undef GL_EXT_texture_buffer_object
    #define GL_EXT_texture_buffer_object 421
    #undef GL_EXT_texture_compression_astc_decode_mode
    #define GL_EXT_texture_compression_astc_decode_mode 422
    #undef GL_EXT_texture_compression_dxt1
    #define GL_EXT_texture_compression_dxt1 423
    #undef GL_EXT_texture_compression_latc
    #define GL_EXT_texture_compression_latc 424
    #undef GL_EXT_texture_compression_rgtc
    #define GL_EXT_texture_compression_rgtc 425
    #undef GL_EXT_texture_compression_s3tc
    #define GL_EXT_texture_compression_s3tc 426
    #undef GL_EXT_texture_cube_map
    #define GL_EXT_texture_cube_map 427
    #undef GL_EXT_texture_cube_map_array
    #define GL_EXT_texture_cube_map_array 428
    #undef GL_EXT_texture_edge_clamp
    #define GL_EXT_texture_edge_clamp 429
    #undef GL_EXT_texture_env_add
    #define GL_EXT_texture_env_add 430
    #undef GL_EXT_texture_env_combine
    #define GL_EXT_texture_env_combine 431
    #undef GL_EXT_texture_env_dot3
    #define GL_EXT_texture_env_dot3 432
    #undef GL_EXT_texture_filter_anisotropic
    #define GL_EXT_texture_filter_anisotropic 433
    #undef GL_EXT_texture_filter_minmax
    #define GL_EXT_texture_filter_minmax 434
    #undef GL_EXT_texture_format_BGRA8888
    #define GL_EXT_texture_format_BGRA8888 435
    #undef GL_EXT_texture_integer
    #define GL_EXT_texture_integer 436
    #undef GL_EXT_texture_lod_bias
    #define GL_EXT_texture_lod_bias 437
    #undef GL_EXT_texture_mirror_clamp
    #define GL_EXT_texture_mirror_clamp 438
    #undef GL_EXT_texture_norm16
    #define GL_EXT_texture_norm16 439
    #undef GL_EXT_texture_object
    #define GL_EXT_texture_object 440
    #undef GL_EXT_texture_perturb_normal
    #define GL_EXT_texture_perturb_normal 441
    #undef GL_EXT_texture_rg
    #define GL_EXT_texture_rg 442
    #undef GL_EXT_texture_sRGB
    #define GL_EXT_texture_sRGB 443
    #undef GL_EXT_texture_sRGB_R8
    #define GL_EXT_texture_sRGB_R8 444
    #undef GL_EXT_texture_sRGB_RG8
    #define GL_EXT_texture_sRGB_RG8 445
    #undef GL_EXT_texture_sRGB_decode
    #define GL_EXT_texture_sRGB_decode 446
    #undef GL_EXT_texture_shared_exponent
    #define GL_EXT_texture_shared_exponent 447
    #undef GL_EXT_texture_snorm
    #define GL_EXT_texture_snorm 448
    #undef GL_EXT_texture_storage
    #define GL_EXT_texture_storage 449
    #undef GL_EXT_texture_swizzle
    #define GL_EXT_texture_swizzle 450
    #undef GL_EXT_texture_type_2_10_10_10_REV
    #define GL_EXT_texture_type_2_10_10_10_REV 451
    #undef GL_EXT_texture_view
    #define GL_EXT_texture_view 452
    #undef GL_EXT_timer_query
    #define GL_EXT_timer_query 453
    #undef GL_EXT_transform_feedback
    #define GL_EXT_transform_feedback 454
    #undef GL_EXT_unpack_subimage
    #define GL_EXT_unpack_subimage 455
    #undef GL_EXT_vertex_array
    #define GL_EXT_vertex_array 456
    #undef GL_EXT_vertex_array_bgra
    #define GL_EXT_vertex_array_bgra 457
    #undef GL_EXT_vertex_attrib_64bit
    #define GL_EXT_vertex_attrib_64bit 458
    #undef GL_EXT_vertex_shader
    #define GL_EXT_vertex_shader 459
    #undef GL_EXT_vertex_weighting
    #define GL_EXT_vertex_weighting 460
    #undef GL_EXT_win32_keyed_mutex
    #define GL_EXT_win32_keyed_mutex 461
    #undef GL_EXT_window_rectangles
    #define GL_EXT_window_rectangles 462
    #undef GL_EXT_x11_sync_object
    #define GL_EXT_x11_sync_object 463
    #undef GL_FJ_shader_binary_GCCSO
    #define GL_FJ_shader_binary_GCCSO 464
    #undef GL_GLES_PROTOTYPES
    #define GL_GLES_PROTOTYPES 465
    #undef GL_GREMEDY_frame_terminator
    #define GL_GREMEDY_frame_terminator 466
    #undef GL_GREMEDY_string_marker
    #define GL_GREMEDY_string_marker 467
    #undef GL_HP_convolution_border_modes
    #define GL_HP_convolution_border_modes 468
    #undef GL_HP_image_transform
    #define GL_HP_image_transform 469
    #undef GL_HP_occlusion_test
    #define GL_HP_occlusion_test 470
    #undef GL_HP_texture_lighting
    #define GL_HP_texture_lighting 471
    #undef GL_IBM_cull_vertex
    #define GL_IBM_cull_vertex 472
    #undef GL_IBM_multimode_draw_arrays
    #define GL_IBM_multimode_draw_arrays 473
    #undef GL_IBM_rasterpos_clip
    #define GL_IBM_rasterpos_clip 474
    #undef GL_IBM_static_data
    #define GL_IBM_static_data 475
    #undef GL_IBM_texture_mirrored_repeat
    #define GL_IBM_texture_mirrored_repeat 476
    #undef GL_IBM_vertex_array_lists
    #define GL_IBM_vertex_array_lists 477
    #undef GL_IMG_bindless_texture
    #define GL_IMG_bindless_texture 478
    #undef GL_IMG_framebuffer_downsample
    #define GL_IMG_framebuffer_downsample 479
    #undef GL_IMG_multisampled_render_to_texture
    #define GL_IMG_multisampled_render_to_texture 480
    #undef GL_IMG_program_binary
    #define GL_IMG_program_binary 481
    #undef GL_IMG_read_format
    #define GL_IMG_read_format 482
    #undef GL_IMG_shader_binary
    #define GL_IMG_shader_binary 483
    #undef GL_IMG_texture_compression_pvrtc
    #define GL_IMG_texture_compression_pvrtc 484
    #undef GL_IMG_texture_compression_pvrtc2
    #define GL_IMG_texture_compression_pvrtc2 485
    #undef GL_IMG_texture_filter_cubic
    #define GL_IMG_texture_filter_cubic 486
    #undef GL_INGR_blend_func_separate
    #define GL_INGR_blend_func_separate 487
    #undef GL_INGR_color_clamp
    #define GL_INGR_color_clamp 488
    #undef GL_INGR_interlace_read
    #define GL_INGR_interlace_read 489
    #undef GL_INTEL_conservative_rasterization
    #define GL_INTEL_conservative_rasterization 490
    #undef GL_INTEL_fragment_shader_ordering
    #define GL_INTEL_fragment_shader_ordering 491
    #undef GL_INTEL_framebuffer_CMAA
    #define GL_INTEL_framebuffer_CMAA 492
    #undef GL_INTEL_map_texture
    #define GL_INTEL_map_texture 493
    #undef GL_INTEL_parallel_arrays
    #define GL_INTEL_parallel_arrays 494
    #undef GL_INTEL_performance_query
    #define GL_INTEL_performance_query 495
    #undef GL_KHR_blend_equation_advanced
    #define GL_KHR_blend_equation_advanced 496
    #undef GL_KHR_blend_equation_advanced_coherent
    #define GL_KHR_blend_equation_advanced_coherent 497
    #undef GL_KHR_context_flush_control
    #define GL_KHR_context_flush_control 498
    #undef GL_KHR_debug
    #define GL_KHR_debug 499
    #undef GL_KHR_no_error
    #define GL_KHR_no_error 500
    #undef GL_KHR_robust_buffer_access_behavior
    #define GL_KHR_robust_buffer_access_behavior 501
    #undef GL_KHR_robustness
    #define GL_KHR_robustness 502
    #undef GL_KHR_texture_compression_astc_hdr
    #define GL_KHR_texture_compression_astc_hdr 503
    #undef GL_KHR_texture_compression_astc_ldr
    #define GL_KHR_texture_compression_astc_ldr 504
    #undef GL_KHR_texture_compression_astc_sliced_3d
    #define GL_KHR_texture_compression_astc_sliced_3d 505
    #undef GL_KTX_buffer_region
    #define GL_KTX_buffer_region 506
    #undef GL_MESAX_texture_stack
    #define GL_MESAX_texture_stack 507
    #undef GL_MESA_pack_invert
    #define GL_MESA_pack_invert 508
    #undef GL_MESA_resize_buffers
    #define GL_MESA_resize_buffers 509
    #undef GL_MESA_shader_integer_functions
    #define GL_MESA_shader_integer_functions 510
    #undef GL_MESA_window_pos
    #define GL_MESA_window_pos 511
    #undef GL_MESA_ycbcr_texture
    #define GL_MESA_ycbcr_texture 512
    #undef GL_NVX_blend_equation_advanced_multi_draw_buffers
    #define GL_NVX_blend_equation_advanced_multi_draw_buffers 513
    #undef GL_NVX_conditional_render
    #define GL_NVX_conditional_render 514
    #undef GL_NVX_gpu_memory_info
    #define GL_NVX_gpu_memory_info 515
    #undef GL_NVX_linked_gpu_multicast
    #define GL_NVX_linked_gpu_multicast 516
    #undef GL_NV_ES1_1_compatibility
    #define GL_NV_ES1_1_compatibility 517
    #undef GL_NV_alpha_to_coverage_dither_control
    #define GL_NV_alpha_to_coverage_dither_control 518
    #undef GL_NV_bindless_multi_draw_indirect
    #define GL_NV_bindless_multi_draw_indirect 519
    #undef GL_NV_bindless_multi_draw_indirect_count
    #define GL_NV_bindless_multi_draw_indirect_count 520
    #undef GL_NV_bindless_texture
    #define GL_NV_bindless_texture 521
    #undef GL_NV_blend_equation_advanced
    #define GL_NV_blend_equation_advanced 522
    #undef GL_NV_blend_equation_advanced_coherent
    #define GL_NV_blend_equation_advanced_coherent 523
    #undef GL_NV_blend_square
    #define GL_NV_blend_square 524
    #undef GL_NV_clip_space_w_scaling
    #define GL_NV_clip_space_w_scaling 525
    #undef GL_NV_command_list
    #define GL_NV_command_list 526
    #undef GL_NV_compute_program5
    #define GL_NV_compute_program5 527
    #undef GL_NV_conditional_render
    #define GL_NV_conditional_render 528
    #undef GL_NV_conservative_raster
    #define GL_NV_conservative_raster 529
    #undef GL_NV_conservative_raster_dilate
    #define GL_NV_conservative_raster_dilate 530
    #undef GL_NV_conservative_raster_pre_snap_triangles
    #define GL_NV_conservative_raster_pre_snap_triangles 531
    #undef GL_NV_copy_buffer
    #define GL_NV_copy_buffer 532
    #undef GL_NV_copy_depth_to_color
    #define GL_NV_copy_depth_to_color 533
    #undef GL_NV_copy_image
    #define GL_NV_copy_image 534
    #undef GL_NV_coverage_sample
    #define GL_NV_coverage_sample 535
    #undef GL_NV_deep_texture3D
    #define GL_NV_deep_texture3D 536
    #undef GL_NV_depth_buffer_float
    #define GL_NV_depth_buffer_float 537
    #undef GL_NV_depth_clamp
    #define GL_NV_depth_clamp 538
    #undef GL_NV_depth_nonlinear
    #define GL_NV_depth_nonlinear 539
    #undef GL_NV_draw_buffers
    #define GL_NV_draw_buffers 540
    #undef GL_NV_draw_instanced
    #define GL_NV_draw_instanced 541
    #undef GL_NV_draw_texture
    #define GL_NV_draw_texture 542
    #undef GL_NV_draw_vulkan_image
    #define GL_NV_draw_vulkan_image 543
    #undef GL_NV_evaluators
    #define GL_NV_evaluators 544
    #undef GL_NV_explicit_attrib_location
    #define GL_NV_explicit_attrib_location 545
    #undef GL_NV_explicit_multisample
    #define GL_NV_explicit_multisample 546
    #undef GL_NV_fbo_color_attachments
    #define GL_NV_fbo_color_attachments 547
    #undef GL_NV_fence
    #define GL_NV_fence 548
    #undef GL_NV_fill_rectangle
    #define GL_NV_fill_rectangle 549
    #undef GL_NV_float_buffer
    #define GL_NV_float_buffer 550
    #undef GL_NV_fog_distance
    #define GL_NV_fog_distance 551
    #undef GL_NV_fragment_coverage_to_color
    #define GL_NV_fragment_coverage_to_color 552
    #undef GL_NV_fragment_program
    #define GL_NV_fragment_program 553
    #undef GL_NV_fragment_program2
    #define GL_NV_fragment_program2 554
    #undef GL_NV_fragment_program4
    #define GL_NV_fragment_program4 555
    #undef GL_NV_fragment_program_option
    #define GL_NV_fragment_program_option 556
    #undef GL_NV_fragment_shader_interlock
    #define GL_NV_fragment_shader_interlock 557
    #undef GL_NV_framebuffer_blit
    #define GL_NV_framebuffer_blit 558
    #undef GL_NV_framebuffer_mixed_samples
    #define GL_NV_framebuffer_mixed_samples 559
    #undef GL_NV_framebuffer_multisample
    #define GL_NV_framebuffer_multisample 560
    #undef GL_NV_framebuffer_multisample_coverage
    #define GL_NV_framebuffer_multisample_coverage 561
    #undef GL_NV_generate_mipmap_sRGB
    #define GL_NV_generate_mipmap_sRGB 562
    #undef GL_NV_geometry_program4
    #define GL_NV_geometry_program4 563
    #undef GL_NV_geometry_shader4
    #define GL_NV_geometry_shader4 564
    #undef GL_NV_geometry_shader_passthrough
    #define GL_NV_geometry_shader_passthrough 565
    #undef GL_NV_gpu_multicast
    #define GL_NV_gpu_multicast 566
    #undef GL_NV_gpu_program4
    #define GL_NV_gpu_program4 567
    #undef GL_NV_gpu_program5
    #define GL_NV_gpu_program5 568
    #undef GL_NV_gpu_program5_mem_extended
    #define GL_NV_gpu_program5_mem_extended 569
    #undef GL_NV_gpu_shader5
    #define GL_NV_gpu_shader5 570
    #undef GL_NV_half_float
    #define GL_NV_half_float 571
    #undef GL_NV_image_formats
    #define GL_NV_image_formats 572
    #undef GL_NV_instanced_arrays
    #define GL_NV_instanced_arrays 573
    #undef GL_NV_internalformat_sample_query
    #define GL_NV_internalformat_sample_query 574
    #undef GL_NV_light_max_exponent
    #define GL_NV_light_max_exponent 575
    #undef GL_NV_multisample_coverage
    #define GL_NV_multisample_coverage 576
    #undef GL_NV_multisample_filter_hint
    #define GL_NV_multisample_filter_hint 577
    #undef GL_NV_non_square_matrices
    #define GL_NV_non_square_matrices 578
    #undef GL_NV_occlusion_query
    #define GL_NV_occlusion_query 579
    #undef GL_NV_packed_depth_stencil
    #define GL_NV_packed_depth_stencil 580
    #undef GL_NV_parameter_buffer_object
    #define GL_NV_parameter_buffer_object 581
    #undef GL_NV_parameter_buffer_object2
    #define GL_NV_parameter_buffer_object2 582
    #undef GL_NV_path_rendering
    #define GL_NV_path_rendering 583
    #undef GL_NV_path_rendering_shared_edge
    #define GL_NV_path_rendering_shared_edge 584
    #undef GL_NV_pixel_data_range
    #define GL_NV_pixel_data_range 585
    #undef GL_NV_point_sprite
    #define GL_NV_point_sprite 586
    #undef GL_NV_polygon_mode
    #define GL_NV_polygon_mode 587
    #undef GL_NV_present_video
    #define GL_NV_present_video 588
    #undef GL_NV_primitive_restart
    #define GL_NV_primitive_restart 589
    #undef GL_NV_read_buffer
    #define GL_NV_read_buffer 590
    #undef GL_NV_read_buffer_front
    #define GL_NV_read_buffer_front 591
    #undef GL_NV_read_depth
    #define GL_NV_read_depth 592
    #undef GL_NV_read_depth_stencil
    #define GL_NV_read_depth_stencil 593
    #undef GL_NV_read_stencil
    #define GL_NV_read_stencil 594
    #undef GL_NV_register_combiners
    #define GL_NV_register_combiners 595
    #undef GL_NV_register_combiners2
    #define GL_NV_register_combiners2 596
    #undef GL_NV_robustness_video_memory_purge
    #define GL_NV_robustness_video_memory_purge 597
    #undef GL_NV_sRGB_formats
    #define GL_NV_sRGB_formats 598
    #undef GL_NV_sample_locations
    #define GL_NV_sample_locations 599
    #undef GL_NV_sample_mask_override_coverage
    #define GL_NV_sample_mask_override_coverage 600
    #undef GL_NV_shader_atomic_counters
    #define GL_NV_shader_atomic_counters 601
    #undef GL_NV_shader_atomic_float
    #define GL_NV_shader_atomic_float 602
    #undef GL_NV_shader_atomic_float64
    #define GL_NV_shader_atomic_float64 603
    #undef GL_NV_shader_atomic_fp16_vector
    #define GL_NV_shader_atomic_fp16_vector 604
    #undef GL_NV_shader_atomic_int64
    #define GL_NV_shader_atomic_int64 605
    #undef GL_NV_shader_buffer_load
    #define GL_NV_shader_buffer_load 606
    #undef GL_NV_shader_buffer_store
    #define GL_NV_shader_buffer_store 607
    #undef GL_NV_shader_noperspective_interpolation
    #define GL_NV_shader_noperspective_interpolation 608
    #undef GL_NV_shader_storage_buffer_object
    #define GL_NV_shader_storage_buffer_object 609
    #undef GL_NV_shader_thread_group
    #define GL_NV_shader_thread_group 610
    #undef GL_NV_shader_thread_shuffle
    #define GL_NV_shader_thread_shuffle 611
    #undef GL_NV_shadow_samplers_array
    #define GL_NV_shadow_samplers_array 612
    #undef GL_NV_shadow_samplers_cube
    #define GL_NV_shadow_samplers_cube 613
    #undef GL_NV_stereo_view_rendering
    #define GL_NV_stereo_view_rendering 614
    #undef GL_NV_tessellation_program5
    #define GL_NV_tessellation_program5 615
    #undef GL_NV_texgen_emboss
    #define GL_NV_texgen_emboss 616
    #undef GL_NV_texgen_reflection
    #define GL_NV_texgen_reflection 617
    #undef GL_NV_texture_barrier
    #define GL_NV_texture_barrier 618
    #undef GL_NV_texture_border_clamp
    #define GL_NV_texture_border_clamp 619
    #undef GL_NV_texture_compression_s3tc_update
    #define GL_NV_texture_compression_s3tc_update 620
    #undef GL_NV_texture_compression_vtc
    #define GL_NV_texture_compression_vtc 621
    #undef GL_NV_texture_env_combine4
    #define GL_NV_texture_env_combine4 622
    #undef GL_NV_texture_expand_normal
    #define GL_NV_texture_expand_normal 623
    #undef GL_NV_texture_multisample
    #define GL_NV_texture_multisample 624
    #undef GL_NV_texture_npot_2D_mipmap
    #define GL_NV_texture_npot_2D_mipmap 625
    #undef GL_NV_texture_rectangle
    #define GL_NV_texture_rectangle 626
    #undef GL_NV_texture_shader
    #define GL_NV_texture_shader 627
    #undef GL_NV_texture_shader2
    #define GL_NV_texture_shader2 628
    #undef GL_NV_texture_shader3
    #define GL_NV_texture_shader3 629
    #undef GL_NV_transform_feedback
    #define GL_NV_transform_feedback 630
    #undef GL_NV_transform_feedback2
    #define GL_NV_transform_feedback2 631
    #undef GL_NV_uniform_buffer_unified_memory
    #define GL_NV_uniform_buffer_unified_memory 632
    #undef GL_NV_vdpau_interop
    #define GL_NV_vdpau_interop 633
    #undef GL_NV_vertex_array_range
    #define GL_NV_vertex_array_range 634
    #undef GL_NV_vertex_array_range2
    #define GL_NV_vertex_array_range2 635
    #undef GL_NV_vertex_attrib_integer_64bit
    #define GL_NV_vertex_attrib_integer_64bit 636
    #undef GL_NV_vertex_buffer_unified_memory
    #define GL_NV_vertex_buffer_unified_memory 637
    #undef GL_NV_vertex_program
    #define GL_NV_vertex_program 638
    #undef GL_NV_vertex_program1_1
    #define GL_NV_vertex_program1_1 639
    #undef GL_NV_vertex_program2
    #define GL_NV_vertex_program2 640
    #undef GL_NV_vertex_program2_option
    #define GL_NV_vertex_program2_option 641
    #undef GL_NV_vertex_program3
    #define GL_NV_vertex_program3 642
    #undef GL_NV_vertex_program4
    #define GL_NV_vertex_program4 643
    #undef GL_NV_video_capture
    #define GL_NV_video_capture 644
    #undef GL_NV_viewport_array
    #define GL_NV_viewport_array 645
    #undef GL_NV_viewport_array2
    #define GL_NV_viewport_array2 646
    #undef GL_NV_viewport_swizzle
    #define GL_NV_viewport_swizzle 647
    #undef GL_OES_EGL_image
    #define GL_OES_EGL_image 648
    #undef GL_OES_EGL_image_external
    #define GL_OES_EGL_image_external 649
    #undef GL_OES_EGL_image_external_essl3
    #define GL_OES_EGL_image_external_essl3 650
    #undef GL_OES_byte_coordinates
    #define GL_OES_byte_coordinates 651
    #undef GL_OES_compressed_ETC1_RGB8_sub_texture
    #define GL_OES_compressed_ETC1_RGB8_sub_texture 652
    #undef GL_OES_compressed_ETC1_RGB8_texture
    #define GL_OES_compressed_ETC1_RGB8_texture 653
    #undef GL_OES_compressed_paletted_texture
    #define GL_OES_compressed_paletted_texture 654
    #undef GL_OES_copy_image
    #define GL_OES_copy_image 655
    #undef GL_OES_depth24
    #define GL_OES_depth24 656
    #undef GL_OES_depth32
    #define GL_OES_depth32 657
    #undef GL_OES_depth_texture
    #define GL_OES_depth_texture 658
    #undef GL_OES_draw_buffers_indexed
    #define GL_OES_draw_buffers_indexed 659
    #undef GL_OES_draw_elements_base_vertex
    #define GL_OES_draw_elements_base_vertex 660
    #undef GL_OES_element_index_uint
    #define GL_OES_element_index_uint 661
    #undef GL_OES_fbo_render_mipmap
    #define GL_OES_fbo_render_mipmap 662
    #undef GL_OES_fixed_point
    #define GL_OES_fixed_point 663
    #undef GL_OES_fragment_precision_high
    #define GL_OES_fragment_precision_high 664
    #undef GL_OES_geometry_point_size
    #define GL_OES_geometry_point_size 665
    #undef GL_OES_geometry_shader
    #define GL_OES_geometry_shader 666
    #undef GL_OES_get_program_binary
    #define GL_OES_get_program_binary 667
    #undef GL_OES_gpu_shader5
    #define GL_OES_gpu_shader5 668
    #undef GL_OES_mapbuffer
    #define GL_OES_mapbuffer 669
    #undef GL_OES_packed_depth_stencil
    #define GL_OES_packed_depth_stencil 670
    #undef GL_OES_primitive_bounding_box
    #define GL_OES_primitive_bounding_box 671
    #undef GL_OES_query_matrix
    #define GL_OES_query_matrix 672
    #undef GL_OES_read_format
    #define GL_OES_read_format 673
    #undef GL_OES_required_internalformat
    #define GL_OES_required_internalformat 674
    #undef GL_OES_rgb8_rgba8
    #define GL_OES_rgb8_rgba8 675
    #undef GL_OES_sample_shading
    #define GL_OES_sample_shading 676
    #undef GL_OES_sample_variables
    #define GL_OES_sample_variables 677
    #undef GL_OES_shader_image_atomic
    #define GL_OES_shader_image_atomic 678
    #undef GL_OES_shader_io_blocks
    #define GL_OES_shader_io_blocks 679
    #undef GL_OES_shader_multisample_interpolation
    #define GL_OES_shader_multisample_interpolation 680
    #undef GL_OES_single_precision
    #define GL_OES_single_precision 681
    #undef GL_OES_standard_derivatives
    #define GL_OES_standard_derivatives 682
    #undef GL_OES_stencil1
    #define GL_OES_stencil1 683
    #undef GL_OES_stencil4
    #define GL_OES_stencil4 684
    #undef GL_OES_surfaceless_context
    #define GL_OES_surfaceless_context 685
    #undef GL_OES_tessellation_point_size
    #define GL_OES_tessellation_point_size 686
    #undef GL_OES_tessellation_shader
    #define GL_OES_tessellation_shader 687
    #undef GL_OES_texture_3D
    #define GL_OES_texture_3D 688
    #undef GL_OES_texture_border_clamp
    #define GL_OES_texture_border_clamp 689
    #undef GL_OES_texture_buffer
    #define GL_OES_texture_buffer 690
    #undef GL_OES_texture_compression_astc
    #define GL_OES_texture_compression_astc 691
    #undef GL_OES_texture_cube_map_array
    #define GL_OES_texture_cube_map_array 692
    #undef GL_OES_texture_float
    #define GL_OES_texture_float 693
    #undef GL_OES_texture_float_linear
    #define GL_OES_texture_float_linear 694
    #undef GL_OES_texture_half_float
    #define GL_OES_texture_half_float 695
    #undef GL_OES_texture_half_float_linear
    #define GL_OES_texture_half_float_linear 696
    #undef GL_OES_texture_npot
    #define GL_OES_texture_npot 697
    #undef GL_OES_texture_stencil8
    #define GL_OES_texture_stencil8 698
    #undef GL_OES_texture_storage_multisample_2d_array
    #define GL_OES_texture_storage_multisample_2d_array 699
    #undef GL_OES_texture_view
    #define GL_OES_texture_view 700
    #undef GL_OES_vertex_array_object
    #define GL_OES_vertex_array_object 701
    #undef GL_OES_vertex_half_float
    #define GL_OES_vertex_half_float 702
    #undef GL_OES_vertex_type_10_10_10_2
    #define GL_OES_vertex_type_10_10_10_2 703
    #undef GL_OES_viewport_array
    #define GL_OES_viewport_array 704
    #undef GL_OML_interlace
    #define GL_OML_interlace 705
    #undef GL_OML_resample
    #define GL_OML_resample 706
    #undef GL_OML_subsample
    #define GL_OML_subsample 707
    #undef GL_OVR_multiview
    #define GL_OVR_multiview 708
    #undef GL_OVR_multiview2
    #define GL_OVR_multiview2 709
    #undef GL_OVR_multiview_multisampled_render_to_texture
    #define GL_OVR_multiview_multisampled_render_to_texture 710
    #undef GL_PGI_misc_hints
    #define GL_PGI_misc_hints 711
    #undef GL_PGI_vertex_hints
    #define GL_PGI_vertex_hints 712
    #undef GL_QCOM_alpha_test
    #define GL_QCOM_alpha_test 713
    #undef GL_QCOM_binning_control
    #define GL_QCOM_binning_control 714
    #undef GL_QCOM_driver_control
    #define GL_QCOM_driver_control 715
    #undef GL_QCOM_extended_get
    #define GL_QCOM_extended_get 716
    #undef GL_QCOM_extended_get2
    #define GL_QCOM_extended_get2 717
    #undef GL_QCOM_framebuffer_foveated
    #define GL_QCOM_framebuffer_foveated 718
    #undef GL_QCOM_perfmon_global_mode
    #define GL_QCOM_perfmon_global_mode 719
    #undef GL_QCOM_shader_framebuffer_fetch_noncoherent
    #define GL_QCOM_shader_framebuffer_fetch_noncoherent 720
    #undef GL_QCOM_tiled_rendering
    #define GL_QCOM_tiled_rendering 721
    #undef GL_QCOM_writeonly_rendering
    #define GL_QCOM_writeonly_rendering 722
    #undef GL_REND_screen_coordinates
    #define GL_REND_screen_coordinates 723
    #undef GL_S3_s3tc
    #define GL_S3_s3tc 724
    #undef GL_SGIS_detail_texture
    #define GL_SGIS_detail_texture 725
    #undef GL_SGIS_fog_function
    #define GL_SGIS_fog_function 726
    #undef GL_SGIS_generate_mipmap
    #define GL_SGIS_generate_mipmap 727
    #undef GL_SGIS_multisample
    #define GL_SGIS_multisample 728
    #undef GL_SGIS_pixel_texture
    #define GL_SGIS_pixel_texture 729
    #undef GL_SGIS_point_line_texgen
    #define GL_SGIS_point_line_texgen 730
    #undef GL_SGIS_point_parameters
    #define GL_SGIS_point_parameters 731
    #undef GL_SGIS_sharpen_texture
    #define GL_SGIS_sharpen_texture 732
    #undef GL_SGIS_texture4D
    #define GL_SGIS_texture4D 733
    #undef GL_SGIS_texture_border_clamp
    #define GL_SGIS_texture_border_clamp 734
    #undef GL_SGIS_texture_color_mask
    #define GL_SGIS_texture_color_mask 735
    #undef GL_SGIS_texture_edge_clamp
    #define GL_SGIS_texture_edge_clamp 736
    #undef GL_SGIS_texture_filter4
    #define GL_SGIS_texture_filter4 737
    #undef GL_SGIS_texture_lod
    #define GL_SGIS_texture_lod 738
    #undef GL_SGIS_texture_select
    #define GL_SGIS_texture_select 739
    #undef GL_SGIX_async
    #define GL_SGIX_async 740
    #undef GL_SGIX_async_histogram
    #define GL_SGIX_async_histogram 741
    #undef GL_SGIX_async_pixel
    #define GL_SGIX_async_pixel 742
    #undef GL_SGIX_blend_alpha_minmax
    #define GL_SGIX_blend_alpha_minmax 743
    #undef GL_SGIX_calligraphic_fragment
    #define GL_SGIX_calligraphic_fragment 744
    #undef GL_SGIX_clipmap
    #define GL_SGIX_clipmap 745
    #undef GL_SGIX_convolution_accuracy
    #define GL_SGIX_convolution_accuracy 746
    #undef GL_SGIX_depth_pass_instrument
    #define GL_SGIX_depth_pass_instrument 747
    #undef GL_SGIX_depth_texture
    #define GL_SGIX_depth_texture 748
    #undef GL_SGIX_flush_raster
    #define GL_SGIX_flush_raster 749
    #undef GL_SGIX_fog_offset
    #define GL_SGIX_fog_offset 750
    #undef GL_SGIX_fragment_lighting
    #define GL_SGIX_fragment_lighting 751
    #undef GL_SGIX_framezoom
    #define GL_SGIX_framezoom 752
    #undef GL_SGIX_igloo_interface
    #define GL_SGIX_igloo_interface 753
    #undef GL_SGIX_instruments
    #define GL_SGIX_instruments 754
    #undef GL_SGIX_interlace
    #define GL_SGIX_interlace 755
    #undef GL_SGIX_ir_instrument1
    #define GL_SGIX_ir_instrument1 756
    #undef GL_SGIX_list_priority
    #define GL_SGIX_list_priority 757
    #undef GL_SGIX_pixel_texture
    #define GL_SGIX_pixel_texture 758
    #undef GL_SGIX_pixel_tiles
    #define GL_SGIX_pixel_tiles 759
    #undef GL_SGIX_polynomial_ffd
    #define GL_SGIX_polynomial_ffd 760
    #undef GL_SGIX_reference_plane
    #define GL_SGIX_reference_plane 761
    #undef GL_SGIX_resample
    #define GL_SGIX_resample 762
    #undef GL_SGIX_scalebias_hint
    #define GL_SGIX_scalebias_hint 763
    #undef GL_SGIX_shadow
    #define GL_SGIX_shadow 764
    #undef GL_SGIX_shadow_ambient
    #define GL_SGIX_shadow_ambient 765
    #undef GL_SGIX_sprite
    #define GL_SGIX_sprite 766
    #undef GL_SGIX_subsample
    #define GL_SGIX_subsample 767
    #undef GL_SGIX_tag_sample_buffer
    #define GL_SGIX_tag_sample_buffer 768
    #undef GL_SGIX_texture_add_env
    #define GL_SGIX_texture_add_env 769
    #undef GL_SGIX_texture_coordinate_clamp
    #define GL_SGIX_texture_coordinate_clamp 770
    #undef GL_SGIX_texture_lod_bias
    #define GL_SGIX_texture_lod_bias 771
    #undef GL_SGIX_texture_multi_buffer
    #define GL_SGIX_texture_multi_buffer 772
    #undef GL_SGIX_texture_scale_bias
    #define GL_SGIX_texture_scale_bias 773
    #undef GL_SGIX_vertex_preclip
    #define GL_SGIX_vertex_preclip 774
    #undef GL_SGIX_ycrcb
    #define GL_SGIX_ycrcb 775
    #undef GL_SGIX_ycrcb_subsample
    #define GL_SGIX_ycrcb_subsample 776
    #undef GL_SGIX_ycrcba
    #define GL_SGIX_ycrcba 777
    #undef GL_SGI_color_matrix
    #define GL_SGI_color_matrix 778
    #undef GL_SGI_color_table
    #define GL_SGI_color_table 779
    #undef GL_SGI_texture_color_table
    #define GL_SGI_texture_color_table 780
    #undef GL_SUNX_constant_data
    #define GL_SUNX_constant_data 781
    #undef GL_SUN_convolution_border_modes
    #define GL_SUN_convolution_border_modes 782
    #undef GL_SUN_global_alpha
    #define GL_SUN_global_alpha 783
    #undef GL_SUN_mesh_array
    #define GL_SUN_mesh_array 784
    #undef GL_SUN_slice_accum
    #define GL_SUN_slice_accum 785
    #undef GL_SUN_triangle_list
    #define GL_SUN_triangle_list 786
    #undef GL_SUN_vertex
    #define GL_SUN_vertex 787
    #undef GL_VIV_shader_binary
    #define GL_VIV_shader_binary 788
    #undef GL_WIN_phong_shading
    #define GL_WIN_phong_shading 789
    #undef GL_WIN_specular_fog
    #define GL_WIN_specular_fog 790

#ifdef __cplusplus
extern "C" {
#endif

/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 */
bool mutGLInit();

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call mutGLInit() instead.
 */
void mutGLShutdown();

/*!
     Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.

     Usage example:

     \code
     if(mutGLSupport(GL_VERSION_3_0) || mutGLSupport(GL_ES_VERSION_3_0))
     {
         void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
         std::copy(buffer.begin(), buffer.end(), pMapped);
         glUnmapBuffer(target);
     }
     else if (mutGLSupport(GL_EXT_map_buffer_range) && mutGLSupport(GL_OES_mapbuffer)
     {
         void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
         std::copy(buffer.begin(), buffer.end(), pMapped);
         glUnmapBufferOES(target);
     }
     else
     {
         glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
     }
     \endcode
 */
MUT_FORCE_INLINE bool mutGLSupport(size_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         mutGLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         mutGLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note mutGLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using mutGLCheckErrorDebug instead of mutGLCheckError so that the production
     build won't be impacted. If you want to use mutGLCheckError, make sure it is not called
     during time critical code path.
 */
void _mutGLCheckError(const char* fileName, int lineNumber);
#if !defined(mutGLCheckError)
    #define mutGLCheckError(x) x; _mutGLCheckError(__FILE__, __LINE__)
#endif
#if !defined(mutGLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define mutGLCheckErrorDebug(x) x; _mutGLCheckError(__FILE__, __LINE__)
    #else
        #define mutGLCheckErrorDebug(x) x
    #endif
#endif


#if MUT_GL_WRANGLER_ENABLED
/* Type definitions */
typedef int8_t GLbyte;
typedef float GLclampf;
typedef int32_t GLfixed;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef void GLvoid;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef uint32_t GLenum;
typedef uint32_t GLuint;
typedef char GLchar;
typedef float GLfloat;
typedef intptr_t GLsizeiptr;
typedef intptr_t GLintptr;
typedef uint32_t GLbitfield;
typedef int32_t GLint;
typedef uint8_t GLboolean;
typedef int32_t GLsizei;
typedef uint8_t GLubyte;
typedef uint16_t GLhalf;
typedef void *GLeglImageOES;
typedef void *GLeglClientBufferEXT;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef double GLdouble;
typedef double GLclampd;
typedef uint16_t GLhalfARB;
typedef uint32_t GLhandleARB;
typedef char GLcharARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef ptrdiff_t GLintptrARB;
typedef uint16_t GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
    
/* Function pointer type definitions */
typedef void (*GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (*GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef void (*GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (*GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (*GLVULKANPROCNV)(void);
    
/* Data structures */
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
#endif

typedef struct MutGLAPIConfig
{
    bool        bIsGLES;
    const char* pRenderer;
    const char* pVendor;
    const char* pVersion;
    int32_t     nVersionMajor;
    int32_t     nVersionMinor;
    const char* extensions[578];
    size_t      extensionsCount;
    const char* pShadingLanguageVersion;
    int32_t     nShadingLanguageVersionMajor;
    int32_t     nShadingLanguageVersionMinor;
    bool        supportedExtensions[791];

#if MUT_GL_WRANGLER_ENABLED
    /* GL function pointers */
    void (MUT_STD_CALL *mutActiveShaderProgram)(GLuint pipeline, GLuint program);
    void (MUT_STD_CALL *mutActiveTexture)(GLenum texture);
    void (MUT_STD_CALL *mutAttachShader)(GLuint program, GLuint shader);
    void (MUT_STD_CALL *mutBeginConditionalRender)(GLuint id, GLenum mode);
    void (MUT_STD_CALL *mutBeginQuery)(GLenum target, GLuint id);
    void (MUT_STD_CALL *mutBeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
    void (MUT_STD_CALL *mutBeginTransformFeedback)(GLenum primitiveMode);
    void (MUT_STD_CALL *mutBindAttribLocation)(GLuint program, GLuint index, const GLchar *name);
    void (MUT_STD_CALL *mutBindBuffer)(GLenum target, GLuint buffer);
    void (MUT_STD_CALL *mutBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
    void (MUT_STD_CALL *mutBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutBindBuffersBase)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
    void (MUT_STD_CALL *mutBindBuffersRange)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
    void (MUT_STD_CALL *mutBindFragDataLocation)(GLuint program, GLuint color, const GLchar *name);
    void (MUT_STD_CALL *mutBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
    void (MUT_STD_CALL *mutBindFramebuffer)(GLenum target, GLuint framebuffer);
    void (MUT_STD_CALL *mutBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
    void (MUT_STD_CALL *mutBindImageTextures)(GLuint first, GLsizei count, const GLuint *textures);
    void (MUT_STD_CALL *mutBindProgramPipeline)(GLuint pipeline);
    void (MUT_STD_CALL *mutBindRenderbuffer)(GLenum target, GLuint renderbuffer);
    void (MUT_STD_CALL *mutBindSampler)(GLuint unit, GLuint sampler);
    void (MUT_STD_CALL *mutBindSamplers)(GLuint first, GLsizei count, const GLuint *samplers);
    void (MUT_STD_CALL *mutBindTexture)(GLenum target, GLuint texture);
    void (MUT_STD_CALL *mutBindTextureUnit)(GLuint unit, GLuint texture);
    void (MUT_STD_CALL *mutBindTextures)(GLuint first, GLsizei count, const GLuint *textures);
    void (MUT_STD_CALL *mutBindTransformFeedback)(GLenum target, GLuint id);
    void (MUT_STD_CALL *mutBindVertexArray)(GLuint array);
    void (MUT_STD_CALL *mutBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    void (MUT_STD_CALL *mutBindVertexBuffers)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
    void (MUT_STD_CALL *mutBlendBarrier)(void);
    void (MUT_STD_CALL *mutBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    void (MUT_STD_CALL *mutBlendEquation)(GLenum mode);
    void (MUT_STD_CALL *mutBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
    void (MUT_STD_CALL *mutBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    void (MUT_STD_CALL *mutBlendEquationi)(GLuint buf, GLenum mode);
    void (MUT_STD_CALL *mutBlendFunc)(GLenum sfactor, GLenum dfactor);
    void (MUT_STD_CALL *mutBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    void (MUT_STD_CALL *mutBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    void (MUT_STD_CALL *mutBlendFunci)(GLuint buf, GLenum src, GLenum dst);
    void (MUT_STD_CALL *mutBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    void (MUT_STD_CALL *mutBlitNamedFramebuffer)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    void (MUT_STD_CALL *mutBufferData)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
    void (MUT_STD_CALL *mutBufferStorage)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
    void (MUT_STD_CALL *mutBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
    GLenum (MUT_STD_CALL *mutCheckFramebufferStatus)(GLenum target);
    GLenum (MUT_STD_CALL *mutCheckNamedFramebufferStatus)(GLuint framebuffer, GLenum target);
    void (MUT_STD_CALL *mutClampColor)(GLenum target, GLenum clamp);
    void (MUT_STD_CALL *mutClear)(GLbitfield mask);
    void (MUT_STD_CALL *mutClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    void (MUT_STD_CALL *mutClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
    void (MUT_STD_CALL *mutClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint *value);
    void (MUT_STD_CALL *mutClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint *value);
    void (MUT_STD_CALL *mutClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    void (MUT_STD_CALL *mutClearDepth)(GLdouble depth);
    void (MUT_STD_CALL *mutClearDepthf)(GLfloat d);
    void (MUT_STD_CALL *mutClearNamedBufferData)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearNamedBufferSubData)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearNamedFramebufferfi)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    void (MUT_STD_CALL *mutClearNamedFramebufferfv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
    void (MUT_STD_CALL *mutClearNamedFramebufferiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
    void (MUT_STD_CALL *mutClearNamedFramebufferuiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
    void (MUT_STD_CALL *mutClearStencil)(GLint s);
    void (MUT_STD_CALL *mutClearTexImage)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClientActiveTexture)(GLenum texture);
    GLenum (MUT_STD_CALL *mutClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
    void (MUT_STD_CALL *mutClipControl)(GLenum origin, GLenum depth);
    void (MUT_STD_CALL *mutColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    void (MUT_STD_CALL *mutColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    void (MUT_STD_CALL *mutColorP3ui)(GLenum type, GLuint color);
    void (MUT_STD_CALL *mutColorP3uiv)(GLenum type, const GLuint *color);
    void (MUT_STD_CALL *mutColorP4ui)(GLenum type, GLuint color);
    void (MUT_STD_CALL *mutColorP4uiv)(GLenum type, const GLuint *color);
    void (MUT_STD_CALL *mutCompileShader)(GLuint shader);
    void (MUT_STD_CALL *mutCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    void (MUT_STD_CALL *mutCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    void (MUT_STD_CALL *mutCopyNamedBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    void (MUT_STD_CALL *mutCopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    void (MUT_STD_CALL *mutCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    void (MUT_STD_CALL *mutCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCreateBuffers)(GLsizei n, GLuint *buffers);
    void (MUT_STD_CALL *mutCreateFramebuffers)(GLsizei n, GLuint *framebuffers);
    GLuint (MUT_STD_CALL *mutCreateProgram)(void);
    void (MUT_STD_CALL *mutCreateProgramPipelines)(GLsizei n, GLuint *pipelines);
    void (MUT_STD_CALL *mutCreateQueries)(GLenum target, GLsizei n, GLuint *ids);
    void (MUT_STD_CALL *mutCreateRenderbuffers)(GLsizei n, GLuint *renderbuffers);
    void (MUT_STD_CALL *mutCreateSamplers)(GLsizei n, GLuint *samplers);
    GLuint (MUT_STD_CALL *mutCreateShader)(GLenum type);
    GLuint (MUT_STD_CALL *mutCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const *strings);
    void (MUT_STD_CALL *mutCreateTextures)(GLenum target, GLsizei n, GLuint *textures);
    void (MUT_STD_CALL *mutCreateTransformFeedbacks)(GLsizei n, GLuint *ids);
    void (MUT_STD_CALL *mutCreateVertexArrays)(GLsizei n, GLuint *arrays);
    void (MUT_STD_CALL *mutCullFace)(GLenum mode);
    void (MUT_STD_CALL *mutDebugMessageCallback)(GLDEBUGPROC callback, const void *userParam);
    void (MUT_STD_CALL *mutDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    void (MUT_STD_CALL *mutDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    void (MUT_STD_CALL *mutDeleteBuffers)(GLsizei n, const GLuint *buffers);
    void (MUT_STD_CALL *mutDeleteFramebuffers)(GLsizei n, const GLuint *framebuffers);
    void (MUT_STD_CALL *mutDeleteProgram)(GLuint program);
    void (MUT_STD_CALL *mutDeleteProgramPipelines)(GLsizei n, const GLuint *pipelines);
    void (MUT_STD_CALL *mutDeleteQueries)(GLsizei n, const GLuint *ids);
    void (MUT_STD_CALL *mutDeleteRenderbuffers)(GLsizei n, const GLuint *renderbuffers);
    void (MUT_STD_CALL *mutDeleteSamplers)(GLsizei count, const GLuint *samplers);
    void (MUT_STD_CALL *mutDeleteShader)(GLuint shader);
    void (MUT_STD_CALL *mutDeleteSync)(GLsync sync);
    void (MUT_STD_CALL *mutDeleteTextures)(GLsizei n, const GLuint *textures);
    void (MUT_STD_CALL *mutDeleteTransformFeedbacks)(GLsizei n, const GLuint *ids);
    void (MUT_STD_CALL *mutDeleteVertexArrays)(GLsizei n, const GLuint *arrays);
    void (MUT_STD_CALL *mutDepthFunc)(GLenum func);
    void (MUT_STD_CALL *mutDepthMask)(GLboolean flag);
    void (MUT_STD_CALL *mutDepthRange)(GLdouble zNear, GLdouble zFar);
    void (MUT_STD_CALL *mutDepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble *v);
    void (MUT_STD_CALL *mutDepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f);
    void (MUT_STD_CALL *mutDepthRangef)(GLfloat n, GLfloat f);
    void (MUT_STD_CALL *mutDetachShader)(GLuint program, GLuint shader);
    void (MUT_STD_CALL *mutDisable)(GLenum cap);
    void (MUT_STD_CALL *mutDisableVertexArrayAttrib)(GLuint vaobj, GLuint index);
    void (MUT_STD_CALL *mutDisableVertexAttribArray)(GLuint index);
    void (MUT_STD_CALL *mutDisablei)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
    void (MUT_STD_CALL *mutDispatchComputeIndirect)(GLintptr indirect);
    void (MUT_STD_CALL *mutDrawArrays)(GLenum mode, GLint first, GLsizei count);
    void (MUT_STD_CALL *mutDrawArraysIndirect)(GLenum mode, const void *indirect);
    void (MUT_STD_CALL *mutDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
    void (MUT_STD_CALL *mutDrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
    void (MUT_STD_CALL *mutDrawBuffer)(GLenum buf);
    void (MUT_STD_CALL *mutDrawBuffers)(GLsizei n, const GLenum *bufs);
    void (MUT_STD_CALL *mutDrawElements)(GLenum mode, GLsizei count, GLenum type, const void *indices);
    void (MUT_STD_CALL *mutDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    void (MUT_STD_CALL *mutDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect);
    void (MUT_STD_CALL *mutDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
    void (MUT_STD_CALL *mutDrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
    void (MUT_STD_CALL *mutDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
    void (MUT_STD_CALL *mutDrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
    void (MUT_STD_CALL *mutDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
    void (MUT_STD_CALL *mutDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    void (MUT_STD_CALL *mutDrawTransformFeedback)(GLenum mode, GLuint id);
    void (MUT_STD_CALL *mutDrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount);
    void (MUT_STD_CALL *mutDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
    void (MUT_STD_CALL *mutDrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
    void (MUT_STD_CALL *mutEnable)(GLenum cap);
    void (MUT_STD_CALL *mutEnableVertexArrayAttrib)(GLuint vaobj, GLuint index);
    void (MUT_STD_CALL *mutEnableVertexAttribArray)(GLuint index);
    void (MUT_STD_CALL *mutEnablei)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutEndConditionalRender)(void);
    void (MUT_STD_CALL *mutEndQuery)(GLenum target);
    void (MUT_STD_CALL *mutEndQueryIndexed)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutEndTransformFeedback)(void);
    GLsync (MUT_STD_CALL *mutFenceSync)(GLenum condition, GLbitfield flags);
    void (MUT_STD_CALL *mutFinish)(void);
    void (MUT_STD_CALL *mutFlush)(void);
    void (MUT_STD_CALL *mutFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
    void (MUT_STD_CALL *mutFlushMappedNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length);
    void (MUT_STD_CALL *mutFogCoordPointer)(GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutFogCoordd)(GLdouble coord);
    void (MUT_STD_CALL *mutFogCoorddv)(const GLdouble *coord);
    void (MUT_STD_CALL *mutFogCoordf)(GLfloat coord);
    void (MUT_STD_CALL *mutFogCoordfv)(const GLfloat *coord);
    void (MUT_STD_CALL *mutFramebufferParameteri)(GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    void (MUT_STD_CALL *mutFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    void (MUT_STD_CALL *mutFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    void (MUT_STD_CALL *mutFrontFace)(GLenum mode);
    void (MUT_STD_CALL *mutGenBuffers)(GLsizei n, GLuint *buffers);
    void (MUT_STD_CALL *mutGenFramebuffers)(GLsizei n, GLuint *framebuffers);
    void (MUT_STD_CALL *mutGenProgramPipelines)(GLsizei n, GLuint *pipelines);
    void (MUT_STD_CALL *mutGenQueries)(GLsizei n, GLuint *ids);
    void (MUT_STD_CALL *mutGenRenderbuffers)(GLsizei n, GLuint *renderbuffers);
    void (MUT_STD_CALL *mutGenSamplers)(GLsizei count, GLuint *samplers);
    void (MUT_STD_CALL *mutGenTextures)(GLsizei n, GLuint *textures);
    void (MUT_STD_CALL *mutGenTransformFeedbacks)(GLsizei n, GLuint *ids);
    void (MUT_STD_CALL *mutGenVertexArrays)(GLsizei n, GLuint *arrays);
    void (MUT_STD_CALL *mutGenerateMipmap)(GLenum target);
    void (MUT_STD_CALL *mutGenerateTextureMipmap)(GLuint texture);
    void (MUT_STD_CALL *mutGetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    void (MUT_STD_CALL *mutGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
    void (MUT_STD_CALL *mutGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
    void (MUT_STD_CALL *mutGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
    void (MUT_STD_CALL *mutGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    void (MUT_STD_CALL *mutGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
    void (MUT_STD_CALL *mutGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
    void (MUT_STD_CALL *mutGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
    GLint (MUT_STD_CALL *mutGetAttribLocation)(GLuint program, const GLchar *name);
    void (MUT_STD_CALL *mutGetBooleani_v)(GLenum target, GLuint index, GLboolean *data);
    void (MUT_STD_CALL *mutGetBooleanv)(GLenum pname, GLboolean *data);
    void (MUT_STD_CALL *mutGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 *params);
    void (MUT_STD_CALL *mutGetBufferParameteriv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetBufferPointerv)(GLenum target, GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
    void (MUT_STD_CALL *mutGetCompressedTexImage)(GLenum target, GLint level, void *img);
    void (MUT_STD_CALL *mutGetCompressedTextureImage)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
    void (MUT_STD_CALL *mutGetCompressedTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
    GLuint (MUT_STD_CALL *mutGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    void (MUT_STD_CALL *mutGetDoublei_v)(GLenum target, GLuint index, GLdouble *data);
    void (MUT_STD_CALL *mutGetDoublev)(GLenum pname, GLdouble *data);
    GLenum (MUT_STD_CALL *mutGetError)(void);
    void (MUT_STD_CALL *mutGetFloati_v)(GLenum target, GLuint index, GLfloat *data);
    void (MUT_STD_CALL *mutGetFloatv)(GLenum pname, GLfloat *data);
    GLint (MUT_STD_CALL *mutGetFragDataIndex)(GLuint program, const GLchar *name);
    GLint (MUT_STD_CALL *mutGetFragDataLocation)(GLuint program, const GLchar *name);
    void (MUT_STD_CALL *mutGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint *params);
    GLenum (MUT_STD_CALL *mutGetGraphicsResetStatus)(void);
    void (MUT_STD_CALL *mutGetInteger64i_v)(GLenum target, GLuint index, GLint64 *data);
    void (MUT_STD_CALL *mutGetInteger64v)(GLenum pname, GLint64 *data);
    void (MUT_STD_CALL *mutGetIntegeri_v)(GLenum target, GLuint index, GLint *data);
    void (MUT_STD_CALL *mutGetIntegerv)(GLenum pname, GLint *data);
    void (MUT_STD_CALL *mutGetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
    void (MUT_STD_CALL *mutGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
    void (MUT_STD_CALL *mutGetMultisamplefv)(GLenum pname, GLuint index, GLfloat *val);
    void (MUT_STD_CALL *mutGetNamedBufferParameteri64v)(GLuint buffer, GLenum pname, GLint64 *params);
    void (MUT_STD_CALL *mutGetNamedBufferParameteriv)(GLuint buffer, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNamedBufferPointerv)(GLuint buffer, GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
    void (MUT_STD_CALL *mutGetNamedFramebufferAttachmentParameteriv)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNamedFramebufferParameteriv)(GLuint framebuffer, GLenum pname, GLint *param);
    void (MUT_STD_CALL *mutGetNamedRenderbufferParameteriv)(GLuint renderbuffer, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
    void (MUT_STD_CALL *mutGetObjectPtrLabel)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
    void (MUT_STD_CALL *mutGetPointerv)(GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
    void (MUT_STD_CALL *mutGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    void (MUT_STD_CALL *mutGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    void (MUT_STD_CALL *mutGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint *params);
    GLuint (MUT_STD_CALL *mutGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar *name);
    GLint (MUT_STD_CALL *mutGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar *name);
    GLint (MUT_STD_CALL *mutGetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar *name);
    void (MUT_STD_CALL *mutGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    void (MUT_STD_CALL *mutGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
    void (MUT_STD_CALL *mutGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
    void (MUT_STD_CALL *mutGetProgramiv)(GLuint program, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetQueryBufferObjecti64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    void (MUT_STD_CALL *mutGetQueryBufferObjectiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    void (MUT_STD_CALL *mutGetQueryBufferObjectui64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    void (MUT_STD_CALL *mutGetQueryBufferObjectuiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    void (MUT_STD_CALL *mutGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 *params);
    void (MUT_STD_CALL *mutGetQueryObjectiv)(GLuint id, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 *params);
    void (MUT_STD_CALL *mutGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetQueryiv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    void (MUT_STD_CALL *mutGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
    void (MUT_STD_CALL *mutGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
    void (MUT_STD_CALL *mutGetShaderiv)(GLuint shader, GLenum pname, GLint *params);
    const GLubyte *(MUT_STD_CALL *mutGetString)(GLenum name);
    const GLubyte *(MUT_STD_CALL *mutGetStringi)(GLenum name, GLuint index);
    GLuint (MUT_STD_CALL *mutGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar *name);
    GLint (MUT_STD_CALL *mutGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar *name);
    void (MUT_STD_CALL *mutGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
    void (MUT_STD_CALL *mutGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    void (MUT_STD_CALL *mutGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTexParameterIiv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetTexParameterfv)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetTexParameteriv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTextureImage)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    void (MUT_STD_CALL *mutGetTextureLevelParameterfv)(GLuint texture, GLint level, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetTextureLevelParameteriv)(GLuint texture, GLint level, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTextureParameterIiv)(GLuint texture, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTextureParameterIuiv)(GLuint texture, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetTextureParameterfv)(GLuint texture, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetTextureParameteriv)(GLuint texture, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    void (MUT_STD_CALL *mutGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    void (MUT_STD_CALL *mutGetTransformFeedbacki64_v)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
    void (MUT_STD_CALL *mutGetTransformFeedbacki_v)(GLuint xfb, GLenum pname, GLuint index, GLint *param);
    void (MUT_STD_CALL *mutGetTransformFeedbackiv)(GLuint xfb, GLenum pname, GLint *param);
    GLuint (MUT_STD_CALL *mutGetUniformBlockIndex)(GLuint program, const GLchar *uniformBlockName);
    void (MUT_STD_CALL *mutGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const *uniformNames, GLuint *uniformIndices);
    GLint (MUT_STD_CALL *mutGetUniformLocation)(GLuint program, const GLchar *name);
    void (MUT_STD_CALL *mutGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint *params);
    void (MUT_STD_CALL *mutGetUniformdv)(GLuint program, GLint location, GLdouble *params);
    void (MUT_STD_CALL *mutGetUniformfv)(GLuint program, GLint location, GLfloat *params);
    void (MUT_STD_CALL *mutGetUniformiv)(GLuint program, GLint location, GLint *params);
    void (MUT_STD_CALL *mutGetUniformuiv)(GLuint program, GLint location, GLuint *params);
    void (MUT_STD_CALL *mutGetVertexArrayIndexed64iv)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
    void (MUT_STD_CALL *mutGetVertexArrayIndexediv)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
    void (MUT_STD_CALL *mutGetVertexArrayiv)(GLuint vaobj, GLenum pname, GLint *param);
    void (MUT_STD_CALL *mutGetVertexAttribIiv)(GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetVertexAttribPointerv)(GLuint index, GLenum pname, void **pointer);
    void (MUT_STD_CALL *mutGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetVertexAttribiv)(GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetnColorTable)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
    void (MUT_STD_CALL *mutGetnCompressedTexImage)(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
    void (MUT_STD_CALL *mutGetnConvolutionFilter)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
    void (MUT_STD_CALL *mutGetnHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
    void (MUT_STD_CALL *mutGetnMapdv)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
    void (MUT_STD_CALL *mutGetnMapfv)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
    void (MUT_STD_CALL *mutGetnMapiv)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
    void (MUT_STD_CALL *mutGetnMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
    void (MUT_STD_CALL *mutGetnPixelMapfv)(GLenum map, GLsizei bufSize, GLfloat *values);
    void (MUT_STD_CALL *mutGetnPixelMapuiv)(GLenum map, GLsizei bufSize, GLuint *values);
    void (MUT_STD_CALL *mutGetnPixelMapusv)(GLenum map, GLsizei bufSize, GLushort *values);
    void (MUT_STD_CALL *mutGetnPolygonStipple)(GLsizei bufSize, GLubyte *pattern);
    void (MUT_STD_CALL *mutGetnSeparableFilter)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
    void (MUT_STD_CALL *mutGetnTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    void (MUT_STD_CALL *mutGetnUniformdv)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
    void (MUT_STD_CALL *mutGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    void (MUT_STD_CALL *mutGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
    void (MUT_STD_CALL *mutGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    void (MUT_STD_CALL *mutHint)(GLenum target, GLenum mode);
    void (MUT_STD_CALL *mutInvalidateBufferData)(GLuint buffer);
    void (MUT_STD_CALL *mutInvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length);
    void (MUT_STD_CALL *mutInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
    void (MUT_STD_CALL *mutInvalidateNamedFramebufferData)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
    void (MUT_STD_CALL *mutInvalidateNamedFramebufferSubData)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutInvalidateTexImage)(GLuint texture, GLint level);
    void (MUT_STD_CALL *mutInvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
    GLboolean (MUT_STD_CALL *mutIsBuffer)(GLuint buffer);
    GLboolean (MUT_STD_CALL *mutIsEnabled)(GLenum cap);
    GLboolean (MUT_STD_CALL *mutIsEnabledi)(GLenum target, GLuint index);
    GLboolean (MUT_STD_CALL *mutIsFramebuffer)(GLuint framebuffer);
    GLboolean (MUT_STD_CALL *mutIsProgram)(GLuint program);
    GLboolean (MUT_STD_CALL *mutIsProgramPipeline)(GLuint pipeline);
    GLboolean (MUT_STD_CALL *mutIsQuery)(GLuint id);
    GLboolean (MUT_STD_CALL *mutIsRenderbuffer)(GLuint renderbuffer);
    GLboolean (MUT_STD_CALL *mutIsSampler)(GLuint sampler);
    GLboolean (MUT_STD_CALL *mutIsShader)(GLuint shader);
    GLboolean (MUT_STD_CALL *mutIsSync)(GLsync sync);
    GLboolean (MUT_STD_CALL *mutIsTexture)(GLuint texture);
    GLboolean (MUT_STD_CALL *mutIsTransformFeedback)(GLuint id);
    GLboolean (MUT_STD_CALL *mutIsVertexArray)(GLuint array);
    void (MUT_STD_CALL *mutLineWidth)(GLfloat width);
    void (MUT_STD_CALL *mutLinkProgram)(GLuint program);
    void (MUT_STD_CALL *mutLoadTransposeMatrixd)(const GLdouble *m);
    void (MUT_STD_CALL *mutLoadTransposeMatrixf)(const GLfloat *m);
    void (MUT_STD_CALL *mutLogicOp)(GLenum opcode);
    void *(MUT_STD_CALL *mutMapBuffer)(GLenum target, GLenum access);
    void *(MUT_STD_CALL *mutMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
    void *(MUT_STD_CALL *mutMapNamedBuffer)(GLuint buffer, GLenum access);
    void *(MUT_STD_CALL *mutMapNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    void (MUT_STD_CALL *mutMemoryBarrier)(GLbitfield barriers);
    void (MUT_STD_CALL *mutMemoryBarrierByRegion)(GLbitfield barriers);
    void (MUT_STD_CALL *mutMinSampleShading)(GLfloat value);
    void (MUT_STD_CALL *mutMultTransposeMatrixd)(const GLdouble *m);
    void (MUT_STD_CALL *mutMultTransposeMatrixf)(const GLfloat *m);
    void (MUT_STD_CALL *mutMultiDrawArrays)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
    void (MUT_STD_CALL *mutMultiDrawArraysIndirect)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiDrawElements)(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei drawcount);
    void (MUT_STD_CALL *mutMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei drawcount, const GLint *basevertex);
    void (MUT_STD_CALL *mutMultiDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiTexCoord1d)(GLenum target, GLdouble s);
    void (MUT_STD_CALL *mutMultiTexCoord1dv)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord1f)(GLenum target, GLfloat s);
    void (MUT_STD_CALL *mutMultiTexCoord1fv)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord1i)(GLenum target, GLint s);
    void (MUT_STD_CALL *mutMultiTexCoord1iv)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord1s)(GLenum target, GLshort s);
    void (MUT_STD_CALL *mutMultiTexCoord1sv)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
    void (MUT_STD_CALL *mutMultiTexCoord2dv)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
    void (MUT_STD_CALL *mutMultiTexCoord2fv)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord2i)(GLenum target, GLint s, GLint t);
    void (MUT_STD_CALL *mutMultiTexCoord2iv)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
    void (MUT_STD_CALL *mutMultiTexCoord2sv)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
    void (MUT_STD_CALL *mutMultiTexCoord3dv)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
    void (MUT_STD_CALL *mutMultiTexCoord3fv)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
    void (MUT_STD_CALL *mutMultiTexCoord3iv)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
    void (MUT_STD_CALL *mutMultiTexCoord3sv)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    void (MUT_STD_CALL *mutMultiTexCoord4dv)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    void (MUT_STD_CALL *mutMultiTexCoord4fv)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
    void (MUT_STD_CALL *mutMultiTexCoord4iv)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
    void (MUT_STD_CALL *mutMultiTexCoord4sv)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoordP1ui)(GLenum texture, GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutMultiTexCoordP1uiv)(GLenum texture, GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutMultiTexCoordP2ui)(GLenum texture, GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutMultiTexCoordP2uiv)(GLenum texture, GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutMultiTexCoordP3ui)(GLenum texture, GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutMultiTexCoordP3uiv)(GLenum texture, GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutMultiTexCoordP4ui)(GLenum texture, GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutMultiTexCoordP4uiv)(GLenum texture, GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutNamedBufferData)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
    void (MUT_STD_CALL *mutNamedBufferStorage)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
    void (MUT_STD_CALL *mutNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    void (MUT_STD_CALL *mutNamedFramebufferDrawBuffer)(GLuint framebuffer, GLenum buf);
    void (MUT_STD_CALL *mutNamedFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
    void (MUT_STD_CALL *mutNamedFramebufferParameteri)(GLuint framebuffer, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutNamedFramebufferReadBuffer)(GLuint framebuffer, GLenum src);
    void (MUT_STD_CALL *mutNamedFramebufferRenderbuffer)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    void (MUT_STD_CALL *mutNamedFramebufferTexture)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutNamedFramebufferTextureLayer)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    void (MUT_STD_CALL *mutNamedRenderbufferStorage)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutNamedRenderbufferStorageMultisample)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutNormalP3ui)(GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutNormalP3uiv)(GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
    void (MUT_STD_CALL *mutObjectPtrLabel)(const void *ptr, GLsizei length, const GLchar *label);
    void (MUT_STD_CALL *mutPatchParameterfv)(GLenum pname, const GLfloat *values);
    void (MUT_STD_CALL *mutPatchParameteri)(GLenum pname, GLint value);
    void (MUT_STD_CALL *mutPauseTransformFeedback)(void);
    void (MUT_STD_CALL *mutPixelStoref)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPixelStorei)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutPointParameterf)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPointParameterfv)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutPointParameteri)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutPointParameteriv)(GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutPointSize)(GLfloat size);
    void (MUT_STD_CALL *mutPolygonMode)(GLenum face, GLenum mode);
    void (MUT_STD_CALL *mutPolygonOffset)(GLfloat factor, GLfloat units);
    void (MUT_STD_CALL *mutPopDebugGroup)(void);
    void (MUT_STD_CALL *mutPrimitiveBoundingBox)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
    void (MUT_STD_CALL *mutPrimitiveRestartIndex)(GLuint index);
    void (MUT_STD_CALL *mutProgramBinary)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
    void (MUT_STD_CALL *mutProgramParameteri)(GLuint program, GLenum pname, GLint value);
    void (MUT_STD_CALL *mutProgramUniform1d)(GLuint program, GLint location, GLdouble v0);
    void (MUT_STD_CALL *mutProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
    void (MUT_STD_CALL *mutProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform1i)(GLuint program, GLint location, GLint v0);
    void (MUT_STD_CALL *mutProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
    void (MUT_STD_CALL *mutProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
    void (MUT_STD_CALL *mutProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
    void (MUT_STD_CALL *mutProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
    void (MUT_STD_CALL *mutProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
    void (MUT_STD_CALL *mutProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
    void (MUT_STD_CALL *mutProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    void (MUT_STD_CALL *mutProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    void (MUT_STD_CALL *mutProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    void (MUT_STD_CALL *mutProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
    void (MUT_STD_CALL *mutProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    void (MUT_STD_CALL *mutProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    void (MUT_STD_CALL *mutProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    void (MUT_STD_CALL *mutProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProvokingVertex)(GLenum mode);
    void (MUT_STD_CALL *mutPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
    void (MUT_STD_CALL *mutQueryCounter)(GLuint id, GLenum target);
    void (MUT_STD_CALL *mutReadBuffer)(GLenum src);
    void (MUT_STD_CALL *mutReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
    void (MUT_STD_CALL *mutReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    void (MUT_STD_CALL *mutReleaseShaderCompiler)(void);
    void (MUT_STD_CALL *mutRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutResumeTransformFeedback)(void);
    void (MUT_STD_CALL *mutSampleCoverage)(GLfloat value, GLboolean invert);
    void (MUT_STD_CALL *mutSampleMaski)(GLuint maskNumber, GLbitfield mask);
    void (MUT_STD_CALL *mutSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint *param);
    void (MUT_STD_CALL *mutSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint *param);
    void (MUT_STD_CALL *mutSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat *param);
    void (MUT_STD_CALL *mutSamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint *param);
    void (MUT_STD_CALL *mutScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutScissorArrayv)(GLuint first, GLsizei count, const GLint *v);
    void (MUT_STD_CALL *mutScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutScissorIndexedv)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
    void (MUT_STD_CALL *mutSecondaryColor3bv)(const GLbyte *v);
    void (MUT_STD_CALL *mutSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
    void (MUT_STD_CALL *mutSecondaryColor3dv)(const GLdouble *v);
    void (MUT_STD_CALL *mutSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
    void (MUT_STD_CALL *mutSecondaryColor3fv)(const GLfloat *v);
    void (MUT_STD_CALL *mutSecondaryColor3i)(GLint red, GLint green, GLint blue);
    void (MUT_STD_CALL *mutSecondaryColor3iv)(const GLint *v);
    void (MUT_STD_CALL *mutSecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
    void (MUT_STD_CALL *mutSecondaryColor3sv)(const GLshort *v);
    void (MUT_STD_CALL *mutSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
    void (MUT_STD_CALL *mutSecondaryColor3ubv)(const GLubyte *v);
    void (MUT_STD_CALL *mutSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
    void (MUT_STD_CALL *mutSecondaryColor3uiv)(const GLuint *v);
    void (MUT_STD_CALL *mutSecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
    void (MUT_STD_CALL *mutSecondaryColor3usv)(const GLushort *v);
    void (MUT_STD_CALL *mutSecondaryColorP3ui)(GLenum type, GLuint color);
    void (MUT_STD_CALL *mutSecondaryColorP3uiv)(GLenum type, const GLuint *color);
    void (MUT_STD_CALL *mutSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutShaderBinary)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
    void (MUT_STD_CALL *mutShaderSource)(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length);
    void (MUT_STD_CALL *mutShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
    void (MUT_STD_CALL *mutStencilFunc)(GLenum func, GLint ref, GLuint mask);
    void (MUT_STD_CALL *mutStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
    void (MUT_STD_CALL *mutStencilMask)(GLuint mask);
    void (MUT_STD_CALL *mutStencilMaskSeparate)(GLenum face, GLuint mask);
    void (MUT_STD_CALL *mutStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
    void (MUT_STD_CALL *mutStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    void (MUT_STD_CALL *mutTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
    void (MUT_STD_CALL *mutTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutTexCoordP1ui)(GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutTexCoordP1uiv)(GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutTexCoordP2ui)(GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutTexCoordP2uiv)(GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutTexCoordP3ui)(GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutTexCoordP3uiv)(GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutTexCoordP4ui)(GLenum type, GLuint coords);
    void (MUT_STD_CALL *mutTexCoordP4uiv)(GLenum type, const GLuint *coords);
    void (MUT_STD_CALL *mutTexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTexParameterIiv)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutTexParameterIuiv)(GLenum target, GLenum pname, const GLuint *params);
    void (MUT_STD_CALL *mutTexParameterf)(GLenum target, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutTexParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutTexParameteri)(GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutTexParameteriv)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutTexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    void (MUT_STD_CALL *mutTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    void (MUT_STD_CALL *mutTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureBarrier)(void);
    void (MUT_STD_CALL *mutTextureBuffer)(GLuint texture, GLenum internalformat, GLuint buffer);
    void (MUT_STD_CALL *mutTextureBufferRange)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutTextureParameterIiv)(GLuint texture, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutTextureParameterIuiv)(GLuint texture, GLenum pname, const GLuint *params);
    void (MUT_STD_CALL *mutTextureParameterf)(GLuint texture, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutTextureParameterfv)(GLuint texture, GLenum pname, const GLfloat *param);
    void (MUT_STD_CALL *mutTextureParameteri)(GLuint texture, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutTextureParameteriv)(GLuint texture, GLenum pname, const GLint *param);
    void (MUT_STD_CALL *mutTextureStorage1D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
    void (MUT_STD_CALL *mutTextureStorage2D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutTextureStorage2DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTextureStorage3D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    void (MUT_STD_CALL *mutTextureStorage3DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
    void (MUT_STD_CALL *mutTransformFeedbackBufferBase)(GLuint xfb, GLuint index, GLuint buffer);
    void (MUT_STD_CALL *mutTransformFeedbackBufferRange)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode);
    void (MUT_STD_CALL *mutUniform1d)(GLint location, GLdouble x);
    void (MUT_STD_CALL *mutUniform1dv)(GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutUniform1f)(GLint location, GLfloat v0);
    void (MUT_STD_CALL *mutUniform1fv)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform1i)(GLint location, GLint v0);
    void (MUT_STD_CALL *mutUniform1iv)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform1ui)(GLint location, GLuint v0);
    void (MUT_STD_CALL *mutUniform1uiv)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniform2d)(GLint location, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutUniform2dv)(GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutUniform2f)(GLint location, GLfloat v0, GLfloat v1);
    void (MUT_STD_CALL *mutUniform2fv)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform2i)(GLint location, GLint v0, GLint v1);
    void (MUT_STD_CALL *mutUniform2iv)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform2ui)(GLint location, GLuint v0, GLuint v1);
    void (MUT_STD_CALL *mutUniform2uiv)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutUniform3dv)(GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    void (MUT_STD_CALL *mutUniform3fv)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
    void (MUT_STD_CALL *mutUniform3iv)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
    void (MUT_STD_CALL *mutUniform3uiv)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutUniform4dv)(GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    void (MUT_STD_CALL *mutUniform4fv)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    void (MUT_STD_CALL *mutUniform4iv)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    void (MUT_STD_CALL *mutUniform4uiv)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
    void (MUT_STD_CALL *mutUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint *indices);
    GLboolean (MUT_STD_CALL *mutUnmapBuffer)(GLenum target);
    GLboolean (MUT_STD_CALL *mutUnmapNamedBuffer)(GLuint buffer);
    void (MUT_STD_CALL *mutUseProgram)(GLuint program);
    void (MUT_STD_CALL *mutUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
    void (MUT_STD_CALL *mutValidateProgram)(GLuint program);
    void (MUT_STD_CALL *mutValidateProgramPipeline)(GLuint pipeline);
    void (MUT_STD_CALL *mutVertexArrayAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    void (MUT_STD_CALL *mutVertexArrayAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexArrayAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexArrayAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexArrayBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
    void (MUT_STD_CALL *mutVertexArrayElementBuffer)(GLuint vaobj, GLuint buffer);
    void (MUT_STD_CALL *mutVertexArrayVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    void (MUT_STD_CALL *mutVertexArrayVertexBuffers)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
    void (MUT_STD_CALL *mutVertexAttrib1d)(GLuint index, GLdouble x);
    void (MUT_STD_CALL *mutVertexAttrib1dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib1f)(GLuint index, GLfloat x);
    void (MUT_STD_CALL *mutVertexAttrib1fv)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib1s)(GLuint index, GLshort x);
    void (MUT_STD_CALL *mutVertexAttrib1sv)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutVertexAttrib2dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutVertexAttrib2fv)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib2s)(GLuint index, GLshort x, GLshort y);
    void (MUT_STD_CALL *mutVertexAttrib2sv)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutVertexAttrib3dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutVertexAttrib3fv)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
    void (MUT_STD_CALL *mutVertexAttrib3sv)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib4Nbv)(GLuint index, const GLbyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4Niv)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttrib4Nsv)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    void (MUT_STD_CALL *mutVertexAttrib4Nubv)(GLuint index, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4Nuiv)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttrib4Nusv)(GLuint index, const GLushort *v);
    void (MUT_STD_CALL *mutVertexAttrib4bv)(GLuint index, const GLbyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutVertexAttrib4dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutVertexAttrib4fv)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib4iv)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    void (MUT_STD_CALL *mutVertexAttrib4sv)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib4ubv)(GLuint index, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4uiv)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttrib4usv)(GLuint index, const GLushort *v);
    void (MUT_STD_CALL *mutVertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
    void (MUT_STD_CALL *mutVertexAttribDivisor)(GLuint index, GLuint divisor);
    void (MUT_STD_CALL *mutVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexAttribI1i)(GLuint index, GLint x);
    void (MUT_STD_CALL *mutVertexAttribI1iv)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI1ui)(GLuint index, GLuint x);
    void (MUT_STD_CALL *mutVertexAttribI1uiv)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI2i)(GLuint index, GLint x, GLint y);
    void (MUT_STD_CALL *mutVertexAttribI2iv)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
    void (MUT_STD_CALL *mutVertexAttribI2uiv)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
    void (MUT_STD_CALL *mutVertexAttribI3iv)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
    void (MUT_STD_CALL *mutVertexAttribI3uiv)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI4bv)(GLuint index, const GLbyte *v);
    void (MUT_STD_CALL *mutVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
    void (MUT_STD_CALL *mutVertexAttribI4iv)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI4sv)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttribI4ubv)(GLuint index, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    void (MUT_STD_CALL *mutVertexAttribI4uiv)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI4usv)(GLuint index, const GLushort *v);
    void (MUT_STD_CALL *mutVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexAttribL1d)(GLuint index, GLdouble x);
    void (MUT_STD_CALL *mutVertexAttribL1dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribL2d)(GLuint index, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutVertexAttribL2dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutVertexAttribL3dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutVertexAttribL4dv)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    void (MUT_STD_CALL *mutVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    void (MUT_STD_CALL *mutVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    void (MUT_STD_CALL *mutVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    void (MUT_STD_CALL *mutVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    void (MUT_STD_CALL *mutVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    void (MUT_STD_CALL *mutVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
    void (MUT_STD_CALL *mutVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    void (MUT_STD_CALL *mutVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexBindingDivisor)(GLuint bindingindex, GLuint divisor);
    void (MUT_STD_CALL *mutVertexP2ui)(GLenum type, GLuint value);
    void (MUT_STD_CALL *mutVertexP2uiv)(GLenum type, const GLuint *value);
    void (MUT_STD_CALL *mutVertexP3ui)(GLenum type, GLuint value);
    void (MUT_STD_CALL *mutVertexP3uiv)(GLenum type, const GLuint *value);
    void (MUT_STD_CALL *mutVertexP4ui)(GLenum type, GLuint value);
    void (MUT_STD_CALL *mutVertexP4uiv)(GLenum type, const GLuint *value);
    void (MUT_STD_CALL *mutViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutViewportArrayv)(GLuint first, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
    void (MUT_STD_CALL *mutViewportIndexedfv)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
    void (MUT_STD_CALL *mutWindowPos2d)(GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutWindowPos2dv)(const GLdouble *v);
    void (MUT_STD_CALL *mutWindowPos2f)(GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutWindowPos2fv)(const GLfloat *v);
    void (MUT_STD_CALL *mutWindowPos2i)(GLint x, GLint y);
    void (MUT_STD_CALL *mutWindowPos2iv)(const GLint *v);
    void (MUT_STD_CALL *mutWindowPos2s)(GLshort x, GLshort y);
    void (MUT_STD_CALL *mutWindowPos2sv)(const GLshort *v);
    void (MUT_STD_CALL *mutWindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutWindowPos3dv)(const GLdouble *v);
    void (MUT_STD_CALL *mutWindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutWindowPos3fv)(const GLfloat *v);
    void (MUT_STD_CALL *mutWindowPos3i)(GLint x, GLint y, GLint z);
    void (MUT_STD_CALL *mutWindowPos3iv)(const GLint *v);
    void (MUT_STD_CALL *mutWindowPos3s)(GLshort x, GLshort y, GLshort z);
    void (MUT_STD_CALL *mutWindowPos3sv)(const GLshort *v);

    /* GL extension function pointers */
    void (MUT_STD_CALL *mutAccumxOES)(GLenum op, GLfixed value);
    GLboolean (MUT_STD_CALL *mutAcquireKeyedMutexWin32EXT)(GLuint memory, GLuint64 key, GLuint timeout);
    void (MUT_STD_CALL *mutActiveProgramEXT)(GLuint program);
    void (MUT_STD_CALL *mutActiveShaderProgramEXT)(GLuint pipeline, GLuint program);
    void (MUT_STD_CALL *mutActiveStencilFaceEXT)(GLenum face);
    void (MUT_STD_CALL *mutActiveTextureARB)(GLenum texture);
    void (MUT_STD_CALL *mutActiveVaryingNV)(GLuint program, const GLchar *name);
    void (MUT_STD_CALL *mutAlphaFragmentOp1ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
    void (MUT_STD_CALL *mutAlphaFragmentOp2ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
    void (MUT_STD_CALL *mutAlphaFragmentOp3ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
    void (MUT_STD_CALL *mutAlphaFuncQCOM)(GLenum func, GLclampf ref);
    void (MUT_STD_CALL *mutAlphaFuncxOES)(GLenum func, GLfixed ref);
    void (MUT_STD_CALL *mutAlphaToCoverageDitherControlNV)(GLenum mode);
    void (MUT_STD_CALL *mutApplyFramebufferAttachmentCMAAINTEL)(void);
    void (MUT_STD_CALL *mutApplyTextureEXT)(GLenum mode);
    GLboolean (MUT_STD_CALL *mutAreProgramsResidentNV)(GLsizei n, const GLuint *programs, GLboolean *residences);
    GLboolean (MUT_STD_CALL *mutAreTexturesResidentEXT)(GLsizei n, const GLuint *textures, GLboolean *residences);
    void (MUT_STD_CALL *mutArrayElementEXT)(GLint i);
    void (MUT_STD_CALL *mutArrayObjectATI)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
    void (MUT_STD_CALL *mutAsyncMarkerSGIX)(GLuint marker);
    void (MUT_STD_CALL *mutAttachObjectARB)(GLhandleARB containerObj, GLhandleARB obj);
    void (MUT_STD_CALL *mutBeginConditionalRenderNV)(GLuint id, GLenum mode);
    void (MUT_STD_CALL *mutBeginConditionalRenderNVX)(GLuint id);
    void (MUT_STD_CALL *mutBeginFragmentShaderATI)(void);
    void (MUT_STD_CALL *mutBeginOcclusionQueryNV)(GLuint id);
    void (MUT_STD_CALL *mutBeginPerfMonitorAMD)(GLuint monitor);
    void (MUT_STD_CALL *mutBeginPerfQueryINTEL)(GLuint queryHandle);
    void (MUT_STD_CALL *mutBeginQueryARB)(GLenum target, GLuint id);
    void (MUT_STD_CALL *mutBeginQueryEXT)(GLenum target, GLuint id);
    void (MUT_STD_CALL *mutBeginTransformFeedbackEXT)(GLenum primitiveMode);
    void (MUT_STD_CALL *mutBeginTransformFeedbackNV)(GLenum primitiveMode);
    void (MUT_STD_CALL *mutBeginVertexShaderEXT)(void);
    void (MUT_STD_CALL *mutBeginVideoCaptureNV)(GLuint video_capture_slot);
    void (MUT_STD_CALL *mutBindAttribLocationARB)(GLhandleARB programObj, GLuint index, const GLcharARB *name);
    void (MUT_STD_CALL *mutBindBufferARB)(GLenum target, GLuint buffer);
    void (MUT_STD_CALL *mutBindBufferBaseEXT)(GLenum target, GLuint index, GLuint buffer);
    void (MUT_STD_CALL *mutBindBufferBaseNV)(GLenum target, GLuint index, GLuint buffer);
    void (MUT_STD_CALL *mutBindBufferOffsetEXT)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
    void (MUT_STD_CALL *mutBindBufferOffsetNV)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
    void (MUT_STD_CALL *mutBindBufferRangeEXT)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutBindBufferRangeNV)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutBindFragDataLocationEXT)(GLuint program, GLuint color, const GLchar *name);
    void (MUT_STD_CALL *mutBindFragDataLocationIndexedEXT)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
    void (MUT_STD_CALL *mutBindFragmentShaderATI)(GLuint id);
    void (MUT_STD_CALL *mutBindFramebufferEXT)(GLenum target, GLuint framebuffer);
    void (MUT_STD_CALL *mutBindImageTextureEXT)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
    GLuint (MUT_STD_CALL *mutBindLightParameterEXT)(GLenum light, GLenum value);
    GLuint (MUT_STD_CALL *mutBindMaterialParameterEXT)(GLenum face, GLenum value);
    void (MUT_STD_CALL *mutBindMultiTextureEXT)(GLenum texunit, GLenum target, GLuint texture);
    GLuint (MUT_STD_CALL *mutBindParameterEXT)(GLenum value);
    void (MUT_STD_CALL *mutBindProgramARB)(GLenum target, GLuint program);
    void (MUT_STD_CALL *mutBindProgramNV)(GLenum target, GLuint id);
    void (MUT_STD_CALL *mutBindProgramPipelineEXT)(GLuint pipeline);
    void (MUT_STD_CALL *mutBindRenderbufferEXT)(GLenum target, GLuint renderbuffer);
    GLuint (MUT_STD_CALL *mutBindTexGenParameterEXT)(GLenum unit, GLenum coord, GLenum value);
    void (MUT_STD_CALL *mutBindTextureEXT)(GLenum target, GLuint texture);
    GLuint (MUT_STD_CALL *mutBindTextureUnitParameterEXT)(GLenum unit, GLenum value);
    void (MUT_STD_CALL *mutBindTransformFeedbackNV)(GLenum target, GLuint id);
    void (MUT_STD_CALL *mutBindVertexArrayAPPLE)(GLuint array);
    void (MUT_STD_CALL *mutBindVertexArrayOES)(GLuint array);
    void (MUT_STD_CALL *mutBindVertexShaderEXT)(GLuint id);
    void (MUT_STD_CALL *mutBindVideoCaptureStreamBufferNV)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
    void (MUT_STD_CALL *mutBindVideoCaptureStreamTextureNV)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
    void (MUT_STD_CALL *mutBinormal3bEXT)(GLbyte bx, GLbyte by, GLbyte bz);
    void (MUT_STD_CALL *mutBinormal3bvEXT)(const GLbyte *v);
    void (MUT_STD_CALL *mutBinormal3dEXT)(GLdouble bx, GLdouble by, GLdouble bz);
    void (MUT_STD_CALL *mutBinormal3dvEXT)(const GLdouble *v);
    void (MUT_STD_CALL *mutBinormal3fEXT)(GLfloat bx, GLfloat by, GLfloat bz);
    void (MUT_STD_CALL *mutBinormal3fvEXT)(const GLfloat *v);
    void (MUT_STD_CALL *mutBinormal3iEXT)(GLint bx, GLint by, GLint bz);
    void (MUT_STD_CALL *mutBinormal3ivEXT)(const GLint *v);
    void (MUT_STD_CALL *mutBinormal3sEXT)(GLshort bx, GLshort by, GLshort bz);
    void (MUT_STD_CALL *mutBinormal3svEXT)(const GLshort *v);
    void (MUT_STD_CALL *mutBinormalPointerEXT)(GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutBitmapxOES)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
    void (MUT_STD_CALL *mutBlendBarrierKHR)(void);
    void (MUT_STD_CALL *mutBlendBarrierNV)(void);
    void (MUT_STD_CALL *mutBlendColorEXT)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    void (MUT_STD_CALL *mutBlendColorxOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    void (MUT_STD_CALL *mutBlendEquationEXT)(GLenum mode);
    void (MUT_STD_CALL *mutBlendEquationIndexedAMD)(GLuint buf, GLenum mode);
    void (MUT_STD_CALL *mutBlendEquationSeparateEXT)(GLenum modeRGB, GLenum modeAlpha);
    void (MUT_STD_CALL *mutBlendEquationSeparateIndexedAMD)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    void (MUT_STD_CALL *mutBlendEquationSeparateiARB)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    void (MUT_STD_CALL *mutBlendEquationSeparateiEXT)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    void (MUT_STD_CALL *mutBlendEquationSeparateiOES)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    void (MUT_STD_CALL *mutBlendEquationiARB)(GLuint buf, GLenum mode);
    void (MUT_STD_CALL *mutBlendEquationiEXT)(GLuint buf, GLenum mode);
    void (MUT_STD_CALL *mutBlendEquationiOES)(GLuint buf, GLenum mode);
    void (MUT_STD_CALL *mutBlendFuncIndexedAMD)(GLuint buf, GLenum src, GLenum dst);
    void (MUT_STD_CALL *mutBlendFuncSeparateEXT)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    void (MUT_STD_CALL *mutBlendFuncSeparateINGR)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    void (MUT_STD_CALL *mutBlendFuncSeparateIndexedAMD)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    void (MUT_STD_CALL *mutBlendFuncSeparateiARB)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    void (MUT_STD_CALL *mutBlendFuncSeparateiEXT)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    void (MUT_STD_CALL *mutBlendFuncSeparateiOES)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    void (MUT_STD_CALL *mutBlendFunciARB)(GLuint buf, GLenum src, GLenum dst);
    void (MUT_STD_CALL *mutBlendFunciEXT)(GLuint buf, GLenum src, GLenum dst);
    void (MUT_STD_CALL *mutBlendFunciOES)(GLuint buf, GLenum src, GLenum dst);
    void (MUT_STD_CALL *mutBlendParameteriNV)(GLenum pname, GLint value);
    void (MUT_STD_CALL *mutBlitFramebufferANGLE)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    void (MUT_STD_CALL *mutBlitFramebufferEXT)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    void (MUT_STD_CALL *mutBlitFramebufferNV)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    void (MUT_STD_CALL *mutBufferAddressRangeNV)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
    void (MUT_STD_CALL *mutBufferDataARB)(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
    void (MUT_STD_CALL *mutBufferPageCommitmentARB)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
    void (MUT_STD_CALL *mutBufferParameteriAPPLE)(GLenum target, GLenum pname, GLint param);
    GLuint (MUT_STD_CALL *mutBufferRegionEnabled)(void);
    void (MUT_STD_CALL *mutBufferStorageEXT)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
    void (MUT_STD_CALL *mutBufferStorageExternalEXT)(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
    void (MUT_STD_CALL *mutBufferStorageMemEXT)(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutBufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
    void (MUT_STD_CALL *mutCallCommandListNV)(GLuint list);
    GLenum (MUT_STD_CALL *mutCheckFramebufferStatusEXT)(GLenum target);
    GLenum (MUT_STD_CALL *mutCheckNamedFramebufferStatusEXT)(GLuint framebuffer, GLenum target);
    void (MUT_STD_CALL *mutClampColorARB)(GLenum target, GLenum clamp);
    void (MUT_STD_CALL *mutClearAccumxOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    void (MUT_STD_CALL *mutClearColorIiEXT)(GLint red, GLint green, GLint blue, GLint alpha);
    void (MUT_STD_CALL *mutClearColorIuiEXT)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
    void (MUT_STD_CALL *mutClearColorxOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    void (MUT_STD_CALL *mutClearDepthdNV)(GLdouble depth);
    void (MUT_STD_CALL *mutClearDepthfOES)(GLclampf depth);
    void (MUT_STD_CALL *mutClearDepthxOES)(GLfixed depth);
    void (MUT_STD_CALL *mutClearNamedBufferDataEXT)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearNamedBufferSubDataEXT)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearPixelLocalStorageuiEXT)(GLsizei offset, GLsizei n, const GLuint *values);
    void (MUT_STD_CALL *mutClearTexImageEXT)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClearTexSubImageEXT)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutClientActiveTextureARB)(GLenum texture);
    void (MUT_STD_CALL *mutClientActiveVertexStreamATI)(GLenum stream);
    void (MUT_STD_CALL *mutClientAttribDefaultEXT)(GLbitfield mask);
    GLenum (MUT_STD_CALL *mutClientWaitSyncAPPLE)(GLsync sync, GLbitfield flags, GLuint64 timeout);
    void (MUT_STD_CALL *mutClipPlanefOES)(GLenum plane, const GLfloat *equation);
    void (MUT_STD_CALL *mutClipPlanexOES)(GLenum plane, const GLfixed *equation);
    void (MUT_STD_CALL *mutColor3fVertex3fSUN)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutColor3fVertex3fvSUN)(const GLfloat *c, const GLfloat *v);
    void (MUT_STD_CALL *mutColor3hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
    void (MUT_STD_CALL *mutColor3hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutColor3xOES)(GLfixed red, GLfixed green, GLfixed blue);
    void (MUT_STD_CALL *mutColor3xvOES)(const GLfixed *components);
    void (MUT_STD_CALL *mutColor4fNormal3fVertex3fSUN)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutColor4fNormal3fVertex3fvSUN)(const GLfloat *c, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutColor4hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
    void (MUT_STD_CALL *mutColor4hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutColor4ubVertex2fSUN)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutColor4ubVertex2fvSUN)(const GLubyte *c, const GLfloat *v);
    void (MUT_STD_CALL *mutColor4ubVertex3fSUN)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutColor4ubVertex3fvSUN)(const GLubyte *c, const GLfloat *v);
    void (MUT_STD_CALL *mutColor4xOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
    void (MUT_STD_CALL *mutColor4xvOES)(const GLfixed *components);
    void (MUT_STD_CALL *mutColorFormatNV)(GLint size, GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutColorFragmentOp1ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
    void (MUT_STD_CALL *mutColorFragmentOp2ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
    void (MUT_STD_CALL *mutColorFragmentOp3ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
    void (MUT_STD_CALL *mutColorMaskIndexedEXT)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    void (MUT_STD_CALL *mutColorMaskiEXT)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    void (MUT_STD_CALL *mutColorMaskiOES)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    void (MUT_STD_CALL *mutColorPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    void (MUT_STD_CALL *mutColorPointerListIBM)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutColorPointervINTEL)(GLint size, GLenum type, const void **pointer);
    void (MUT_STD_CALL *mutColorSubTable)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutColorSubTableEXT)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
    void (MUT_STD_CALL *mutColorTable)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
    void (MUT_STD_CALL *mutColorTableEXT)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table);
    void (MUT_STD_CALL *mutColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutColorTableParameterfvSGI)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutColorTableParameteriv)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutColorTableParameterivSGI)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutColorTableSGI)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
    void (MUT_STD_CALL *mutCombinerInputNV)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
    void (MUT_STD_CALL *mutCombinerOutputNV)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
    void (MUT_STD_CALL *mutCombinerParameterfNV)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutCombinerParameterfvNV)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutCombinerParameteriNV)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutCombinerParameterivNV)(GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutCombinerStageParameterfvNV)(GLenum stage, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutCommandListSegmentsNV)(GLuint list, GLuint segments);
    void (MUT_STD_CALL *mutCompileCommandListNV)(GLuint list);
    void (MUT_STD_CALL *mutCompileShaderARB)(GLhandleARB shaderObj);
    void (MUT_STD_CALL *mutCompileShaderIncludeARB)(GLuint shader, GLsizei count, const GLchar *const *path, const GLint *length);
    void (MUT_STD_CALL *mutCompressedMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedMultiTexImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedTexImage1DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexImage2DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexImage3DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexImage3DOES)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexSubImage1DARB)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexSubImage2DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexSubImage3DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTexSubImage3DOES)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    void (MUT_STD_CALL *mutCompressedTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedTextureImage3DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutCompressedTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
    void (MUT_STD_CALL *mutConservativeRasterParameterfNV)(GLenum pname, GLfloat value);
    void (MUT_STD_CALL *mutConservativeRasterParameteriNV)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutConvolutionFilter1D)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
    void (MUT_STD_CALL *mutConvolutionFilter1DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
    void (MUT_STD_CALL *mutConvolutionFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
    void (MUT_STD_CALL *mutConvolutionFilter2DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
    void (MUT_STD_CALL *mutConvolutionParameterf)(GLenum target, GLenum pname, GLfloat params);
    void (MUT_STD_CALL *mutConvolutionParameterfEXT)(GLenum target, GLenum pname, GLfloat params);
    void (MUT_STD_CALL *mutConvolutionParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutConvolutionParameterfvEXT)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutConvolutionParameteri)(GLenum target, GLenum pname, GLint params);
    void (MUT_STD_CALL *mutConvolutionParameteriEXT)(GLenum target, GLenum pname, GLint params);
    void (MUT_STD_CALL *mutConvolutionParameteriv)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutConvolutionParameterivEXT)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutConvolutionParameterxOES)(GLenum target, GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutConvolutionParameterxvOES)(GLenum target, GLenum pname, const GLfixed *params);
    void (MUT_STD_CALL *mutCopyBufferSubDataNV)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    void (MUT_STD_CALL *mutCopyColorSubTable)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyColorSubTableEXT)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyColorTable)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyColorTableSGI)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyConvolutionFilter1D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyConvolutionFilter1DEXT)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyConvolutionFilter2D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyConvolutionFilter2DEXT)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyImageSubDataEXT)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    void (MUT_STD_CALL *mutCopyImageSubDataNV)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
    void (MUT_STD_CALL *mutCopyImageSubDataOES)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    void (MUT_STD_CALL *mutCopyMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    void (MUT_STD_CALL *mutCopyMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    void (MUT_STD_CALL *mutCopyMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyPathNV)(GLuint resultPath, GLuint srcPath);
    void (MUT_STD_CALL *mutCopyTexImage1DEXT)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    void (MUT_STD_CALL *mutCopyTexImage2DEXT)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    void (MUT_STD_CALL *mutCopyTexSubImage1DEXT)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyTexSubImage2DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyTexSubImage3DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyTexSubImage3DOES)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    void (MUT_STD_CALL *mutCopyTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    void (MUT_STD_CALL *mutCopyTextureLevelsAPPLE)(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount);
    void (MUT_STD_CALL *mutCopyTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    void (MUT_STD_CALL *mutCopyTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCopyTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutCoverFillPathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    void (MUT_STD_CALL *mutCoverFillPathNV)(GLuint path, GLenum coverMode);
    void (MUT_STD_CALL *mutCoverStrokePathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    void (MUT_STD_CALL *mutCoverStrokePathNV)(GLuint path, GLenum coverMode);
    void (MUT_STD_CALL *mutCoverageMaskNV)(GLboolean mask);
    void (MUT_STD_CALL *mutCoverageModulationNV)(GLenum components);
    void (MUT_STD_CALL *mutCoverageModulationTableNV)(GLsizei n, const GLfloat *v);
    void (MUT_STD_CALL *mutCoverageOperationNV)(GLenum operation);
    void (MUT_STD_CALL *mutCreateCommandListsNV)(GLsizei n, GLuint *lists);
    void (MUT_STD_CALL *mutCreateMemoryObjectsEXT)(GLsizei n, GLuint *memoryObjects);
    void (MUT_STD_CALL *mutCreatePerfQueryINTEL)(GLuint queryId, GLuint *queryHandle);
    GLhandleARB (MUT_STD_CALL *mutCreateProgramObjectARB)(void);
    GLhandleARB (MUT_STD_CALL *mutCreateShaderObjectARB)(GLenum shaderType);
    GLuint (MUT_STD_CALL *mutCreateShaderProgramEXT)(GLenum type, const GLchar *string);
    GLuint (MUT_STD_CALL *mutCreateShaderProgramvEXT)(GLenum type, GLsizei count, const GLchar **strings);
    void (MUT_STD_CALL *mutCreateStatesNV)(GLsizei n, GLuint *states);
    GLsync (MUT_STD_CALL *mutCreateSyncFromCLeventARB)(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
    void (MUT_STD_CALL *mutCullParameterdvEXT)(GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutCullParameterfvEXT)(GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutCurrentPaletteMatrixARB)(GLint index);
    void (MUT_STD_CALL *mutDebugMessageCallbackAMD)(GLDEBUGPROCAMD callback, void *userParam);
    void (MUT_STD_CALL *mutDebugMessageCallbackARB)(GLDEBUGPROCARB callback, const void *userParam);
    void (MUT_STD_CALL *mutDebugMessageCallbackKHR)(GLDEBUGPROCKHR callback, const void *userParam);
    void (MUT_STD_CALL *mutDebugMessageControlARB)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    void (MUT_STD_CALL *mutDebugMessageControlKHR)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    void (MUT_STD_CALL *mutDebugMessageEnableAMD)(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    void (MUT_STD_CALL *mutDebugMessageInsertAMD)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
    void (MUT_STD_CALL *mutDebugMessageInsertARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    void (MUT_STD_CALL *mutDebugMessageInsertKHR)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    void (MUT_STD_CALL *mutDeformSGIX)(GLbitfield mask);
    void (MUT_STD_CALL *mutDeformationMap3dSGIX)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
    void (MUT_STD_CALL *mutDeformationMap3fSGIX)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
    void (MUT_STD_CALL *mutDeleteAsyncMarkersSGIX)(GLuint marker, GLsizei range);
    void (MUT_STD_CALL *mutDeleteBufferRegion)(GLenum region);
    void (MUT_STD_CALL *mutDeleteBuffersARB)(GLsizei n, const GLuint *buffers);
    void (MUT_STD_CALL *mutDeleteCommandListsNV)(GLsizei n, const GLuint *lists);
    void (MUT_STD_CALL *mutDeleteFencesAPPLE)(GLsizei n, const GLuint *fences);
    void (MUT_STD_CALL *mutDeleteFencesNV)(GLsizei n, const GLuint *fences);
    void (MUT_STD_CALL *mutDeleteFragmentShaderATI)(GLuint id);
    void (MUT_STD_CALL *mutDeleteFramebuffersEXT)(GLsizei n, const GLuint *framebuffers);
    void (MUT_STD_CALL *mutDeleteMemoryObjectsEXT)(GLsizei n, const GLuint *memoryObjects);
    void (MUT_STD_CALL *mutDeleteNamedStringARB)(GLint namelen, const GLchar *name);
    void (MUT_STD_CALL *mutDeleteNamesAMD)(GLenum identifier, GLuint num, const GLuint *names);
    void (MUT_STD_CALL *mutDeleteObjectARB)(GLhandleARB obj);
    void (MUT_STD_CALL *mutDeleteOcclusionQueriesNV)(GLsizei n, const GLuint *ids);
    void (MUT_STD_CALL *mutDeletePathsNV)(GLuint path, GLsizei range);
    void (MUT_STD_CALL *mutDeletePerfMonitorsAMD)(GLsizei n, GLuint *monitors);
    void (MUT_STD_CALL *mutDeletePerfQueryINTEL)(GLuint queryHandle);
    void (MUT_STD_CALL *mutDeleteProgramPipelinesEXT)(GLsizei n, const GLuint *pipelines);
    void (MUT_STD_CALL *mutDeleteProgramsARB)(GLsizei n, const GLuint *programs);
    void (MUT_STD_CALL *mutDeleteProgramsNV)(GLsizei n, const GLuint *programs);
    void (MUT_STD_CALL *mutDeleteQueriesARB)(GLsizei n, const GLuint *ids);
    void (MUT_STD_CALL *mutDeleteQueriesEXT)(GLsizei n, const GLuint *ids);
    void (MUT_STD_CALL *mutDeleteRenderbuffersEXT)(GLsizei n, const GLuint *renderbuffers);
    void (MUT_STD_CALL *mutDeleteSemaphoresEXT)(GLsizei n, const GLuint *semaphores);
    void (MUT_STD_CALL *mutDeleteStatesNV)(GLsizei n, const GLuint *states);
    void (MUT_STD_CALL *mutDeleteSyncAPPLE)(GLsync sync);
    void (MUT_STD_CALL *mutDeleteTexturesEXT)(GLsizei n, const GLuint *textures);
    void (MUT_STD_CALL *mutDeleteTransformFeedbacksNV)(GLsizei n, const GLuint *ids);
    void (MUT_STD_CALL *mutDeleteVertexArraysAPPLE)(GLsizei n, const GLuint *arrays);
    void (MUT_STD_CALL *mutDeleteVertexArraysOES)(GLsizei n, const GLuint *arrays);
    void (MUT_STD_CALL *mutDeleteVertexShaderEXT)(GLuint id);
    void (MUT_STD_CALL *mutDepthBoundsEXT)(GLclampd zmin, GLclampd zmax);
    void (MUT_STD_CALL *mutDepthBoundsdNV)(GLdouble zmin, GLdouble zmax);
    void (MUT_STD_CALL *mutDepthRangeArrayfvNV)(GLuint first, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutDepthRangeArrayfvOES)(GLuint first, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutDepthRangeIndexedfNV)(GLuint index, GLfloat n, GLfloat f);
    void (MUT_STD_CALL *mutDepthRangeIndexedfOES)(GLuint index, GLfloat n, GLfloat f);
    void (MUT_STD_CALL *mutDepthRangedNV)(GLdouble zNear, GLdouble zFar);
    void (MUT_STD_CALL *mutDepthRangefOES)(GLclampf n, GLclampf f);
    void (MUT_STD_CALL *mutDepthRangexOES)(GLfixed n, GLfixed f);
    void (MUT_STD_CALL *mutDetachObjectARB)(GLhandleARB containerObj, GLhandleARB attachedObj);
    void (MUT_STD_CALL *mutDetailTexFuncSGIS)(GLenum target, GLsizei n, const GLfloat *points);
    void (MUT_STD_CALL *mutDisableClientStateIndexedEXT)(GLenum array, GLuint index);
    void (MUT_STD_CALL *mutDisableClientStateiEXT)(GLenum array, GLuint index);
    void (MUT_STD_CALL *mutDisableDriverControlQCOM)(GLuint driverControl);
    void (MUT_STD_CALL *mutDisableIndexedEXT)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutDisableVariantClientStateEXT)(GLuint id);
    void (MUT_STD_CALL *mutDisableVertexArrayAttribEXT)(GLuint vaobj, GLuint index);
    void (MUT_STD_CALL *mutDisableVertexArrayEXT)(GLuint vaobj, GLenum array);
    void (MUT_STD_CALL *mutDisableVertexAttribAPPLE)(GLuint index, GLenum pname);
    void (MUT_STD_CALL *mutDisableVertexAttribArrayARB)(GLuint index);
    void (MUT_STD_CALL *mutDisableiEXT)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutDisableiNV)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutDisableiOES)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutDiscardFramebufferEXT)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
    void (MUT_STD_CALL *mutDispatchComputeGroupSizeARB)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
    void (MUT_STD_CALL *mutDrawArraysEXT)(GLenum mode, GLint first, GLsizei count);
    void (MUT_STD_CALL *mutDrawArraysInstancedANGLE)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawArraysInstancedARB)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawArraysInstancedBaseInstanceEXT)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
    void (MUT_STD_CALL *mutDrawArraysInstancedEXT)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawArraysInstancedNV)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawBufferRegion)(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);
    void (MUT_STD_CALL *mutDrawBuffersARB)(GLsizei n, const GLenum *bufs);
    void (MUT_STD_CALL *mutDrawBuffersATI)(GLsizei n, const GLenum *bufs);
    void (MUT_STD_CALL *mutDrawBuffersEXT)(GLsizei n, const GLenum *bufs);
    void (MUT_STD_CALL *mutDrawBuffersIndexedEXT)(GLint n, const GLenum *location, const GLint *indices);
    void (MUT_STD_CALL *mutDrawBuffersNV)(GLsizei n, const GLenum *bufs);
    void (MUT_STD_CALL *mutDrawCommandsAddressNV)(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
    void (MUT_STD_CALL *mutDrawCommandsNV)(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
    void (MUT_STD_CALL *mutDrawCommandsStatesAddressNV)(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    void (MUT_STD_CALL *mutDrawCommandsStatesNV)(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    void (MUT_STD_CALL *mutDrawElementArrayAPPLE)(GLenum mode, GLint first, GLsizei count);
    void (MUT_STD_CALL *mutDrawElementArrayATI)(GLenum mode, GLsizei count);
    void (MUT_STD_CALL *mutDrawElementsBaseVertexEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    void (MUT_STD_CALL *mutDrawElementsBaseVertexOES)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    void (MUT_STD_CALL *mutDrawElementsInstancedANGLE)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawElementsInstancedARB)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawElementsInstancedBaseInstanceEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
    void (MUT_STD_CALL *mutDrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
    void (MUT_STD_CALL *mutDrawElementsInstancedBaseVertexEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
    void (MUT_STD_CALL *mutDrawElementsInstancedBaseVertexOES)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
    void (MUT_STD_CALL *mutDrawElementsInstancedEXT)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawElementsInstancedNV)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    void (MUT_STD_CALL *mutDrawMeshArraysSUN)(GLenum mode, GLint first, GLsizei count, GLsizei width);
    void (MUT_STD_CALL *mutDrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
    void (MUT_STD_CALL *mutDrawRangeElementArrayATI)(GLenum mode, GLuint start, GLuint end, GLsizei count);
    void (MUT_STD_CALL *mutDrawRangeElementsBaseVertexEXT)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    void (MUT_STD_CALL *mutDrawRangeElementsBaseVertexOES)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    void (MUT_STD_CALL *mutDrawRangeElementsEXT)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
    void (MUT_STD_CALL *mutDrawTextureNV)(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
    void (MUT_STD_CALL *mutDrawTransformFeedbackEXT)(GLenum mode, GLuint id);
    void (MUT_STD_CALL *mutDrawTransformFeedbackInstancedEXT)(GLenum mode, GLuint id, GLsizei instancecount);
    void (MUT_STD_CALL *mutDrawTransformFeedbackNV)(GLenum mode, GLuint id);
    void (MUT_STD_CALL *mutDrawVkImageNV)(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
    void (MUT_STD_CALL *mutEGLImageTargetRenderbufferStorageOES)(GLenum target, GLeglImageOES image);
    void (MUT_STD_CALL *mutEGLImageTargetTexture2DOES)(GLenum target, GLeglImageOES image);
    void (MUT_STD_CALL *mutEdgeFlagFormatNV)(GLsizei stride);
    void (MUT_STD_CALL *mutEdgeFlagPointerEXT)(GLsizei stride, GLsizei count, const GLboolean *pointer);
    void (MUT_STD_CALL *mutEdgeFlagPointerListIBM)(GLint stride, const GLboolean **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutElementPointerAPPLE)(GLenum type, const void *pointer);
    void (MUT_STD_CALL *mutElementPointerATI)(GLenum type, const void *pointer);
    void (MUT_STD_CALL *mutEnableClientStateIndexedEXT)(GLenum array, GLuint index);
    void (MUT_STD_CALL *mutEnableClientStateiEXT)(GLenum array, GLuint index);
    void (MUT_STD_CALL *mutEnableDriverControlQCOM)(GLuint driverControl);
    void (MUT_STD_CALL *mutEnableIndexedEXT)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutEnableVariantClientStateEXT)(GLuint id);
    void (MUT_STD_CALL *mutEnableVertexArrayAttribEXT)(GLuint vaobj, GLuint index);
    void (MUT_STD_CALL *mutEnableVertexArrayEXT)(GLuint vaobj, GLenum array);
    void (MUT_STD_CALL *mutEnableVertexAttribAPPLE)(GLuint index, GLenum pname);
    void (MUT_STD_CALL *mutEnableVertexAttribArrayARB)(GLuint index);
    void (MUT_STD_CALL *mutEnableiEXT)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutEnableiNV)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutEnableiOES)(GLenum target, GLuint index);
    void (MUT_STD_CALL *mutEndConditionalRenderNV)(void);
    void (MUT_STD_CALL *mutEndConditionalRenderNVX)(void);
    void (MUT_STD_CALL *mutEndFragmentShaderATI)(void);
    void (MUT_STD_CALL *mutEndOcclusionQueryNV)(void);
    void (MUT_STD_CALL *mutEndPerfMonitorAMD)(GLuint monitor);
    void (MUT_STD_CALL *mutEndPerfQueryINTEL)(GLuint queryHandle);
    void (MUT_STD_CALL *mutEndQueryARB)(GLenum target);
    void (MUT_STD_CALL *mutEndQueryEXT)(GLenum target);
    void (MUT_STD_CALL *mutEndTilingQCOM)(GLbitfield preserveMask);
    void (MUT_STD_CALL *mutEndTransformFeedbackEXT)(void);
    void (MUT_STD_CALL *mutEndTransformFeedbackNV)(void);
    void (MUT_STD_CALL *mutEndVertexShaderEXT)(void);
    void (MUT_STD_CALL *mutEndVideoCaptureNV)(GLuint video_capture_slot);
    void (MUT_STD_CALL *mutEvalCoord1xOES)(GLfixed u);
    void (MUT_STD_CALL *mutEvalCoord1xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutEvalCoord2xOES)(GLfixed u, GLfixed v);
    void (MUT_STD_CALL *mutEvalCoord2xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutEvalMapsNV)(GLenum target, GLenum mode);
    void (MUT_STD_CALL *mutEvaluateDepthValuesARB)(void);
    void (MUT_STD_CALL *mutExecuteProgramNV)(GLenum target, GLuint id, const GLfloat *params);
    void (MUT_STD_CALL *mutExtGetBufferPointervQCOM)(GLenum target, void **params);
    void (MUT_STD_CALL *mutExtGetBuffersQCOM)(GLuint *buffers, GLint maxBuffers, GLint *numBuffers);
    void (MUT_STD_CALL *mutExtGetFramebuffersQCOM)(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers);
    void (MUT_STD_CALL *mutExtGetProgramBinarySourceQCOM)(GLuint program, GLenum shadertype, GLchar *source, GLint *length);
    void (MUT_STD_CALL *mutExtGetProgramsQCOM)(GLuint *programs, GLint maxPrograms, GLint *numPrograms);
    void (MUT_STD_CALL *mutExtGetRenderbuffersQCOM)(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);
    void (MUT_STD_CALL *mutExtGetShadersQCOM)(GLuint *shaders, GLint maxShaders, GLint *numShaders);
    void (MUT_STD_CALL *mutExtGetTexLevelParameterivQCOM)(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutExtGetTexSubImageQCOM)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels);
    void (MUT_STD_CALL *mutExtGetTexturesQCOM)(GLuint *textures, GLint maxTextures, GLint *numTextures);
    GLboolean (MUT_STD_CALL *mutExtIsProgramBinaryQCOM)(GLuint program);
    void (MUT_STD_CALL *mutExtTexObjectStateOverrideiQCOM)(GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutExtractComponentEXT)(GLuint res, GLuint src, GLuint num);
    void (MUT_STD_CALL *mutFeedbackBufferxOES)(GLsizei n, GLenum type, const GLfixed *buffer);
    GLsync (MUT_STD_CALL *mutFenceSyncAPPLE)(GLenum condition, GLbitfield flags);
    void (MUT_STD_CALL *mutFinalCombinerInputNV)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
    GLint (MUT_STD_CALL *mutFinishAsyncSGIX)(GLuint *markerp);
    void (MUT_STD_CALL *mutFinishFenceAPPLE)(GLuint fence);
    void (MUT_STD_CALL *mutFinishFenceNV)(GLuint fence);
    void (MUT_STD_CALL *mutFinishObjectAPPLE)(GLenum object, GLint name);
    void (MUT_STD_CALL *mutFinishTextureSUNX)(void);
    void (MUT_STD_CALL *mutFlushMappedBufferRangeAPPLE)(GLenum target, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutFlushMappedBufferRangeEXT)(GLenum target, GLintptr offset, GLsizeiptr length);
    void (MUT_STD_CALL *mutFlushMappedNamedBufferRangeEXT)(GLuint buffer, GLintptr offset, GLsizeiptr length);
    void (MUT_STD_CALL *mutFlushPixelDataRangeNV)(GLenum target);
    void (MUT_STD_CALL *mutFlushRasterSGIX)(void);
    void (MUT_STD_CALL *mutFlushStaticDataIBM)(GLenum target);
    void (MUT_STD_CALL *mutFlushVertexArrayRangeAPPLE)(GLsizei length, void *pointer);
    void (MUT_STD_CALL *mutFlushVertexArrayRangeNV)(void);
    void (MUT_STD_CALL *mutFogCoordFormatNV)(GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutFogCoordPointerEXT)(GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutFogCoordPointerListIBM)(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutFogCoorddEXT)(GLdouble coord);
    void (MUT_STD_CALL *mutFogCoorddvEXT)(const GLdouble *coord);
    void (MUT_STD_CALL *mutFogCoordfEXT)(GLfloat coord);
    void (MUT_STD_CALL *mutFogCoordfvEXT)(const GLfloat *coord);
    void (MUT_STD_CALL *mutFogCoordhNV)(GLhalfNV fog);
    void (MUT_STD_CALL *mutFogCoordhvNV)(const GLhalfNV *fog);
    void (MUT_STD_CALL *mutFogFuncSGIS)(GLsizei n, const GLfloat *points);
    void (MUT_STD_CALL *mutFogxOES)(GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutFogxvOES)(GLenum pname, const GLfixed *param);
    void (MUT_STD_CALL *mutFragmentColorMaterialSGIX)(GLenum face, GLenum mode);
    void (MUT_STD_CALL *mutFragmentCoverageColorNV)(GLuint color);
    void (MUT_STD_CALL *mutFragmentLightModelfSGIX)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutFragmentLightModelfvSGIX)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutFragmentLightModeliSGIX)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutFragmentLightModelivSGIX)(GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutFragmentLightfSGIX)(GLenum light, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutFragmentLightfvSGIX)(GLenum light, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutFragmentLightiSGIX)(GLenum light, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutFragmentLightivSGIX)(GLenum light, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutFragmentMaterialfSGIX)(GLenum face, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutFragmentMaterialfvSGIX)(GLenum face, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutFragmentMaterialiSGIX)(GLenum face, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutFragmentMaterialivSGIX)(GLenum face, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutFrameTerminatorGREMEDY)(void);
    void (MUT_STD_CALL *mutFrameZoomSGIX)(GLint factor);
    void (MUT_STD_CALL *mutFramebufferDrawBufferEXT)(GLuint framebuffer, GLenum mode);
    void (MUT_STD_CALL *mutFramebufferDrawBuffersEXT)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
    void (MUT_STD_CALL *mutFramebufferFetchBarrierQCOM)(void);
    void (MUT_STD_CALL *mutFramebufferFoveationConfigQCOM)(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures);
    void (MUT_STD_CALL *mutFramebufferFoveationParametersQCOM)(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea);
    void (MUT_STD_CALL *mutFramebufferPixelLocalStorageSizeEXT)(GLuint target, GLsizei size);
    void (MUT_STD_CALL *mutFramebufferReadBufferEXT)(GLuint framebuffer, GLenum mode);
    void (MUT_STD_CALL *mutFramebufferRenderbufferEXT)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    void (MUT_STD_CALL *mutFramebufferSampleLocationsfvARB)(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutFramebufferSampleLocationsfvNV)(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutFramebufferSamplePositionsfvAMD)(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
    void (MUT_STD_CALL *mutFramebufferTexture1DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFramebufferTexture2DDownsampleIMG)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale);
    void (MUT_STD_CALL *mutFramebufferTexture2DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFramebufferTexture2DMultisampleEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
    void (MUT_STD_CALL *mutFramebufferTexture2DMultisampleIMG)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
    void (MUT_STD_CALL *mutFramebufferTexture3DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    void (MUT_STD_CALL *mutFramebufferTexture3DOES)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    void (MUT_STD_CALL *mutFramebufferTextureARB)(GLenum target, GLenum attachment, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFramebufferTextureEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFramebufferTextureFaceARB)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
    void (MUT_STD_CALL *mutFramebufferTextureFaceEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
    void (MUT_STD_CALL *mutFramebufferTextureLayerARB)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    void (MUT_STD_CALL *mutFramebufferTextureLayerDownsampleIMG)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale);
    void (MUT_STD_CALL *mutFramebufferTextureLayerEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    void (MUT_STD_CALL *mutFramebufferTextureMultisampleMultiviewOVR)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews);
    void (MUT_STD_CALL *mutFramebufferTextureMultiviewOVR)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
    void (MUT_STD_CALL *mutFramebufferTextureOES)(GLenum target, GLenum attachment, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutFreeObjectBufferATI)(GLuint buffer);
    void (MUT_STD_CALL *mutFrustumfOES)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
    void (MUT_STD_CALL *mutFrustumxOES)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
    GLuint (MUT_STD_CALL *mutGenAsyncMarkersSGIX)(GLsizei range);
    void (MUT_STD_CALL *mutGenBuffersARB)(GLsizei n, GLuint *buffers);
    void (MUT_STD_CALL *mutGenFencesAPPLE)(GLsizei n, GLuint *fences);
    void (MUT_STD_CALL *mutGenFencesNV)(GLsizei n, GLuint *fences);
    GLuint (MUT_STD_CALL *mutGenFragmentShadersATI)(GLuint range);
    void (MUT_STD_CALL *mutGenFramebuffersEXT)(GLsizei n, GLuint *framebuffers);
    void (MUT_STD_CALL *mutGenNamesAMD)(GLenum identifier, GLuint num, GLuint *names);
    void (MUT_STD_CALL *mutGenOcclusionQueriesNV)(GLsizei n, GLuint *ids);
    GLuint (MUT_STD_CALL *mutGenPathsNV)(GLsizei range);
    void (MUT_STD_CALL *mutGenPerfMonitorsAMD)(GLsizei n, GLuint *monitors);
    void (MUT_STD_CALL *mutGenProgramPipelinesEXT)(GLsizei n, GLuint *pipelines);
    void (MUT_STD_CALL *mutGenProgramsARB)(GLsizei n, GLuint *programs);
    void (MUT_STD_CALL *mutGenProgramsNV)(GLsizei n, GLuint *programs);
    void (MUT_STD_CALL *mutGenQueriesARB)(GLsizei n, GLuint *ids);
    void (MUT_STD_CALL *mutGenQueriesEXT)(GLsizei n, GLuint *ids);
    void (MUT_STD_CALL *mutGenRenderbuffersEXT)(GLsizei n, GLuint *renderbuffers);
    void (MUT_STD_CALL *mutGenSemaphoresEXT)(GLsizei n, GLuint *semaphores);
    GLuint (MUT_STD_CALL *mutGenSymbolsEXT)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
    void (MUT_STD_CALL *mutGenTexturesEXT)(GLsizei n, GLuint *textures);
    void (MUT_STD_CALL *mutGenTransformFeedbacksNV)(GLsizei n, GLuint *ids);
    void (MUT_STD_CALL *mutGenVertexArraysAPPLE)(GLsizei n, GLuint *arrays);
    void (MUT_STD_CALL *mutGenVertexArraysOES)(GLsizei n, GLuint *arrays);
    GLuint (MUT_STD_CALL *mutGenVertexShadersEXT)(GLuint range);
    void (MUT_STD_CALL *mutGenerateMipmapEXT)(GLenum target);
    void (MUT_STD_CALL *mutGenerateMultiTexMipmapEXT)(GLenum texunit, GLenum target);
    void (MUT_STD_CALL *mutGenerateTextureMipmapEXT)(GLuint texture, GLenum target);
    void (MUT_STD_CALL *mutGetActiveAttribARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
    void (MUT_STD_CALL *mutGetActiveUniformARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
    void (MUT_STD_CALL *mutGetActiveVaryingNV)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    void (MUT_STD_CALL *mutGetArrayObjectfvATI)(GLenum array, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetArrayObjectivATI)(GLenum array, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetAttachedObjectsARB)(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
    GLint (MUT_STD_CALL *mutGetAttribLocationARB)(GLhandleARB programObj, const GLcharARB *name);
    void (MUT_STD_CALL *mutGetBooleanIndexedvEXT)(GLenum target, GLuint index, GLboolean *data);
    void (MUT_STD_CALL *mutGetBufferParameterivARB)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetBufferParameterui64vNV)(GLenum target, GLenum pname, GLuint64EXT *params);
    void (MUT_STD_CALL *mutGetBufferPointervARB)(GLenum target, GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetBufferPointervOES)(GLenum target, GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetBufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
    void (MUT_STD_CALL *mutGetClipPlanefOES)(GLenum plane, GLfloat *equation);
    void (MUT_STD_CALL *mutGetClipPlanexOES)(GLenum plane, GLfixed *equation);
    void (MUT_STD_CALL *mutGetColorTable)(GLenum target, GLenum format, GLenum type, void *table);
    void (MUT_STD_CALL *mutGetColorTableEXT)(GLenum target, GLenum format, GLenum type, void *data);
    void (MUT_STD_CALL *mutGetColorTableParameterfv)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetColorTableParameterfvEXT)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetColorTableParameterfvSGI)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetColorTableParameteriv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetColorTableParameterivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetColorTableParameterivSGI)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetColorTableSGI)(GLenum target, GLenum format, GLenum type, void *table);
    void (MUT_STD_CALL *mutGetCombinerInputParameterfvNV)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetCombinerInputParameterivNV)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetCombinerOutputParameterfvNV)(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetCombinerOutputParameterivNV)(GLenum stage, GLenum portion, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetCombinerStageParameterfvNV)(GLenum stage, GLenum pname, GLfloat *params);
    GLuint (MUT_STD_CALL *mutGetCommandHeaderNV)(GLenum tokenID, GLuint size);
    void (MUT_STD_CALL *mutGetCompressedMultiTexImageEXT)(GLenum texunit, GLenum target, GLint lod, void *img);
    void (MUT_STD_CALL *mutGetCompressedTexImageARB)(GLenum target, GLint level, void *img);
    void (MUT_STD_CALL *mutGetCompressedTextureImageEXT)(GLuint texture, GLenum target, GLint lod, void *img);
    void (MUT_STD_CALL *mutGetConvolutionFilter)(GLenum target, GLenum format, GLenum type, void *image);
    void (MUT_STD_CALL *mutGetConvolutionFilterEXT)(GLenum target, GLenum format, GLenum type, void *image);
    void (MUT_STD_CALL *mutGetConvolutionParameterfv)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetConvolutionParameterfvEXT)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetConvolutionParameteriv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetConvolutionParameterivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetConvolutionParameterxvOES)(GLenum target, GLenum pname, GLfixed *params);
    void (MUT_STD_CALL *mutGetCoverageModulationTableNV)(GLsizei bufsize, GLfloat *v);
    GLuint (MUT_STD_CALL *mutGetDebugMessageLogAMD)(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
    GLuint (MUT_STD_CALL *mutGetDebugMessageLogARB)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    GLuint (MUT_STD_CALL *mutGetDebugMessageLogKHR)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    void (MUT_STD_CALL *mutGetDetailTexFuncSGIS)(GLenum target, GLfloat *points);
    void (MUT_STD_CALL *mutGetDoubleIndexedvEXT)(GLenum target, GLuint index, GLdouble *data);
    void (MUT_STD_CALL *mutGetDoublei_vEXT)(GLenum pname, GLuint index, GLdouble *params);
    void (MUT_STD_CALL *mutGetDriverControlStringQCOM)(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString);
    void (MUT_STD_CALL *mutGetDriverControlsQCOM)(GLint *num, GLsizei size, GLuint *driverControls);
    void (MUT_STD_CALL *mutGetFenceivNV)(GLuint fence, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetFinalCombinerInputParameterfvNV)(GLenum variable, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetFinalCombinerInputParameterivNV)(GLenum variable, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetFirstPerfQueryIdINTEL)(GLuint *queryId);
    void (MUT_STD_CALL *mutGetFixedvOES)(GLenum pname, GLfixed *params);
    void (MUT_STD_CALL *mutGetFloatIndexedvEXT)(GLenum target, GLuint index, GLfloat *data);
    void (MUT_STD_CALL *mutGetFloati_vEXT)(GLenum pname, GLuint index, GLfloat *params);
    void (MUT_STD_CALL *mutGetFloati_vNV)(GLenum target, GLuint index, GLfloat *data);
    void (MUT_STD_CALL *mutGetFloati_vOES)(GLenum target, GLuint index, GLfloat *data);
    void (MUT_STD_CALL *mutGetFogFuncSGIS)(GLfloat *points);
    GLint (MUT_STD_CALL *mutGetFragDataIndexEXT)(GLuint program, const GLchar *name);
    GLint (MUT_STD_CALL *mutGetFragDataLocationEXT)(GLuint program, const GLchar *name);
    void (MUT_STD_CALL *mutGetFragmentLightfvSGIX)(GLenum light, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetFragmentLightivSGIX)(GLenum light, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetFragmentMaterialfvSGIX)(GLenum face, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetFragmentMaterialivSGIX)(GLenum face, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetFramebufferAttachmentParameterivEXT)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetFramebufferParameterfvAMD)(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
    void (MUT_STD_CALL *mutGetFramebufferParameterivEXT)(GLuint framebuffer, GLenum pname, GLint *params);
    GLsizei (MUT_STD_CALL *mutGetFramebufferPixelLocalStorageSizeEXT)(GLuint target);
    GLenum (MUT_STD_CALL *mutGetGraphicsResetStatusARB)(void);
    GLenum (MUT_STD_CALL *mutGetGraphicsResetStatusEXT)(void);
    GLenum (MUT_STD_CALL *mutGetGraphicsResetStatusKHR)(void);
    GLhandleARB (MUT_STD_CALL *mutGetHandleARB)(GLenum pname);
    void (MUT_STD_CALL *mutGetHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    void (MUT_STD_CALL *mutGetHistogramEXT)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    void (MUT_STD_CALL *mutGetHistogramParameterfv)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetHistogramParameterfvEXT)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetHistogramParameteriv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetHistogramParameterivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetHistogramParameterxvOES)(GLenum target, GLenum pname, GLfixed *params);
    GLuint64 (MUT_STD_CALL *mutGetImageHandleARB)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    GLuint64 (MUT_STD_CALL *mutGetImageHandleNV)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    void (MUT_STD_CALL *mutGetImageTransformParameterfvHP)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetImageTransformParameterivHP)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetInfoLogARB)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
    GLint (MUT_STD_CALL *mutGetInstrumentsSGIX)(void);
    void (MUT_STD_CALL *mutGetInteger64vAPPLE)(GLenum pname, GLint64 *params);
    void (MUT_STD_CALL *mutGetIntegerIndexedvEXT)(GLenum target, GLuint index, GLint *data);
    void (MUT_STD_CALL *mutGetIntegeri_vEXT)(GLenum target, GLuint index, GLint *data);
    void (MUT_STD_CALL *mutGetIntegerui64i_vNV)(GLenum value, GLuint index, GLuint64EXT *result);
    void (MUT_STD_CALL *mutGetIntegerui64vNV)(GLenum value, GLuint64EXT *result);
    void (MUT_STD_CALL *mutGetInternalformatSampleivNV)(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params);
    void (MUT_STD_CALL *mutGetInvariantBooleanvEXT)(GLuint id, GLenum value, GLboolean *data);
    void (MUT_STD_CALL *mutGetInvariantFloatvEXT)(GLuint id, GLenum value, GLfloat *data);
    void (MUT_STD_CALL *mutGetInvariantIntegervEXT)(GLuint id, GLenum value, GLint *data);
    void (MUT_STD_CALL *mutGetLightxOES)(GLenum light, GLenum pname, GLfixed *params);
    void (MUT_STD_CALL *mutGetListParameterfvSGIX)(GLuint list, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetListParameterivSGIX)(GLuint list, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetLocalConstantBooleanvEXT)(GLuint id, GLenum value, GLboolean *data);
    void (MUT_STD_CALL *mutGetLocalConstantFloatvEXT)(GLuint id, GLenum value, GLfloat *data);
    void (MUT_STD_CALL *mutGetLocalConstantIntegervEXT)(GLuint id, GLenum value, GLint *data);
    void (MUT_STD_CALL *mutGetMapAttribParameterfvNV)(GLenum target, GLuint index, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMapAttribParameterivNV)(GLenum target, GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMapControlPointsNV)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
    void (MUT_STD_CALL *mutGetMapParameterfvNV)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMapParameterivNV)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMapxvOES)(GLenum target, GLenum query, GLfixed *v);
    void (MUT_STD_CALL *mutGetMaterialxOES)(GLenum face, GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutGetMemoryObjectParameterivEXT)(GLuint memoryObject, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    void (MUT_STD_CALL *mutGetMinmaxEXT)(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
    void (MUT_STD_CALL *mutGetMinmaxParameterfv)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMinmaxParameterfvEXT)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMinmaxParameteriv)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMinmaxParameterivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMultiTexEnvfvEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMultiTexEnvivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMultiTexGendvEXT)(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetMultiTexGenfvEXT)(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMultiTexGenivEXT)(GLenum texunit, GLenum coord, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMultiTexImageEXT)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    void (MUT_STD_CALL *mutGetMultiTexLevelParameterfvEXT)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMultiTexLevelParameterivEXT)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMultiTexParameterIivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMultiTexParameterIuivEXT)(GLenum texunit, GLenum target, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetMultiTexParameterfvEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetMultiTexParameterivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetMultisamplefvNV)(GLenum pname, GLuint index, GLfloat *val);
    void (MUT_STD_CALL *mutGetNamedBufferParameterivEXT)(GLuint buffer, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNamedBufferParameterui64vNV)(GLuint buffer, GLenum pname, GLuint64EXT *params);
    void (MUT_STD_CALL *mutGetNamedBufferPointervEXT)(GLuint buffer, GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetNamedBufferSubDataEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
    void (MUT_STD_CALL *mutGetNamedFramebufferAttachmentParameterivEXT)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNamedFramebufferParameterfvAMD)(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values);
    void (MUT_STD_CALL *mutGetNamedFramebufferParameterivEXT)(GLuint framebuffer, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNamedProgramLocalParameterIivEXT)(GLuint program, GLenum target, GLuint index, GLint *params);
    void (MUT_STD_CALL *mutGetNamedProgramLocalParameterIuivEXT)(GLuint program, GLenum target, GLuint index, GLuint *params);
    void (MUT_STD_CALL *mutGetNamedProgramLocalParameterdvEXT)(GLuint program, GLenum target, GLuint index, GLdouble *params);
    void (MUT_STD_CALL *mutGetNamedProgramLocalParameterfvEXT)(GLuint program, GLenum target, GLuint index, GLfloat *params);
    void (MUT_STD_CALL *mutGetNamedProgramStringEXT)(GLuint program, GLenum target, GLenum pname, void *string);
    void (MUT_STD_CALL *mutGetNamedProgramivEXT)(GLuint program, GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNamedRenderbufferParameterivEXT)(GLuint renderbuffer, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNamedStringARB)(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
    void (MUT_STD_CALL *mutGetNamedStringivARB)(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetNextPerfQueryIdINTEL)(GLuint queryId, GLuint *nextQueryId);
    void (MUT_STD_CALL *mutGetObjectBufferfvATI)(GLuint buffer, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetObjectBufferivATI)(GLuint buffer, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetObjectLabelEXT)(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
    void (MUT_STD_CALL *mutGetObjectLabelKHR)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
    void (MUT_STD_CALL *mutGetObjectParameterfvARB)(GLhandleARB obj, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetObjectParameterivAPPLE)(GLenum objectType, GLuint name, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetObjectParameterivARB)(GLhandleARB obj, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetObjectPtrLabelKHR)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
    void (MUT_STD_CALL *mutGetOcclusionQueryivNV)(GLuint id, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetOcclusionQueryuivNV)(GLuint id, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetPathColorGenfvNV)(GLenum color, GLenum pname, GLfloat *value);
    void (MUT_STD_CALL *mutGetPathColorGenivNV)(GLenum color, GLenum pname, GLint *value);
    void (MUT_STD_CALL *mutGetPathCommandsNV)(GLuint path, GLubyte *commands);
    void (MUT_STD_CALL *mutGetPathCoordsNV)(GLuint path, GLfloat *coords);
    void (MUT_STD_CALL *mutGetPathDashArrayNV)(GLuint path, GLfloat *dashArray);
    GLfloat (MUT_STD_CALL *mutGetPathLengthNV)(GLuint path, GLsizei startSegment, GLsizei numSegments);
    void (MUT_STD_CALL *mutGetPathMetricRangeNV)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
    void (MUT_STD_CALL *mutGetPathMetricsNV)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
    void (MUT_STD_CALL *mutGetPathParameterfvNV)(GLuint path, GLenum pname, GLfloat *value);
    void (MUT_STD_CALL *mutGetPathParameterivNV)(GLuint path, GLenum pname, GLint *value);
    void (MUT_STD_CALL *mutGetPathSpacingNV)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
    void (MUT_STD_CALL *mutGetPathTexGenfvNV)(GLenum texCoordSet, GLenum pname, GLfloat *value);
    void (MUT_STD_CALL *mutGetPathTexGenivNV)(GLenum texCoordSet, GLenum pname, GLint *value);
    void (MUT_STD_CALL *mutGetPerfCounterInfoINTEL)(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
    void (MUT_STD_CALL *mutGetPerfMonitorCounterDataAMD)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
    void (MUT_STD_CALL *mutGetPerfMonitorCounterInfoAMD)(GLuint group, GLuint counter, GLenum pname, void *data);
    void (MUT_STD_CALL *mutGetPerfMonitorCounterStringAMD)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
    void (MUT_STD_CALL *mutGetPerfMonitorCountersAMD)(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
    void (MUT_STD_CALL *mutGetPerfMonitorGroupStringAMD)(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
    void (MUT_STD_CALL *mutGetPerfMonitorGroupsAMD)(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
    void (MUT_STD_CALL *mutGetPerfQueryDataINTEL)(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
    void (MUT_STD_CALL *mutGetPerfQueryIdByNameINTEL)(GLchar *queryName, GLuint *queryId);
    void (MUT_STD_CALL *mutGetPerfQueryInfoINTEL)(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
    void (MUT_STD_CALL *mutGetPixelMapxv)(GLenum map, GLint size, GLfixed *values);
    void (MUT_STD_CALL *mutGetPixelTexGenParameterfvSGIS)(GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetPixelTexGenParameterivSGIS)(GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetPixelTransformParameterfvEXT)(GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetPixelTransformParameterivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetPointerIndexedvEXT)(GLenum target, GLuint index, void **data);
    void (MUT_STD_CALL *mutGetPointeri_vEXT)(GLenum pname, GLuint index, void **params);
    void (MUT_STD_CALL *mutGetPointervEXT)(GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetPointervKHR)(GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetProgramBinaryOES)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
    void (MUT_STD_CALL *mutGetProgramEnvParameterIivNV)(GLenum target, GLuint index, GLint *params);
    void (MUT_STD_CALL *mutGetProgramEnvParameterIuivNV)(GLenum target, GLuint index, GLuint *params);
    void (MUT_STD_CALL *mutGetProgramEnvParameterdvARB)(GLenum target, GLuint index, GLdouble *params);
    void (MUT_STD_CALL *mutGetProgramEnvParameterfvARB)(GLenum target, GLuint index, GLfloat *params);
    void (MUT_STD_CALL *mutGetProgramLocalParameterIivNV)(GLenum target, GLuint index, GLint *params);
    void (MUT_STD_CALL *mutGetProgramLocalParameterIuivNV)(GLenum target, GLuint index, GLuint *params);
    void (MUT_STD_CALL *mutGetProgramLocalParameterdvARB)(GLenum target, GLuint index, GLdouble *params);
    void (MUT_STD_CALL *mutGetProgramLocalParameterfvARB)(GLenum target, GLuint index, GLfloat *params);
    void (MUT_STD_CALL *mutGetProgramNamedParameterdvNV)(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
    void (MUT_STD_CALL *mutGetProgramNamedParameterfvNV)(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
    void (MUT_STD_CALL *mutGetProgramParameterdvNV)(GLenum target, GLuint index, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetProgramParameterfvNV)(GLenum target, GLuint index, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetProgramPipelineInfoLogEXT)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    void (MUT_STD_CALL *mutGetProgramPipelineivEXT)(GLuint pipeline, GLenum pname, GLint *params);
    GLint (MUT_STD_CALL *mutGetProgramResourceLocationIndexEXT)(GLuint program, GLenum programInterface, const GLchar *name);
    void (MUT_STD_CALL *mutGetProgramResourcefvNV)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params);
    void (MUT_STD_CALL *mutGetProgramStringARB)(GLenum target, GLenum pname, void *string);
    void (MUT_STD_CALL *mutGetProgramStringNV)(GLuint id, GLenum pname, GLubyte *program);
    void (MUT_STD_CALL *mutGetProgramSubroutineParameteruivNV)(GLenum target, GLuint index, GLuint *param);
    void (MUT_STD_CALL *mutGetProgramivARB)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetProgramivNV)(GLuint id, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetQueryObjecti64vEXT)(GLuint id, GLenum pname, GLint64 *params);
    void (MUT_STD_CALL *mutGetQueryObjectivARB)(GLuint id, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetQueryObjectivEXT)(GLuint id, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetQueryObjectui64vEXT)(GLuint id, GLenum pname, GLuint64 *params);
    void (MUT_STD_CALL *mutGetQueryObjectuivARB)(GLuint id, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetQueryObjectuivEXT)(GLuint id, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetQueryivARB)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetQueryivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetRenderbufferParameterivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetSamplerParameterIivEXT)(GLuint sampler, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetSamplerParameterIivOES)(GLuint sampler, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetSamplerParameterIuivEXT)(GLuint sampler, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetSamplerParameterIuivOES)(GLuint sampler, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetSemaphoreParameterui64vEXT)(GLuint semaphore, GLenum pname, GLuint64 *params);
    void (MUT_STD_CALL *mutGetSeparableFilter)(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
    void (MUT_STD_CALL *mutGetSeparableFilterEXT)(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
    void (MUT_STD_CALL *mutGetShaderSourceARB)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
    void (MUT_STD_CALL *mutGetSharpenTexFuncSGIS)(GLenum target, GLfloat *points);
    GLushort (MUT_STD_CALL *mutGetStageIndexNV)(GLenum shadertype);
    void (MUT_STD_CALL *mutGetSyncivAPPLE)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
    void (MUT_STD_CALL *mutGetTexBumpParameterfvATI)(GLenum pname, GLfloat *param);
    void (MUT_STD_CALL *mutGetTexBumpParameterivATI)(GLenum pname, GLint *param);
    void (MUT_STD_CALL *mutGetTexEnvxvOES)(GLenum target, GLenum pname, GLfixed *params);
    void (MUT_STD_CALL *mutGetTexFilterFuncSGIS)(GLenum target, GLenum filter, GLfloat *weights);
    void (MUT_STD_CALL *mutGetTexGenxvOES)(GLenum coord, GLenum pname, GLfixed *params);
    void (MUT_STD_CALL *mutGetTexLevelParameterxvOES)(GLenum target, GLint level, GLenum pname, GLfixed *params);
    void (MUT_STD_CALL *mutGetTexParameterIivEXT)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTexParameterIivOES)(GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTexParameterIuivEXT)(GLenum target, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetTexParameterIuivOES)(GLenum target, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetTexParameterPointervAPPLE)(GLenum target, GLenum pname, void **params);
    void (MUT_STD_CALL *mutGetTexParameterxvOES)(GLenum target, GLenum pname, GLfixed *params);
    GLuint64 (MUT_STD_CALL *mutGetTextureHandleARB)(GLuint texture);
    GLuint64 (MUT_STD_CALL *mutGetTextureHandleIMG)(GLuint texture);
    GLuint64 (MUT_STD_CALL *mutGetTextureHandleNV)(GLuint texture);
    void (MUT_STD_CALL *mutGetTextureImageEXT)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    void (MUT_STD_CALL *mutGetTextureLevelParameterfvEXT)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetTextureLevelParameterivEXT)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTextureParameterIivEXT)(GLuint texture, GLenum target, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTextureParameterIuivEXT)(GLuint texture, GLenum target, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetTextureParameterfvEXT)(GLuint texture, GLenum target, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetTextureParameterivEXT)(GLuint texture, GLenum target, GLenum pname, GLint *params);
    GLuint64 (MUT_STD_CALL *mutGetTextureSamplerHandleARB)(GLuint texture, GLuint sampler);
    GLuint64 (MUT_STD_CALL *mutGetTextureSamplerHandleIMG)(GLuint texture, GLuint sampler);
    GLuint64 (MUT_STD_CALL *mutGetTextureSamplerHandleNV)(GLuint texture, GLuint sampler);
    void (MUT_STD_CALL *mutGetTrackMatrixivNV)(GLenum target, GLuint address, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetTransformFeedbackVaryingEXT)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    void (MUT_STD_CALL *mutGetTransformFeedbackVaryingNV)(GLuint program, GLuint index, GLint *location);
    void (MUT_STD_CALL *mutGetTranslatedShaderSourceANGLE)(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source);
    GLint (MUT_STD_CALL *mutGetUniformBufferSizeEXT)(GLuint program, GLint location);
    GLint (MUT_STD_CALL *mutGetUniformLocationARB)(GLhandleARB programObj, const GLcharARB *name);
    GLintptr (MUT_STD_CALL *mutGetUniformOffsetEXT)(GLuint program, GLint location);
    void (MUT_STD_CALL *mutGetUniformfvARB)(GLhandleARB programObj, GLint location, GLfloat *params);
    void (MUT_STD_CALL *mutGetUniformi64vARB)(GLuint program, GLint location, GLint64 *params);
    void (MUT_STD_CALL *mutGetUniformi64vNV)(GLuint program, GLint location, GLint64EXT *params);
    void (MUT_STD_CALL *mutGetUniformivARB)(GLhandleARB programObj, GLint location, GLint *params);
    void (MUT_STD_CALL *mutGetUniformui64vARB)(GLuint program, GLint location, GLuint64 *params);
    void (MUT_STD_CALL *mutGetUniformui64vNV)(GLuint program, GLint location, GLuint64EXT *params);
    void (MUT_STD_CALL *mutGetUniformuivEXT)(GLuint program, GLint location, GLuint *params);
    void (MUT_STD_CALL *mutGetUnsignedBytei_vEXT)(GLenum target, GLuint index, GLubyte *data);
    void (MUT_STD_CALL *mutGetUnsignedBytevEXT)(GLenum pname, GLubyte *data);
    void (MUT_STD_CALL *mutGetVariantArrayObjectfvATI)(GLuint id, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetVariantArrayObjectivATI)(GLuint id, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVariantBooleanvEXT)(GLuint id, GLenum value, GLboolean *data);
    void (MUT_STD_CALL *mutGetVariantFloatvEXT)(GLuint id, GLenum value, GLfloat *data);
    void (MUT_STD_CALL *mutGetVariantIntegervEXT)(GLuint id, GLenum value, GLint *data);
    void (MUT_STD_CALL *mutGetVariantPointervEXT)(GLuint id, GLenum value, void **data);
    GLint (MUT_STD_CALL *mutGetVaryingLocationNV)(GLuint program, const GLchar *name);
    void (MUT_STD_CALL *mutGetVertexArrayIntegeri_vEXT)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
    void (MUT_STD_CALL *mutGetVertexArrayIntegervEXT)(GLuint vaobj, GLenum pname, GLint *param);
    void (MUT_STD_CALL *mutGetVertexArrayPointeri_vEXT)(GLuint vaobj, GLuint index, GLenum pname, void **param);
    void (MUT_STD_CALL *mutGetVertexArrayPointervEXT)(GLuint vaobj, GLenum pname, void **param);
    void (MUT_STD_CALL *mutGetVertexAttribArrayObjectfvATI)(GLuint index, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetVertexAttribArrayObjectivATI)(GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVertexAttribIivEXT)(GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVertexAttribIuivEXT)(GLuint index, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutGetVertexAttribLdvEXT)(GLuint index, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetVertexAttribLi64vNV)(GLuint index, GLenum pname, GLint64EXT *params);
    void (MUT_STD_CALL *mutGetVertexAttribLui64vARB)(GLuint index, GLenum pname, GLuint64EXT *params);
    void (MUT_STD_CALL *mutGetVertexAttribLui64vNV)(GLuint index, GLenum pname, GLuint64EXT *params);
    void (MUT_STD_CALL *mutGetVertexAttribPointervARB)(GLuint index, GLenum pname, void **pointer);
    void (MUT_STD_CALL *mutGetVertexAttribPointervNV)(GLuint index, GLenum pname, void **pointer);
    void (MUT_STD_CALL *mutGetVertexAttribdvARB)(GLuint index, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetVertexAttribdvNV)(GLuint index, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetVertexAttribfvARB)(GLuint index, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetVertexAttribfvNV)(GLuint index, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetVertexAttribivARB)(GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVertexAttribivNV)(GLuint index, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVideoCaptureStreamdvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
    void (MUT_STD_CALL *mutGetVideoCaptureStreamfvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
    void (MUT_STD_CALL *mutGetVideoCaptureStreamivNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVideoCaptureivNV)(GLuint video_capture_slot, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVideoi64vNV)(GLuint video_slot, GLenum pname, GLint64EXT *params);
    void (MUT_STD_CALL *mutGetVideoivNV)(GLuint video_slot, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutGetVideoui64vNV)(GLuint video_slot, GLenum pname, GLuint64EXT *params);
    void (MUT_STD_CALL *mutGetVideouivNV)(GLuint video_slot, GLenum pname, GLuint *params);
    GLVULKANPROCNV (MUT_STD_CALL *mutGetVkProcAddrNV)(const GLchar *name);
    void (MUT_STD_CALL *mutGetnColorTableARB)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
    void (MUT_STD_CALL *mutGetnCompressedTexImageARB)(GLenum target, GLint lod, GLsizei bufSize, void *img);
    void (MUT_STD_CALL *mutGetnConvolutionFilterARB)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
    void (MUT_STD_CALL *mutGetnHistogramARB)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
    void (MUT_STD_CALL *mutGetnMapdvARB)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
    void (MUT_STD_CALL *mutGetnMapfvARB)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
    void (MUT_STD_CALL *mutGetnMapivARB)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
    void (MUT_STD_CALL *mutGetnMinmaxARB)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
    void (MUT_STD_CALL *mutGetnPixelMapfvARB)(GLenum map, GLsizei bufSize, GLfloat *values);
    void (MUT_STD_CALL *mutGetnPixelMapuivARB)(GLenum map, GLsizei bufSize, GLuint *values);
    void (MUT_STD_CALL *mutGetnPixelMapusvARB)(GLenum map, GLsizei bufSize, GLushort *values);
    void (MUT_STD_CALL *mutGetnPolygonStippleARB)(GLsizei bufSize, GLubyte *pattern);
    void (MUT_STD_CALL *mutGetnSeparableFilterARB)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
    void (MUT_STD_CALL *mutGetnTexImageARB)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
    void (MUT_STD_CALL *mutGetnUniformdvARB)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
    void (MUT_STD_CALL *mutGetnUniformfvARB)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    void (MUT_STD_CALL *mutGetnUniformfvEXT)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    void (MUT_STD_CALL *mutGetnUniformfvKHR)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    void (MUT_STD_CALL *mutGetnUniformi64vARB)(GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
    void (MUT_STD_CALL *mutGetnUniformivARB)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
    void (MUT_STD_CALL *mutGetnUniformivEXT)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
    void (MUT_STD_CALL *mutGetnUniformivKHR)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
    void (MUT_STD_CALL *mutGetnUniformui64vARB)(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
    void (MUT_STD_CALL *mutGetnUniformuivARB)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    void (MUT_STD_CALL *mutGetnUniformuivKHR)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    void (MUT_STD_CALL *mutGlobalAlphaFactorbSUN)(GLbyte factor);
    void (MUT_STD_CALL *mutGlobalAlphaFactordSUN)(GLdouble factor);
    void (MUT_STD_CALL *mutGlobalAlphaFactorfSUN)(GLfloat factor);
    void (MUT_STD_CALL *mutGlobalAlphaFactoriSUN)(GLint factor);
    void (MUT_STD_CALL *mutGlobalAlphaFactorsSUN)(GLshort factor);
    void (MUT_STD_CALL *mutGlobalAlphaFactorubSUN)(GLubyte factor);
    void (MUT_STD_CALL *mutGlobalAlphaFactoruiSUN)(GLuint factor);
    void (MUT_STD_CALL *mutGlobalAlphaFactorusSUN)(GLushort factor);
    void (MUT_STD_CALL *mutHintPGI)(GLenum target, GLint mode);
    void (MUT_STD_CALL *mutHistogram)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
    void (MUT_STD_CALL *mutHistogramEXT)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
    void (MUT_STD_CALL *mutIglooInterfaceSGIX)(GLenum pname, const void *params);
    void (MUT_STD_CALL *mutImageTransformParameterfHP)(GLenum target, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutImageTransformParameterfvHP)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutImageTransformParameteriHP)(GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutImageTransformParameterivHP)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutImportMemoryFdEXT)(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
    void (MUT_STD_CALL *mutImportMemoryWin32HandleEXT)(GLuint memory, GLuint64 size, GLenum handleType, void *handle);
    void (MUT_STD_CALL *mutImportMemoryWin32NameEXT)(GLuint memory, GLuint64 size, GLenum handleType, const void *name);
    void (MUT_STD_CALL *mutImportSemaphoreFdEXT)(GLuint semaphore, GLenum handleType, GLint fd);
    void (MUT_STD_CALL *mutImportSemaphoreWin32HandleEXT)(GLuint semaphore, GLenum handleType, void *handle);
    void (MUT_STD_CALL *mutImportSemaphoreWin32NameEXT)(GLuint semaphore, GLenum handleType, const void *name);
    GLsync (MUT_STD_CALL *mutImportSyncEXT)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
    void (MUT_STD_CALL *mutIndexFormatNV)(GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutIndexFuncEXT)(GLenum func, GLclampf ref);
    void (MUT_STD_CALL *mutIndexMaterialEXT)(GLenum face, GLenum mode);
    void (MUT_STD_CALL *mutIndexPointerEXT)(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    void (MUT_STD_CALL *mutIndexPointerListIBM)(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutIndexxOES)(GLfixed component);
    void (MUT_STD_CALL *mutIndexxvOES)(const GLfixed *component);
    void (MUT_STD_CALL *mutInsertComponentEXT)(GLuint res, GLuint src, GLuint num);
    void (MUT_STD_CALL *mutInsertEventMarkerEXT)(GLsizei length, const GLchar *marker);
    void (MUT_STD_CALL *mutInstrumentsBufferSGIX)(GLsizei size, GLint *buffer);
    void (MUT_STD_CALL *mutInterpolatePathsNV)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
    GLboolean (MUT_STD_CALL *mutIsAsyncMarkerSGIX)(GLuint marker);
    GLboolean (MUT_STD_CALL *mutIsBufferARB)(GLuint buffer);
    GLboolean (MUT_STD_CALL *mutIsBufferResidentNV)(GLenum target);
    GLboolean (MUT_STD_CALL *mutIsCommandListNV)(GLuint list);
    GLboolean (MUT_STD_CALL *mutIsEnabledIndexedEXT)(GLenum target, GLuint index);
    GLboolean (MUT_STD_CALL *mutIsEnablediEXT)(GLenum target, GLuint index);
    GLboolean (MUT_STD_CALL *mutIsEnablediNV)(GLenum target, GLuint index);
    GLboolean (MUT_STD_CALL *mutIsEnablediOES)(GLenum target, GLuint index);
    GLboolean (MUT_STD_CALL *mutIsFenceAPPLE)(GLuint fence);
    GLboolean (MUT_STD_CALL *mutIsFenceNV)(GLuint fence);
    GLboolean (MUT_STD_CALL *mutIsFramebufferEXT)(GLuint framebuffer);
    GLboolean (MUT_STD_CALL *mutIsImageHandleResidentARB)(GLuint64 handle);
    GLboolean (MUT_STD_CALL *mutIsImageHandleResidentNV)(GLuint64 handle);
    GLboolean (MUT_STD_CALL *mutIsMemoryObjectEXT)(GLuint memoryObject);
    GLboolean (MUT_STD_CALL *mutIsNameAMD)(GLenum identifier, GLuint name);
    GLboolean (MUT_STD_CALL *mutIsNamedBufferResidentNV)(GLuint buffer);
    GLboolean (MUT_STD_CALL *mutIsNamedStringARB)(GLint namelen, const GLchar *name);
    GLboolean (MUT_STD_CALL *mutIsObjectBufferATI)(GLuint buffer);
    GLboolean (MUT_STD_CALL *mutIsOcclusionQueryNV)(GLuint id);
    GLboolean (MUT_STD_CALL *mutIsPathNV)(GLuint path);
    GLboolean (MUT_STD_CALL *mutIsPointInFillPathNV)(GLuint path, GLuint mask, GLfloat x, GLfloat y);
    GLboolean (MUT_STD_CALL *mutIsPointInStrokePathNV)(GLuint path, GLfloat x, GLfloat y);
    GLboolean (MUT_STD_CALL *mutIsProgramARB)(GLuint program);
    GLboolean (MUT_STD_CALL *mutIsProgramNV)(GLuint id);
    GLboolean (MUT_STD_CALL *mutIsProgramPipelineEXT)(GLuint pipeline);
    GLboolean (MUT_STD_CALL *mutIsQueryARB)(GLuint id);
    GLboolean (MUT_STD_CALL *mutIsQueryEXT)(GLuint id);
    GLboolean (MUT_STD_CALL *mutIsRenderbufferEXT)(GLuint renderbuffer);
    GLboolean (MUT_STD_CALL *mutIsSemaphoreEXT)(GLuint semaphore);
    GLboolean (MUT_STD_CALL *mutIsStateNV)(GLuint state);
    GLboolean (MUT_STD_CALL *mutIsSyncAPPLE)(GLsync sync);
    GLboolean (MUT_STD_CALL *mutIsTextureEXT)(GLuint texture);
    GLboolean (MUT_STD_CALL *mutIsTextureHandleResidentARB)(GLuint64 handle);
    GLboolean (MUT_STD_CALL *mutIsTextureHandleResidentNV)(GLuint64 handle);
    GLboolean (MUT_STD_CALL *mutIsTransformFeedbackNV)(GLuint id);
    GLboolean (MUT_STD_CALL *mutIsVariantEnabledEXT)(GLuint id, GLenum cap);
    GLboolean (MUT_STD_CALL *mutIsVertexArrayAPPLE)(GLuint array);
    GLboolean (MUT_STD_CALL *mutIsVertexArrayOES)(GLuint array);
    GLboolean (MUT_STD_CALL *mutIsVertexAttribEnabledAPPLE)(GLuint index, GLenum pname);
    void (MUT_STD_CALL *mutLGPUCopyImageSubDataNVX)(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
    void (MUT_STD_CALL *mutLGPUInterlockNVX)(void);
    void (MUT_STD_CALL *mutLGPUNamedBufferSubDataNVX)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    void (MUT_STD_CALL *mutLabelObjectEXT)(GLenum type, GLuint object, GLsizei length, const GLchar *label);
    void (MUT_STD_CALL *mutLightEnviSGIX)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutLightModelxOES)(GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutLightModelxvOES)(GLenum pname, const GLfixed *param);
    void (MUT_STD_CALL *mutLightxOES)(GLenum light, GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutLightxvOES)(GLenum light, GLenum pname, const GLfixed *params);
    void (MUT_STD_CALL *mutLineWidthxOES)(GLfixed width);
    void (MUT_STD_CALL *mutLinkProgramARB)(GLhandleARB programObj);
    void (MUT_STD_CALL *mutListDrawCommandsStatesClientNV)(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    void (MUT_STD_CALL *mutListParameterfSGIX)(GLuint list, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutListParameterfvSGIX)(GLuint list, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutListParameteriSGIX)(GLuint list, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutListParameterivSGIX)(GLuint list, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutLoadIdentityDeformationMapSGIX)(GLbitfield mask);
    void (MUT_STD_CALL *mutLoadMatrixxOES)(const GLfixed *m);
    void (MUT_STD_CALL *mutLoadProgramNV)(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
    void (MUT_STD_CALL *mutLoadTransposeMatrixdARB)(const GLdouble *m);
    void (MUT_STD_CALL *mutLoadTransposeMatrixfARB)(const GLfloat *m);
    void (MUT_STD_CALL *mutLoadTransposeMatrixxOES)(const GLfixed *m);
    void (MUT_STD_CALL *mutLockArraysEXT)(GLint first, GLsizei count);
    void (MUT_STD_CALL *mutMakeBufferNonResidentNV)(GLenum target);
    void (MUT_STD_CALL *mutMakeBufferResidentNV)(GLenum target, GLenum access);
    void (MUT_STD_CALL *mutMakeImageHandleNonResidentARB)(GLuint64 handle);
    void (MUT_STD_CALL *mutMakeImageHandleNonResidentNV)(GLuint64 handle);
    void (MUT_STD_CALL *mutMakeImageHandleResidentARB)(GLuint64 handle, GLenum access);
    void (MUT_STD_CALL *mutMakeImageHandleResidentNV)(GLuint64 handle, GLenum access);
    void (MUT_STD_CALL *mutMakeNamedBufferNonResidentNV)(GLuint buffer);
    void (MUT_STD_CALL *mutMakeNamedBufferResidentNV)(GLuint buffer, GLenum access);
    void (MUT_STD_CALL *mutMakeTextureHandleNonResidentARB)(GLuint64 handle);
    void (MUT_STD_CALL *mutMakeTextureHandleNonResidentNV)(GLuint64 handle);
    void (MUT_STD_CALL *mutMakeTextureHandleResidentARB)(GLuint64 handle);
    void (MUT_STD_CALL *mutMakeTextureHandleResidentNV)(GLuint64 handle);
    void (MUT_STD_CALL *mutMap1xOES)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
    void (MUT_STD_CALL *mutMap2xOES)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
    void *(MUT_STD_CALL *mutMapBufferARB)(GLenum target, GLenum access);
    void *(MUT_STD_CALL *mutMapBufferOES)(GLenum target, GLenum access);
    void *(MUT_STD_CALL *mutMapBufferRangeEXT)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
    void (MUT_STD_CALL *mutMapControlPointsNV)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
    void (MUT_STD_CALL *mutMapGrid1xOES)(GLint n, GLfixed u1, GLfixed u2);
    void (MUT_STD_CALL *mutMapGrid2xOES)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
    void *(MUT_STD_CALL *mutMapNamedBufferEXT)(GLuint buffer, GLenum access);
    void *(MUT_STD_CALL *mutMapNamedBufferRangeEXT)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    void *(MUT_STD_CALL *mutMapObjectBufferATI)(GLuint buffer);
    void (MUT_STD_CALL *mutMapParameterfvNV)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutMapParameterivNV)(GLenum target, GLenum pname, const GLint *params);
    void *(MUT_STD_CALL *mutMapTexture2DINTEL)(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout);
    void (MUT_STD_CALL *mutMapVertexAttrib1dAPPLE)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
    void (MUT_STD_CALL *mutMapVertexAttrib1fAPPLE)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
    void (MUT_STD_CALL *mutMapVertexAttrib2dAPPLE)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
    void (MUT_STD_CALL *mutMapVertexAttrib2fAPPLE)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
    void (MUT_STD_CALL *mutMaterialxOES)(GLenum face, GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutMaterialxvOES)(GLenum face, GLenum pname, const GLfixed *param);
    void (MUT_STD_CALL *mutMatrixFrustumEXT)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    void (MUT_STD_CALL *mutMatrixIndexPointerARB)(GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutMatrixIndexubvARB)(GLint size, const GLubyte *indices);
    void (MUT_STD_CALL *mutMatrixIndexuivARB)(GLint size, const GLuint *indices);
    void (MUT_STD_CALL *mutMatrixIndexusvARB)(GLint size, const GLushort *indices);
    void (MUT_STD_CALL *mutMatrixLoad3x2fNV)(GLenum matrixMode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixLoad3x3fNV)(GLenum matrixMode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixLoadIdentityEXT)(GLenum mode);
    void (MUT_STD_CALL *mutMatrixLoadTranspose3x3fNV)(GLenum matrixMode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixLoadTransposedEXT)(GLenum mode, const GLdouble *m);
    void (MUT_STD_CALL *mutMatrixLoadTransposefEXT)(GLenum mode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixLoaddEXT)(GLenum mode, const GLdouble *m);
    void (MUT_STD_CALL *mutMatrixLoadfEXT)(GLenum mode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixMult3x2fNV)(GLenum matrixMode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixMult3x3fNV)(GLenum matrixMode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixMultTranspose3x3fNV)(GLenum matrixMode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixMultTransposedEXT)(GLenum mode, const GLdouble *m);
    void (MUT_STD_CALL *mutMatrixMultTransposefEXT)(GLenum mode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixMultdEXT)(GLenum mode, const GLdouble *m);
    void (MUT_STD_CALL *mutMatrixMultfEXT)(GLenum mode, const GLfloat *m);
    void (MUT_STD_CALL *mutMatrixOrthoEXT)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    void (MUT_STD_CALL *mutMatrixPopEXT)(GLenum mode);
    void (MUT_STD_CALL *mutMatrixPushEXT)(GLenum mode);
    void (MUT_STD_CALL *mutMatrixRotatedEXT)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutMatrixRotatefEXT)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutMatrixScaledEXT)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutMatrixScalefEXT)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutMatrixTranslatedEXT)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutMatrixTranslatefEXT)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutMaxShaderCompilerThreadsARB)(GLuint count);
    void (MUT_STD_CALL *mutMemoryBarrierEXT)(GLbitfield barriers);
    void (MUT_STD_CALL *mutMemoryObjectParameterivEXT)(GLuint memoryObject, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutMinSampleShadingARB)(GLfloat value);
    void (MUT_STD_CALL *mutMinSampleShadingOES)(GLfloat value);
    void (MUT_STD_CALL *mutMinmax)(GLenum target, GLenum internalformat, GLboolean sink);
    void (MUT_STD_CALL *mutMinmaxEXT)(GLenum target, GLenum internalformat, GLboolean sink);
    void (MUT_STD_CALL *mutMultMatrixxOES)(const GLfixed *m);
    void (MUT_STD_CALL *mutMultTransposeMatrixdARB)(const GLdouble *m);
    void (MUT_STD_CALL *mutMultTransposeMatrixfARB)(const GLfloat *m);
    void (MUT_STD_CALL *mutMultTransposeMatrixxOES)(const GLfixed *m);
    void (MUT_STD_CALL *mutMultiDrawArraysEXT)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
    void (MUT_STD_CALL *mutMultiDrawArraysIndirectAMD)(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiDrawArraysIndirectBindlessCountNV)(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
    void (MUT_STD_CALL *mutMultiDrawArraysIndirectBindlessNV)(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
    void (MUT_STD_CALL *mutMultiDrawArraysIndirectCountARB)(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiDrawArraysIndirectEXT)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiDrawElementArrayAPPLE)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
    void (MUT_STD_CALL *mutMultiDrawElementsBaseVertexEXT)(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex);
    void (MUT_STD_CALL *mutMultiDrawElementsBaseVertexOES)(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex);
    void (MUT_STD_CALL *mutMultiDrawElementsEXT)(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount);
    void (MUT_STD_CALL *mutMultiDrawElementsIndirectAMD)(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiDrawElementsIndirectBindlessCountNV)(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
    void (MUT_STD_CALL *mutMultiDrawElementsIndirectBindlessNV)(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
    void (MUT_STD_CALL *mutMultiDrawElementsIndirectCountARB)(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiDrawElementsIndirectEXT)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
    void (MUT_STD_CALL *mutMultiDrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
    void (MUT_STD_CALL *mutMultiModeDrawArraysIBM)(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
    void (MUT_STD_CALL *mutMultiModeDrawElementsIBM)(const GLenum *mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, GLint modestride);
    void (MUT_STD_CALL *mutMultiTexBufferEXT)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
    void (MUT_STD_CALL *mutMultiTexCoord1bOES)(GLenum texture, GLbyte s);
    void (MUT_STD_CALL *mutMultiTexCoord1bvOES)(GLenum texture, const GLbyte *coords);
    void (MUT_STD_CALL *mutMultiTexCoord1dARB)(GLenum target, GLdouble s);
    void (MUT_STD_CALL *mutMultiTexCoord1dvARB)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord1fARB)(GLenum target, GLfloat s);
    void (MUT_STD_CALL *mutMultiTexCoord1fvARB)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord1hNV)(GLenum target, GLhalfNV s);
    void (MUT_STD_CALL *mutMultiTexCoord1hvNV)(GLenum target, const GLhalfNV *v);
    void (MUT_STD_CALL *mutMultiTexCoord1iARB)(GLenum target, GLint s);
    void (MUT_STD_CALL *mutMultiTexCoord1ivARB)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord1sARB)(GLenum target, GLshort s);
    void (MUT_STD_CALL *mutMultiTexCoord1svARB)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoord1xOES)(GLenum texture, GLfixed s);
    void (MUT_STD_CALL *mutMultiTexCoord1xvOES)(GLenum texture, const GLfixed *coords);
    void (MUT_STD_CALL *mutMultiTexCoord2bOES)(GLenum texture, GLbyte s, GLbyte t);
    void (MUT_STD_CALL *mutMultiTexCoord2bvOES)(GLenum texture, const GLbyte *coords);
    void (MUT_STD_CALL *mutMultiTexCoord2dARB)(GLenum target, GLdouble s, GLdouble t);
    void (MUT_STD_CALL *mutMultiTexCoord2dvARB)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord2fARB)(GLenum target, GLfloat s, GLfloat t);
    void (MUT_STD_CALL *mutMultiTexCoord2fvARB)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord2hNV)(GLenum target, GLhalfNV s, GLhalfNV t);
    void (MUT_STD_CALL *mutMultiTexCoord2hvNV)(GLenum target, const GLhalfNV *v);
    void (MUT_STD_CALL *mutMultiTexCoord2iARB)(GLenum target, GLint s, GLint t);
    void (MUT_STD_CALL *mutMultiTexCoord2ivARB)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord2sARB)(GLenum target, GLshort s, GLshort t);
    void (MUT_STD_CALL *mutMultiTexCoord2svARB)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoord2xOES)(GLenum texture, GLfixed s, GLfixed t);
    void (MUT_STD_CALL *mutMultiTexCoord2xvOES)(GLenum texture, const GLfixed *coords);
    void (MUT_STD_CALL *mutMultiTexCoord3bOES)(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
    void (MUT_STD_CALL *mutMultiTexCoord3bvOES)(GLenum texture, const GLbyte *coords);
    void (MUT_STD_CALL *mutMultiTexCoord3dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
    void (MUT_STD_CALL *mutMultiTexCoord3dvARB)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord3fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
    void (MUT_STD_CALL *mutMultiTexCoord3fvARB)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord3hNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
    void (MUT_STD_CALL *mutMultiTexCoord3hvNV)(GLenum target, const GLhalfNV *v);
    void (MUT_STD_CALL *mutMultiTexCoord3iARB)(GLenum target, GLint s, GLint t, GLint r);
    void (MUT_STD_CALL *mutMultiTexCoord3ivARB)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord3sARB)(GLenum target, GLshort s, GLshort t, GLshort r);
    void (MUT_STD_CALL *mutMultiTexCoord3svARB)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoord3xOES)(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
    void (MUT_STD_CALL *mutMultiTexCoord3xvOES)(GLenum texture, const GLfixed *coords);
    void (MUT_STD_CALL *mutMultiTexCoord4bOES)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
    void (MUT_STD_CALL *mutMultiTexCoord4bvOES)(GLenum texture, const GLbyte *coords);
    void (MUT_STD_CALL *mutMultiTexCoord4dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    void (MUT_STD_CALL *mutMultiTexCoord4dvARB)(GLenum target, const GLdouble *v);
    void (MUT_STD_CALL *mutMultiTexCoord4fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    void (MUT_STD_CALL *mutMultiTexCoord4fvARB)(GLenum target, const GLfloat *v);
    void (MUT_STD_CALL *mutMultiTexCoord4hNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
    void (MUT_STD_CALL *mutMultiTexCoord4hvNV)(GLenum target, const GLhalfNV *v);
    void (MUT_STD_CALL *mutMultiTexCoord4iARB)(GLenum target, GLint s, GLint t, GLint r, GLint q);
    void (MUT_STD_CALL *mutMultiTexCoord4ivARB)(GLenum target, const GLint *v);
    void (MUT_STD_CALL *mutMultiTexCoord4sARB)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
    void (MUT_STD_CALL *mutMultiTexCoord4svARB)(GLenum target, const GLshort *v);
    void (MUT_STD_CALL *mutMultiTexCoord4xOES)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
    void (MUT_STD_CALL *mutMultiTexCoord4xvOES)(GLenum texture, const GLfixed *coords);
    void (MUT_STD_CALL *mutMultiTexCoordPointerEXT)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutMultiTexEnvfEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutMultiTexEnvfvEXT)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutMultiTexEnviEXT)(GLenum texunit, GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutMultiTexEnvivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutMultiTexGendEXT)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
    void (MUT_STD_CALL *mutMultiTexGendvEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
    void (MUT_STD_CALL *mutMultiTexGenfEXT)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutMultiTexGenfvEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutMultiTexGeniEXT)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutMultiTexGenivEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutMultiTexImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutMultiTexParameterIivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutMultiTexParameterIuivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
    void (MUT_STD_CALL *mutMultiTexParameterfEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutMultiTexParameterfvEXT)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutMultiTexParameteriEXT)(GLenum texunit, GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutMultiTexParameterivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutMultiTexRenderbufferEXT)(GLenum texunit, GLenum target, GLuint renderbuffer);
    void (MUT_STD_CALL *mutMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutMulticastBarrierNV)(void);
    void (MUT_STD_CALL *mutMulticastBlitFramebufferNV)(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    void (MUT_STD_CALL *mutMulticastBufferSubDataNV)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
    void (MUT_STD_CALL *mutMulticastCopyBufferSubDataNV)(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    void (MUT_STD_CALL *mutMulticastCopyImageSubDataNV)(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    void (MUT_STD_CALL *mutMulticastFramebufferSampleLocationsfvNV)(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutMulticastGetQueryObjecti64vNV)(GLuint gpu, GLuint id, GLenum pname, GLint64 *params);
    void (MUT_STD_CALL *mutMulticastGetQueryObjectivNV)(GLuint gpu, GLuint id, GLenum pname, GLint *params);
    void (MUT_STD_CALL *mutMulticastGetQueryObjectui64vNV)(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params);
    void (MUT_STD_CALL *mutMulticastGetQueryObjectuivNV)(GLuint gpu, GLuint id, GLenum pname, GLuint *params);
    void (MUT_STD_CALL *mutMulticastWaitSyncNV)(GLuint signalGpu, GLbitfield waitGpuMask);
    void (MUT_STD_CALL *mutNamedBufferDataEXT)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
    void (MUT_STD_CALL *mutNamedBufferPageCommitmentARB)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
    void (MUT_STD_CALL *mutNamedBufferPageCommitmentEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
    void (MUT_STD_CALL *mutNamedBufferStorageEXT)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
    void (MUT_STD_CALL *mutNamedBufferStorageExternalEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
    void (MUT_STD_CALL *mutNamedBufferStorageMemEXT)(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutNamedBufferSubDataEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    void (MUT_STD_CALL *mutNamedCopyBufferSubDataEXT)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    void (MUT_STD_CALL *mutNamedFramebufferParameteriEXT)(GLuint framebuffer, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutNamedFramebufferRenderbufferEXT)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    void (MUT_STD_CALL *mutNamedFramebufferSampleLocationsfvARB)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutNamedFramebufferSampleLocationsfvNV)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutNamedFramebufferSamplePositionsfvAMD)(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values);
    void (MUT_STD_CALL *mutNamedFramebufferTexture1DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutNamedFramebufferTexture2DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutNamedFramebufferTexture3DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    void (MUT_STD_CALL *mutNamedFramebufferTextureEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    void (MUT_STD_CALL *mutNamedFramebufferTextureFaceEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
    void (MUT_STD_CALL *mutNamedFramebufferTextureLayerEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    void (MUT_STD_CALL *mutNamedProgramLocalParameter4dEXT)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutNamedProgramLocalParameter4dvEXT)(GLuint program, GLenum target, GLuint index, const GLdouble *params);
    void (MUT_STD_CALL *mutNamedProgramLocalParameter4fEXT)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutNamedProgramLocalParameter4fvEXT)(GLuint program, GLenum target, GLuint index, const GLfloat *params);
    void (MUT_STD_CALL *mutNamedProgramLocalParameterI4iEXT)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    void (MUT_STD_CALL *mutNamedProgramLocalParameterI4ivEXT)(GLuint program, GLenum target, GLuint index, const GLint *params);
    void (MUT_STD_CALL *mutNamedProgramLocalParameterI4uiEXT)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    void (MUT_STD_CALL *mutNamedProgramLocalParameterI4uivEXT)(GLuint program, GLenum target, GLuint index, const GLuint *params);
    void (MUT_STD_CALL *mutNamedProgramLocalParameters4fvEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
    void (MUT_STD_CALL *mutNamedProgramLocalParametersI4ivEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
    void (MUT_STD_CALL *mutNamedProgramLocalParametersI4uivEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
    void (MUT_STD_CALL *mutNamedProgramStringEXT)(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
    void (MUT_STD_CALL *mutNamedRenderbufferStorageEXT)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutNamedRenderbufferStorageMultisampleCoverageEXT)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutNamedRenderbufferStorageMultisampleEXT)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutNamedStringARB)(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
    GLuint (MUT_STD_CALL *mutNewBufferRegion)(GLenum region);
    GLuint (MUT_STD_CALL *mutNewObjectBufferATI)(GLsizei size, const void *pointer, GLenum usage);
    void (MUT_STD_CALL *mutNormal3fVertex3fSUN)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutNormal3fVertex3fvSUN)(const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutNormal3hNV)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
    void (MUT_STD_CALL *mutNormal3hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutNormal3xOES)(GLfixed nx, GLfixed ny, GLfixed nz);
    void (MUT_STD_CALL *mutNormal3xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutNormalFormatNV)(GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutNormalPointerEXT)(GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    void (MUT_STD_CALL *mutNormalPointerListIBM)(GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutNormalPointervINTEL)(GLenum type, const void **pointer);
    void (MUT_STD_CALL *mutNormalStream3bATI)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
    void (MUT_STD_CALL *mutNormalStream3bvATI)(GLenum stream, const GLbyte *coords);
    void (MUT_STD_CALL *mutNormalStream3dATI)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
    void (MUT_STD_CALL *mutNormalStream3dvATI)(GLenum stream, const GLdouble *coords);
    void (MUT_STD_CALL *mutNormalStream3fATI)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
    void (MUT_STD_CALL *mutNormalStream3fvATI)(GLenum stream, const GLfloat *coords);
    void (MUT_STD_CALL *mutNormalStream3iATI)(GLenum stream, GLint nx, GLint ny, GLint nz);
    void (MUT_STD_CALL *mutNormalStream3ivATI)(GLenum stream, const GLint *coords);
    void (MUT_STD_CALL *mutNormalStream3sATI)(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
    void (MUT_STD_CALL *mutNormalStream3svATI)(GLenum stream, const GLshort *coords);
    void (MUT_STD_CALL *mutObjectLabelKHR)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
    void (MUT_STD_CALL *mutObjectPtrLabelKHR)(const void *ptr, GLsizei length, const GLchar *label);
    GLenum (MUT_STD_CALL *mutObjectPurgeableAPPLE)(GLenum objectType, GLuint name, GLenum option);
    GLenum (MUT_STD_CALL *mutObjectUnpurgeableAPPLE)(GLenum objectType, GLuint name, GLenum option);
    void (MUT_STD_CALL *mutOrthofOES)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
    void (MUT_STD_CALL *mutOrthoxOES)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
    void (MUT_STD_CALL *mutPNTrianglesfATI)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPNTrianglesiATI)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutPassTexCoordATI)(GLuint dst, GLuint coord, GLenum swizzle);
    void (MUT_STD_CALL *mutPassThroughxOES)(GLfixed token);
    void (MUT_STD_CALL *mutPatchParameteriEXT)(GLenum pname, GLint value);
    void (MUT_STD_CALL *mutPatchParameteriOES)(GLenum pname, GLint value);
    void (MUT_STD_CALL *mutPathColorGenNV)(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
    void (MUT_STD_CALL *mutPathCommandsNV)(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
    void (MUT_STD_CALL *mutPathCoordsNV)(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
    void (MUT_STD_CALL *mutPathCoverDepthFuncNV)(GLenum func);
    void (MUT_STD_CALL *mutPathDashArrayNV)(GLuint path, GLsizei dashCount, const GLfloat *dashArray);
    void (MUT_STD_CALL *mutPathFogGenNV)(GLenum genMode);
    GLenum (MUT_STD_CALL *mutPathGlyphIndexArrayNV)(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    GLenum (MUT_STD_CALL *mutPathGlyphIndexRangeNV)(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
    void (MUT_STD_CALL *mutPathGlyphRangeNV)(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    void (MUT_STD_CALL *mutPathGlyphsNV)(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    GLenum (MUT_STD_CALL *mutPathMemoryGlyphIndexArrayNV)(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    void (MUT_STD_CALL *mutPathParameterfNV)(GLuint path, GLenum pname, GLfloat value);
    void (MUT_STD_CALL *mutPathParameterfvNV)(GLuint path, GLenum pname, const GLfloat *value);
    void (MUT_STD_CALL *mutPathParameteriNV)(GLuint path, GLenum pname, GLint value);
    void (MUT_STD_CALL *mutPathParameterivNV)(GLuint path, GLenum pname, const GLint *value);
    void (MUT_STD_CALL *mutPathStencilDepthOffsetNV)(GLfloat factor, GLfloat units);
    void (MUT_STD_CALL *mutPathStencilFuncNV)(GLenum func, GLint ref, GLuint mask);
    void (MUT_STD_CALL *mutPathStringNV)(GLuint path, GLenum format, GLsizei length, const void *pathString);
    void (MUT_STD_CALL *mutPathSubCommandsNV)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
    void (MUT_STD_CALL *mutPathSubCoordsNV)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
    void (MUT_STD_CALL *mutPathTexGenNV)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
    void (MUT_STD_CALL *mutPauseTransformFeedbackNV)(void);
    void (MUT_STD_CALL *mutPixelDataRangeNV)(GLenum target, GLsizei length, const void *pointer);
    void (MUT_STD_CALL *mutPixelMapx)(GLenum map, GLint size, const GLfixed *values);
    void (MUT_STD_CALL *mutPixelStorex)(GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutPixelTexGenParameterfSGIS)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPixelTexGenParameterfvSGIS)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutPixelTexGenParameteriSGIS)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutPixelTexGenParameterivSGIS)(GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutPixelTexGenSGIX)(GLenum mode);
    void (MUT_STD_CALL *mutPixelTransferxOES)(GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutPixelTransformParameterfEXT)(GLenum target, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPixelTransformParameterfvEXT)(GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutPixelTransformParameteriEXT)(GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutPixelTransformParameterivEXT)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutPixelZoomxOES)(GLfixed xfactor, GLfixed yfactor);
    GLboolean (MUT_STD_CALL *mutPointAlongPathNV)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
    void (MUT_STD_CALL *mutPointParameterfARB)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPointParameterfEXT)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPointParameterfSGIS)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutPointParameterfvARB)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutPointParameterfvEXT)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutPointParameterfvSGIS)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutPointParameteriNV)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutPointParameterivNV)(GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutPointParameterxvOES)(GLenum pname, const GLfixed *params);
    void (MUT_STD_CALL *mutPointSizexOES)(GLfixed size);
    GLint (MUT_STD_CALL *mutPollAsyncSGIX)(GLuint *markerp);
    GLint (MUT_STD_CALL *mutPollInstrumentsSGIX)(GLint *marker_p);
    void (MUT_STD_CALL *mutPolygonModeNV)(GLenum face, GLenum mode);
    void (MUT_STD_CALL *mutPolygonOffsetClampEXT)(GLfloat factor, GLfloat units, GLfloat clamp);
    void (MUT_STD_CALL *mutPolygonOffsetEXT)(GLfloat factor, GLfloat bias);
    void (MUT_STD_CALL *mutPolygonOffsetxOES)(GLfixed factor, GLfixed units);
    void (MUT_STD_CALL *mutPopDebugGroupKHR)(void);
    void (MUT_STD_CALL *mutPopGroupMarkerEXT)(void);
    void (MUT_STD_CALL *mutPresentFrameDualFillNV)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
    void (MUT_STD_CALL *mutPresentFrameKeyedNV)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
    void (MUT_STD_CALL *mutPrimitiveBoundingBoxARB)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
    void (MUT_STD_CALL *mutPrimitiveBoundingBoxEXT)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
    void (MUT_STD_CALL *mutPrimitiveBoundingBoxOES)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
    void (MUT_STD_CALL *mutPrimitiveRestartIndexNV)(GLuint index);
    void (MUT_STD_CALL *mutPrimitiveRestartNV)(void);
    void (MUT_STD_CALL *mutPrioritizeTexturesEXT)(GLsizei n, const GLuint *textures, const GLclampf *priorities);
    void (MUT_STD_CALL *mutPrioritizeTexturesxOES)(GLsizei n, const GLuint *textures, const GLfixed *priorities);
    void (MUT_STD_CALL *mutProgramBinaryOES)(GLuint program, GLenum binaryFormat, const void *binary, GLint length);
    void (MUT_STD_CALL *mutProgramBufferParametersIivNV)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
    void (MUT_STD_CALL *mutProgramBufferParametersIuivNV)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
    void (MUT_STD_CALL *mutProgramBufferParametersfvNV)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
    void (MUT_STD_CALL *mutProgramEnvParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutProgramEnvParameter4dvARB)(GLenum target, GLuint index, const GLdouble *params);
    void (MUT_STD_CALL *mutProgramEnvParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutProgramEnvParameter4fvARB)(GLenum target, GLuint index, const GLfloat *params);
    void (MUT_STD_CALL *mutProgramEnvParameterI4iNV)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    void (MUT_STD_CALL *mutProgramEnvParameterI4ivNV)(GLenum target, GLuint index, const GLint *params);
    void (MUT_STD_CALL *mutProgramEnvParameterI4uiNV)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    void (MUT_STD_CALL *mutProgramEnvParameterI4uivNV)(GLenum target, GLuint index, const GLuint *params);
    void (MUT_STD_CALL *mutProgramEnvParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
    void (MUT_STD_CALL *mutProgramEnvParametersI4ivNV)(GLenum target, GLuint index, GLsizei count, const GLint *params);
    void (MUT_STD_CALL *mutProgramEnvParametersI4uivNV)(GLenum target, GLuint index, GLsizei count, const GLuint *params);
    void (MUT_STD_CALL *mutProgramLocalParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutProgramLocalParameter4dvARB)(GLenum target, GLuint index, const GLdouble *params);
    void (MUT_STD_CALL *mutProgramLocalParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutProgramLocalParameter4fvARB)(GLenum target, GLuint index, const GLfloat *params);
    void (MUT_STD_CALL *mutProgramLocalParameterI4iNV)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    void (MUT_STD_CALL *mutProgramLocalParameterI4ivNV)(GLenum target, GLuint index, const GLint *params);
    void (MUT_STD_CALL *mutProgramLocalParameterI4uiNV)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    void (MUT_STD_CALL *mutProgramLocalParameterI4uivNV)(GLenum target, GLuint index, const GLuint *params);
    void (MUT_STD_CALL *mutProgramLocalParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
    void (MUT_STD_CALL *mutProgramLocalParametersI4ivNV)(GLenum target, GLuint index, GLsizei count, const GLint *params);
    void (MUT_STD_CALL *mutProgramLocalParametersI4uivNV)(GLenum target, GLuint index, GLsizei count, const GLuint *params);
    void (MUT_STD_CALL *mutProgramNamedParameter4dNV)(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutProgramNamedParameter4dvNV)(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
    void (MUT_STD_CALL *mutProgramNamedParameter4fNV)(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutProgramNamedParameter4fvNV)(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
    void (MUT_STD_CALL *mutProgramParameter4dNV)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutProgramParameter4dvNV)(GLenum target, GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutProgramParameter4fNV)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutProgramParameter4fvNV)(GLenum target, GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutProgramParameteriARB)(GLuint program, GLenum pname, GLint value);
    void (MUT_STD_CALL *mutProgramParameteriEXT)(GLuint program, GLenum pname, GLint value);
    void (MUT_STD_CALL *mutProgramParameters4dvNV)(GLenum target, GLuint index, GLsizei count, const GLdouble *v);
    void (MUT_STD_CALL *mutProgramParameters4fvNV)(GLenum target, GLuint index, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutProgramPathFragmentInputGenNV)(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
    void (MUT_STD_CALL *mutProgramStringARB)(GLenum target, GLenum format, GLsizei len, const void *string);
    void (MUT_STD_CALL *mutProgramSubroutineParametersuivNV)(GLenum target, GLsizei count, const GLuint *params);
    void (MUT_STD_CALL *mutProgramUniform1dEXT)(GLuint program, GLint location, GLdouble x);
    void (MUT_STD_CALL *mutProgramUniform1dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform1fEXT)(GLuint program, GLint location, GLfloat v0);
    void (MUT_STD_CALL *mutProgramUniform1fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform1i64ARB)(GLuint program, GLint location, GLint64 x);
    void (MUT_STD_CALL *mutProgramUniform1i64NV)(GLuint program, GLint location, GLint64EXT x);
    void (MUT_STD_CALL *mutProgramUniform1i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutProgramUniform1i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform1iEXT)(GLuint program, GLint location, GLint v0);
    void (MUT_STD_CALL *mutProgramUniform1ivEXT)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform1ui64ARB)(GLuint program, GLint location, GLuint64 x);
    void (MUT_STD_CALL *mutProgramUniform1ui64NV)(GLuint program, GLint location, GLuint64EXT x);
    void (MUT_STD_CALL *mutProgramUniform1ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutProgramUniform1ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform1uiEXT)(GLuint program, GLint location, GLuint v0);
    void (MUT_STD_CALL *mutProgramUniform1uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniform2dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutProgramUniform2dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform2fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
    void (MUT_STD_CALL *mutProgramUniform2fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform2i64ARB)(GLuint program, GLint location, GLint64 x, GLint64 y);
    void (MUT_STD_CALL *mutProgramUniform2i64NV)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
    void (MUT_STD_CALL *mutProgramUniform2i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutProgramUniform2i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform2iEXT)(GLuint program, GLint location, GLint v0, GLint v1);
    void (MUT_STD_CALL *mutProgramUniform2ivEXT)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform2ui64ARB)(GLuint program, GLint location, GLuint64 x, GLuint64 y);
    void (MUT_STD_CALL *mutProgramUniform2ui64NV)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
    void (MUT_STD_CALL *mutProgramUniform2ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutProgramUniform2ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform2uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1);
    void (MUT_STD_CALL *mutProgramUniform2uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniform3dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutProgramUniform3dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform3fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    void (MUT_STD_CALL *mutProgramUniform3fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform3i64ARB)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
    void (MUT_STD_CALL *mutProgramUniform3i64NV)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    void (MUT_STD_CALL *mutProgramUniform3i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutProgramUniform3i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform3iEXT)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    void (MUT_STD_CALL *mutProgramUniform3ivEXT)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform3ui64ARB)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    void (MUT_STD_CALL *mutProgramUniform3ui64NV)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    void (MUT_STD_CALL *mutProgramUniform3ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutProgramUniform3ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform3uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    void (MUT_STD_CALL *mutProgramUniform3uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniform4dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutProgramUniform4dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniform4fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    void (MUT_STD_CALL *mutProgramUniform4fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniform4i64ARB)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    void (MUT_STD_CALL *mutProgramUniform4i64NV)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    void (MUT_STD_CALL *mutProgramUniform4i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutProgramUniform4i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform4iEXT)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    void (MUT_STD_CALL *mutProgramUniform4ivEXT)(GLuint program, GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutProgramUniform4ui64ARB)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    void (MUT_STD_CALL *mutProgramUniform4ui64NV)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    void (MUT_STD_CALL *mutProgramUniform4ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutProgramUniform4ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutProgramUniform4uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    void (MUT_STD_CALL *mutProgramUniform4uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutProgramUniformHandleui64ARB)(GLuint program, GLint location, GLuint64 value);
    void (MUT_STD_CALL *mutProgramUniformHandleui64IMG)(GLuint program, GLint location, GLuint64 value);
    void (MUT_STD_CALL *mutProgramUniformHandleui64NV)(GLuint program, GLint location, GLuint64 value);
    void (MUT_STD_CALL *mutProgramUniformHandleui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    void (MUT_STD_CALL *mutProgramUniformHandleui64vIMG)(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    void (MUT_STD_CALL *mutProgramUniformHandleui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    void (MUT_STD_CALL *mutProgramUniformMatrix2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix2x4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix3x4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    void (MUT_STD_CALL *mutProgramUniformMatrix4x3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutProgramUniformui64NV)(GLuint program, GLint location, GLuint64EXT value);
    void (MUT_STD_CALL *mutProgramUniformui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutProgramVertexLimitNV)(GLenum target, GLint limit);
    void (MUT_STD_CALL *mutProvokingVertexEXT)(GLenum mode);
    void (MUT_STD_CALL *mutPushClientAttribDefaultEXT)(GLbitfield mask);
    void (MUT_STD_CALL *mutPushDebugGroupKHR)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
    void (MUT_STD_CALL *mutPushGroupMarkerEXT)(GLsizei length, const GLchar *marker);
    void (MUT_STD_CALL *mutQueryCounterEXT)(GLuint id, GLenum target);
    GLbitfield (MUT_STD_CALL *mutQueryMatrixxOES)(GLfixed *mantissa, GLint *exponent);
    void (MUT_STD_CALL *mutQueryObjectParameteruiAMD)(GLenum target, GLuint id, GLenum pname, GLuint param);
    void (MUT_STD_CALL *mutRasterPos2xOES)(GLfixed x, GLfixed y);
    void (MUT_STD_CALL *mutRasterPos2xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutRasterPos3xOES)(GLfixed x, GLfixed y, GLfixed z);
    void (MUT_STD_CALL *mutRasterPos3xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutRasterPos4xOES)(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
    void (MUT_STD_CALL *mutRasterPos4xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutRasterSamplesEXT)(GLuint samples, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutReadBufferIndexedEXT)(GLenum src, GLint index);
    void (MUT_STD_CALL *mutReadBufferNV)(GLenum mode);
    void (MUT_STD_CALL *mutReadBufferRegion)(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutReadInstrumentsSGIX)(GLint marker);
    void (MUT_STD_CALL *mutReadnPixelsARB)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    void (MUT_STD_CALL *mutReadnPixelsEXT)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    void (MUT_STD_CALL *mutReadnPixelsKHR)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    void (MUT_STD_CALL *mutRectxOES)(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
    void (MUT_STD_CALL *mutRectxvOES)(const GLfixed *v1, const GLfixed *v2);
    void (MUT_STD_CALL *mutReferencePlaneSGIX)(const GLdouble *equation);
    GLboolean (MUT_STD_CALL *mutReleaseKeyedMutexWin32EXT)(GLuint memory, GLuint64 key);
    void (MUT_STD_CALL *mutRenderGpuMaskNV)(GLbitfield mask);
    void (MUT_STD_CALL *mutRenderbufferStorageEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutRenderbufferStorageMultisampleANGLE)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutRenderbufferStorageMultisampleAPPLE)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutRenderbufferStorageMultisampleCoverageNV)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutRenderbufferStorageMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutRenderbufferStorageMultisampleIMG)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutRenderbufferStorageMultisampleNV)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutReplacementCodePointerSUN)(GLenum type, GLsizei stride, const void **pointer);
    void (MUT_STD_CALL *mutReplacementCodeubSUN)(GLubyte code);
    void (MUT_STD_CALL *mutReplacementCodeubvSUN)(const GLubyte *code);
    void (MUT_STD_CALL *mutReplacementCodeuiColor3fVertex3fSUN)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiColor3fVertex3fvSUN)(const GLuint *rc, const GLfloat *c, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuiColor4ubVertex3fSUN)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint *rc, const GLubyte *c, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuiNormal3fVertex3fSUN)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint *rc, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuiSUN)(GLuint code);
    void (MUT_STD_CALL *mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint *rc, const GLfloat *tc, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuiVertex3fSUN)(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutReplacementCodeuiVertex3fvSUN)(const GLuint *rc, const GLfloat *v);
    void (MUT_STD_CALL *mutReplacementCodeuivSUN)(const GLuint *code);
    void (MUT_STD_CALL *mutReplacementCodeusSUN)(GLushort code);
    void (MUT_STD_CALL *mutReplacementCodeusvSUN)(const GLushort *code);
    void (MUT_STD_CALL *mutRequestResidentProgramsNV)(GLsizei n, const GLuint *programs);
    void (MUT_STD_CALL *mutResetHistogram)(GLenum target);
    void (MUT_STD_CALL *mutResetHistogramEXT)(GLenum target);
    void (MUT_STD_CALL *mutResetMinmax)(GLenum target);
    void (MUT_STD_CALL *mutResetMinmaxEXT)(GLenum target);
    void (MUT_STD_CALL *mutResizeBuffersMESA)(void);
    void (MUT_STD_CALL *mutResolveDepthValuesNV)(void);
    void (MUT_STD_CALL *mutResolveMultisampleFramebufferAPPLE)(void);
    void (MUT_STD_CALL *mutResumeTransformFeedbackNV)(void);
    void (MUT_STD_CALL *mutRotatexOES)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
    void (MUT_STD_CALL *mutSampleCoverageARB)(GLfloat value, GLboolean invert);
    void (MUT_STD_CALL *mutSampleMapATI)(GLuint dst, GLuint interp, GLenum swizzle);
    void (MUT_STD_CALL *mutSampleMaskEXT)(GLclampf value, GLboolean invert);
    void (MUT_STD_CALL *mutSampleMaskIndexedNV)(GLuint index, GLbitfield mask);
    void (MUT_STD_CALL *mutSampleMaskSGIS)(GLclampf value, GLboolean invert);
    void (MUT_STD_CALL *mutSamplePatternEXT)(GLenum pattern);
    void (MUT_STD_CALL *mutSamplePatternSGIS)(GLenum pattern);
    void (MUT_STD_CALL *mutSamplerParameterIivEXT)(GLuint sampler, GLenum pname, const GLint *param);
    void (MUT_STD_CALL *mutSamplerParameterIivOES)(GLuint sampler, GLenum pname, const GLint *param);
    void (MUT_STD_CALL *mutSamplerParameterIuivEXT)(GLuint sampler, GLenum pname, const GLuint *param);
    void (MUT_STD_CALL *mutSamplerParameterIuivOES)(GLuint sampler, GLenum pname, const GLuint *param);
    void (MUT_STD_CALL *mutScalexOES)(GLfixed x, GLfixed y, GLfixed z);
    void (MUT_STD_CALL *mutScissorArrayvNV)(GLuint first, GLsizei count, const GLint *v);
    void (MUT_STD_CALL *mutScissorArrayvOES)(GLuint first, GLsizei count, const GLint *v);
    void (MUT_STD_CALL *mutScissorIndexedNV)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutScissorIndexedOES)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutScissorIndexedvNV)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutScissorIndexedvOES)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutSecondaryColor3bEXT)(GLbyte red, GLbyte green, GLbyte blue);
    void (MUT_STD_CALL *mutSecondaryColor3bvEXT)(const GLbyte *v);
    void (MUT_STD_CALL *mutSecondaryColor3dEXT)(GLdouble red, GLdouble green, GLdouble blue);
    void (MUT_STD_CALL *mutSecondaryColor3dvEXT)(const GLdouble *v);
    void (MUT_STD_CALL *mutSecondaryColor3fEXT)(GLfloat red, GLfloat green, GLfloat blue);
    void (MUT_STD_CALL *mutSecondaryColor3fvEXT)(const GLfloat *v);
    void (MUT_STD_CALL *mutSecondaryColor3hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
    void (MUT_STD_CALL *mutSecondaryColor3hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutSecondaryColor3iEXT)(GLint red, GLint green, GLint blue);
    void (MUT_STD_CALL *mutSecondaryColor3ivEXT)(const GLint *v);
    void (MUT_STD_CALL *mutSecondaryColor3sEXT)(GLshort red, GLshort green, GLshort blue);
    void (MUT_STD_CALL *mutSecondaryColor3svEXT)(const GLshort *v);
    void (MUT_STD_CALL *mutSecondaryColor3ubEXT)(GLubyte red, GLubyte green, GLubyte blue);
    void (MUT_STD_CALL *mutSecondaryColor3ubvEXT)(const GLubyte *v);
    void (MUT_STD_CALL *mutSecondaryColor3uiEXT)(GLuint red, GLuint green, GLuint blue);
    void (MUT_STD_CALL *mutSecondaryColor3uivEXT)(const GLuint *v);
    void (MUT_STD_CALL *mutSecondaryColor3usEXT)(GLushort red, GLushort green, GLushort blue);
    void (MUT_STD_CALL *mutSecondaryColor3usvEXT)(const GLushort *v);
    void (MUT_STD_CALL *mutSecondaryColorFormatNV)(GLint size, GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutSecondaryColorPointerEXT)(GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutSecondaryColorPointerListIBM)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutSelectPerfMonitorCountersAMD)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
    void (MUT_STD_CALL *mutSemaphoreParameterui64vEXT)(GLuint semaphore, GLenum pname, const GLuint64 *params);
    void (MUT_STD_CALL *mutSeparableFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
    void (MUT_STD_CALL *mutSeparableFilter2DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
    void (MUT_STD_CALL *mutSetFenceAPPLE)(GLuint fence);
    void (MUT_STD_CALL *mutSetFenceNV)(GLuint fence, GLenum condition);
    void (MUT_STD_CALL *mutSetFragmentShaderConstantATI)(GLuint dst, const GLfloat *value);
    void (MUT_STD_CALL *mutSetInvariantEXT)(GLuint id, GLenum type, const void *addr);
    void (MUT_STD_CALL *mutSetLocalConstantEXT)(GLuint id, GLenum type, const void *addr);
    void (MUT_STD_CALL *mutSetMultisamplefvAMD)(GLenum pname, GLuint index, const GLfloat *val);
    void (MUT_STD_CALL *mutShaderOp1EXT)(GLenum op, GLuint res, GLuint arg1);
    void (MUT_STD_CALL *mutShaderOp2EXT)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
    void (MUT_STD_CALL *mutShaderOp3EXT)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
    void (MUT_STD_CALL *mutShaderSourceARB)(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length);
    void (MUT_STD_CALL *mutSharpenTexFuncSGIS)(GLenum target, GLsizei n, const GLfloat *points);
    void (MUT_STD_CALL *mutSignalSemaphoreEXT)(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);
    void (MUT_STD_CALL *mutSignalVkFenceNV)(GLuint64 vkFence);
    void (MUT_STD_CALL *mutSignalVkSemaphoreNV)(GLuint64 vkSemaphore);
    void (MUT_STD_CALL *mutSpecializeShaderARB)(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
    void (MUT_STD_CALL *mutSpriteParameterfSGIX)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutSpriteParameterfvSGIX)(GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutSpriteParameteriSGIX)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutSpriteParameterivSGIX)(GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutStartInstrumentsSGIX)(void);
    void (MUT_STD_CALL *mutStartTilingQCOM)(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);
    void (MUT_STD_CALL *mutStateCaptureNV)(GLuint state, GLenum mode);
    void (MUT_STD_CALL *mutStencilClearTagEXT)(GLsizei stencilTagBits, GLuint stencilClearTag);
    void (MUT_STD_CALL *mutStencilFillPathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
    void (MUT_STD_CALL *mutStencilFillPathNV)(GLuint path, GLenum fillMode, GLuint mask);
    void (MUT_STD_CALL *mutStencilFuncSeparateATI)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
    void (MUT_STD_CALL *mutStencilOpSeparateATI)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    void (MUT_STD_CALL *mutStencilOpValueAMD)(GLenum face, GLuint value);
    void (MUT_STD_CALL *mutStencilStrokePathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
    void (MUT_STD_CALL *mutStencilStrokePathNV)(GLuint path, GLint reference, GLuint mask);
    void (MUT_STD_CALL *mutStencilThenCoverFillPathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    void (MUT_STD_CALL *mutStencilThenCoverFillPathNV)(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
    void (MUT_STD_CALL *mutStencilThenCoverStrokePathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    void (MUT_STD_CALL *mutStencilThenCoverStrokePathNV)(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
    void (MUT_STD_CALL *mutStopInstrumentsSGIX)(GLint marker);
    void (MUT_STD_CALL *mutStringMarkerGREMEDY)(GLsizei len, const void *string);
    void (MUT_STD_CALL *mutSubpixelPrecisionBiasNV)(GLuint xbits, GLuint ybits);
    void (MUT_STD_CALL *mutSwizzleEXT)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
    void (MUT_STD_CALL *mutSyncTextureINTEL)(GLuint texture);
    void (MUT_STD_CALL *mutTagSampleBufferSGIX)(void);
    void (MUT_STD_CALL *mutTangent3bEXT)(GLbyte tx, GLbyte ty, GLbyte tz);
    void (MUT_STD_CALL *mutTangent3bvEXT)(const GLbyte *v);
    void (MUT_STD_CALL *mutTangent3dEXT)(GLdouble tx, GLdouble ty, GLdouble tz);
    void (MUT_STD_CALL *mutTangent3dvEXT)(const GLdouble *v);
    void (MUT_STD_CALL *mutTangent3fEXT)(GLfloat tx, GLfloat ty, GLfloat tz);
    void (MUT_STD_CALL *mutTangent3fvEXT)(const GLfloat *v);
    void (MUT_STD_CALL *mutTangent3iEXT)(GLint tx, GLint ty, GLint tz);
    void (MUT_STD_CALL *mutTangent3ivEXT)(const GLint *v);
    void (MUT_STD_CALL *mutTangent3sEXT)(GLshort tx, GLshort ty, GLshort tz);
    void (MUT_STD_CALL *mutTangent3svEXT)(const GLshort *v);
    void (MUT_STD_CALL *mutTangentPointerEXT)(GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutTbufferMask3DFX)(GLuint mask);
    void (MUT_STD_CALL *mutTessellationFactorAMD)(GLfloat factor);
    void (MUT_STD_CALL *mutTessellationModeAMD)(GLenum mode);
    GLboolean (MUT_STD_CALL *mutTestFenceAPPLE)(GLuint fence);
    GLboolean (MUT_STD_CALL *mutTestFenceNV)(GLuint fence);
    GLboolean (MUT_STD_CALL *mutTestObjectAPPLE)(GLenum object, GLuint name);
    void (MUT_STD_CALL *mutTexBufferARB)(GLenum target, GLenum internalformat, GLuint buffer);
    void (MUT_STD_CALL *mutTexBufferEXT)(GLenum target, GLenum internalformat, GLuint buffer);
    void (MUT_STD_CALL *mutTexBufferOES)(GLenum target, GLenum internalformat, GLuint buffer);
    void (MUT_STD_CALL *mutTexBufferRangeEXT)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutTexBufferRangeOES)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutTexBumpParameterfvATI)(GLenum pname, const GLfloat *param);
    void (MUT_STD_CALL *mutTexBumpParameterivATI)(GLenum pname, const GLint *param);
    void (MUT_STD_CALL *mutTexCoord1bOES)(GLbyte s);
    void (MUT_STD_CALL *mutTexCoord1bvOES)(const GLbyte *coords);
    void (MUT_STD_CALL *mutTexCoord1hNV)(GLhalfNV s);
    void (MUT_STD_CALL *mutTexCoord1hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutTexCoord1xOES)(GLfixed s);
    void (MUT_STD_CALL *mutTexCoord1xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutTexCoord2bOES)(GLbyte s, GLbyte t);
    void (MUT_STD_CALL *mutTexCoord2bvOES)(const GLbyte *coords);
    void (MUT_STD_CALL *mutTexCoord2fColor3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutTexCoord2fColor3fVertex3fvSUN)(const GLfloat *tc, const GLfloat *c, const GLfloat *v);
    void (MUT_STD_CALL *mutTexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutTexCoord2fColor4ubVertex3fSUN)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutTexCoord2fColor4ubVertex3fvSUN)(const GLfloat *tc, const GLubyte *c, const GLfloat *v);
    void (MUT_STD_CALL *mutTexCoord2fNormal3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutTexCoord2fNormal3fVertex3fvSUN)(const GLfloat *tc, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutTexCoord2fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutTexCoord2fVertex3fvSUN)(const GLfloat *tc, const GLfloat *v);
    void (MUT_STD_CALL *mutTexCoord2hNV)(GLhalfNV s, GLhalfNV t);
    void (MUT_STD_CALL *mutTexCoord2hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutTexCoord2xOES)(GLfixed s, GLfixed t);
    void (MUT_STD_CALL *mutTexCoord2xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutTexCoord3bOES)(GLbyte s, GLbyte t, GLbyte r);
    void (MUT_STD_CALL *mutTexCoord3bvOES)(const GLbyte *coords);
    void (MUT_STD_CALL *mutTexCoord3hNV)(GLhalfNV s, GLhalfNV t, GLhalfNV r);
    void (MUT_STD_CALL *mutTexCoord3hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutTexCoord3xOES)(GLfixed s, GLfixed t, GLfixed r);
    void (MUT_STD_CALL *mutTexCoord3xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutTexCoord4bOES)(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
    void (MUT_STD_CALL *mutTexCoord4bvOES)(const GLbyte *coords);
    void (MUT_STD_CALL *mutTexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutTexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
    void (MUT_STD_CALL *mutTexCoord4fVertex4fSUN)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutTexCoord4fVertex4fvSUN)(const GLfloat *tc, const GLfloat *v);
    void (MUT_STD_CALL *mutTexCoord4hNV)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
    void (MUT_STD_CALL *mutTexCoord4hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutTexCoord4xOES)(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
    void (MUT_STD_CALL *mutTexCoord4xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutTexCoordFormatNV)(GLint size, GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutTexCoordPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    void (MUT_STD_CALL *mutTexCoordPointerListIBM)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutTexCoordPointervINTEL)(GLint size, GLenum type, const void **pointer);
    void (MUT_STD_CALL *mutTexEnvxOES)(GLenum target, GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutTexEnvxvOES)(GLenum target, GLenum pname, const GLfixed *params);
    void (MUT_STD_CALL *mutTexFilterFuncSGIS)(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
    void (MUT_STD_CALL *mutTexGenxOES)(GLenum coord, GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutTexGenxvOES)(GLenum coord, GLenum pname, const GLfixed *params);
    void (MUT_STD_CALL *mutTexImage2DMultisampleCoverageNV)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    void (MUT_STD_CALL *mutTexImage3DEXT)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexImage3DMultisampleCoverageNV)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    void (MUT_STD_CALL *mutTexImage3DOES)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexImage4DSGIS)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexPageCommitmentARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    void (MUT_STD_CALL *mutTexPageCommitmentEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    void (MUT_STD_CALL *mutTexParameterIivEXT)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutTexParameterIivOES)(GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutTexParameterIuivEXT)(GLenum target, GLenum pname, const GLuint *params);
    void (MUT_STD_CALL *mutTexParameterIuivOES)(GLenum target, GLenum pname, const GLuint *params);
    void (MUT_STD_CALL *mutTexParameterxOES)(GLenum target, GLenum pname, GLfixed param);
    void (MUT_STD_CALL *mutTexParameterxvOES)(GLenum target, GLenum pname, const GLfixed *params);
    void (MUT_STD_CALL *mutTexRenderbufferNV)(GLenum target, GLuint renderbuffer);
    void (MUT_STD_CALL *mutTexStorage1DEXT)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    void (MUT_STD_CALL *mutTexStorage2DEXT)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutTexStorage3DEXT)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    void (MUT_STD_CALL *mutTexStorage3DMultisampleOES)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTexStorageMem1DEXT)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTexStorageMem2DEXT)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTexStorageMem2DMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTexStorageMem3DEXT)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTexStorageMem3DMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTexStorageSparseAMD)(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
    void (MUT_STD_CALL *mutTexSubImage1DEXT)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexSubImage2DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexSubImage3DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexSubImage3DOES)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTexSubImage4DSGIS)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureBarrierNV)(void);
    void (MUT_STD_CALL *mutTextureBufferEXT)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
    void (MUT_STD_CALL *mutTextureBufferRangeEXT)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    void (MUT_STD_CALL *mutTextureColorMaskSGIS)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    void (MUT_STD_CALL *mutTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureImage2DMultisampleCoverageNV)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    void (MUT_STD_CALL *mutTextureImage2DMultisampleNV)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
    void (MUT_STD_CALL *mutTextureImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureImage3DMultisampleCoverageNV)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    void (MUT_STD_CALL *mutTextureImage3DMultisampleNV)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
    void (MUT_STD_CALL *mutTextureLightEXT)(GLenum pname);
    void (MUT_STD_CALL *mutTextureMaterialEXT)(GLenum face, GLenum mode);
    void (MUT_STD_CALL *mutTextureNormalEXT)(GLenum mode);
    void (MUT_STD_CALL *mutTexturePageCommitmentEXT)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    void (MUT_STD_CALL *mutTextureParameterIivEXT)(GLuint texture, GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutTextureParameterIuivEXT)(GLuint texture, GLenum target, GLenum pname, const GLuint *params);
    void (MUT_STD_CALL *mutTextureParameterfEXT)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutTextureParameterfvEXT)(GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutTextureParameteriEXT)(GLuint texture, GLenum target, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutTextureParameterivEXT)(GLuint texture, GLenum target, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutTextureRangeAPPLE)(GLenum target, GLsizei length, const void *pointer);
    void (MUT_STD_CALL *mutTextureRenderbufferEXT)(GLuint texture, GLenum target, GLuint renderbuffer);
    void (MUT_STD_CALL *mutTextureStorage1DEXT)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    void (MUT_STD_CALL *mutTextureStorage2DEXT)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    void (MUT_STD_CALL *mutTextureStorage2DMultisampleEXT)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTextureStorage3DEXT)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    void (MUT_STD_CALL *mutTextureStorage3DMultisampleEXT)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    void (MUT_STD_CALL *mutTextureStorageMem1DEXT)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTextureStorageMem2DEXT)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTextureStorageMem2DMultisampleEXT)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTextureStorageMem3DEXT)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTextureStorageMem3DMultisampleEXT)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
    void (MUT_STD_CALL *mutTextureStorageSparseAMD)(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
    void (MUT_STD_CALL *mutTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    void (MUT_STD_CALL *mutTextureViewEXT)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
    void (MUT_STD_CALL *mutTextureViewOES)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
    void (MUT_STD_CALL *mutTrackMatrixNV)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
    void (MUT_STD_CALL *mutTransformFeedbackAttribsNV)(GLsizei count, const GLint *attribs, GLenum bufferMode);
    void (MUT_STD_CALL *mutTransformFeedbackStreamAttribsNV)(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
    void (MUT_STD_CALL *mutTransformFeedbackVaryingsEXT)(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode);
    void (MUT_STD_CALL *mutTransformFeedbackVaryingsNV)(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
    void (MUT_STD_CALL *mutTransformPathNV)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
    void (MUT_STD_CALL *mutTranslatexOES)(GLfixed x, GLfixed y, GLfixed z);
    void (MUT_STD_CALL *mutUniform1fARB)(GLint location, GLfloat v0);
    void (MUT_STD_CALL *mutUniform1fvARB)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform1i64ARB)(GLint location, GLint64 x);
    void (MUT_STD_CALL *mutUniform1i64NV)(GLint location, GLint64EXT x);
    void (MUT_STD_CALL *mutUniform1i64vARB)(GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutUniform1i64vNV)(GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutUniform1iARB)(GLint location, GLint v0);
    void (MUT_STD_CALL *mutUniform1ivARB)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform1ui64ARB)(GLint location, GLuint64 x);
    void (MUT_STD_CALL *mutUniform1ui64NV)(GLint location, GLuint64EXT x);
    void (MUT_STD_CALL *mutUniform1ui64vARB)(GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutUniform1ui64vNV)(GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutUniform1uiEXT)(GLint location, GLuint v0);
    void (MUT_STD_CALL *mutUniform1uivEXT)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniform2fARB)(GLint location, GLfloat v0, GLfloat v1);
    void (MUT_STD_CALL *mutUniform2fvARB)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform2i64ARB)(GLint location, GLint64 x, GLint64 y);
    void (MUT_STD_CALL *mutUniform2i64NV)(GLint location, GLint64EXT x, GLint64EXT y);
    void (MUT_STD_CALL *mutUniform2i64vARB)(GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutUniform2i64vNV)(GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutUniform2iARB)(GLint location, GLint v0, GLint v1);
    void (MUT_STD_CALL *mutUniform2ivARB)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform2ui64ARB)(GLint location, GLuint64 x, GLuint64 y);
    void (MUT_STD_CALL *mutUniform2ui64NV)(GLint location, GLuint64EXT x, GLuint64EXT y);
    void (MUT_STD_CALL *mutUniform2ui64vARB)(GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutUniform2ui64vNV)(GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutUniform2uiEXT)(GLint location, GLuint v0, GLuint v1);
    void (MUT_STD_CALL *mutUniform2uivEXT)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniform3fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    void (MUT_STD_CALL *mutUniform3fvARB)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform3i64ARB)(GLint location, GLint64 x, GLint64 y, GLint64 z);
    void (MUT_STD_CALL *mutUniform3i64NV)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    void (MUT_STD_CALL *mutUniform3i64vARB)(GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutUniform3i64vNV)(GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutUniform3iARB)(GLint location, GLint v0, GLint v1, GLint v2);
    void (MUT_STD_CALL *mutUniform3ivARB)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform3ui64ARB)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    void (MUT_STD_CALL *mutUniform3ui64NV)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    void (MUT_STD_CALL *mutUniform3ui64vARB)(GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutUniform3ui64vNV)(GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutUniform3uiEXT)(GLint location, GLuint v0, GLuint v1, GLuint v2);
    void (MUT_STD_CALL *mutUniform3uivEXT)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniform4fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    void (MUT_STD_CALL *mutUniform4fvARB)(GLint location, GLsizei count, const GLfloat *value);
    void (MUT_STD_CALL *mutUniform4i64ARB)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    void (MUT_STD_CALL *mutUniform4i64NV)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    void (MUT_STD_CALL *mutUniform4i64vARB)(GLint location, GLsizei count, const GLint64 *value);
    void (MUT_STD_CALL *mutUniform4i64vNV)(GLint location, GLsizei count, const GLint64EXT *value);
    void (MUT_STD_CALL *mutUniform4iARB)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    void (MUT_STD_CALL *mutUniform4ivARB)(GLint location, GLsizei count, const GLint *value);
    void (MUT_STD_CALL *mutUniform4ui64ARB)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    void (MUT_STD_CALL *mutUniform4ui64NV)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    void (MUT_STD_CALL *mutUniform4ui64vARB)(GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutUniform4ui64vNV)(GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutUniform4uiEXT)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    void (MUT_STD_CALL *mutUniform4uivEXT)(GLint location, GLsizei count, const GLuint *value);
    void (MUT_STD_CALL *mutUniformBufferEXT)(GLuint program, GLint location, GLuint buffer);
    void (MUT_STD_CALL *mutUniformHandleui64ARB)(GLint location, GLuint64 value);
    void (MUT_STD_CALL *mutUniformHandleui64IMG)(GLint location, GLuint64 value);
    void (MUT_STD_CALL *mutUniformHandleui64NV)(GLint location, GLuint64 value);
    void (MUT_STD_CALL *mutUniformHandleui64vARB)(GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutUniformHandleui64vIMG)(GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutUniformHandleui64vNV)(GLint location, GLsizei count, const GLuint64 *value);
    void (MUT_STD_CALL *mutUniformMatrix2fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix2x3fvNV)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix2x4fvNV)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix3fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix3x2fvNV)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix3x4fvNV)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix4fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix4x2fvNV)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformMatrix4x3fvNV)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    void (MUT_STD_CALL *mutUniformui64NV)(GLint location, GLuint64EXT value);
    void (MUT_STD_CALL *mutUniformui64vNV)(GLint location, GLsizei count, const GLuint64EXT *value);
    void (MUT_STD_CALL *mutUnlockArraysEXT)(void);
    GLboolean (MUT_STD_CALL *mutUnmapBufferARB)(GLenum target);
    GLboolean (MUT_STD_CALL *mutUnmapBufferOES)(GLenum target);
    GLboolean (MUT_STD_CALL *mutUnmapNamedBufferEXT)(GLuint buffer);
    void (MUT_STD_CALL *mutUnmapObjectBufferATI)(GLuint buffer);
    void (MUT_STD_CALL *mutUnmapTexture2DINTEL)(GLuint texture, GLint level);
    void (MUT_STD_CALL *mutUpdateObjectBufferATI)(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
    void (MUT_STD_CALL *mutUseProgramObjectARB)(GLhandleARB programObj);
    void (MUT_STD_CALL *mutUseProgramStagesEXT)(GLuint pipeline, GLbitfield stages, GLuint program);
    void (MUT_STD_CALL *mutUseShaderProgramEXT)(GLenum type, GLuint program);
    void (MUT_STD_CALL *mutVDPAUFiniNV)(void);
    void (MUT_STD_CALL *mutVDPAUGetSurfaceivNV)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
    void (MUT_STD_CALL *mutVDPAUInitNV)(const void *vdpDevice, const void *getProcAddress);
    GLboolean (MUT_STD_CALL *mutVDPAUIsSurfaceNV)(GLvdpauSurfaceNV surface);
    void (MUT_STD_CALL *mutVDPAUMapSurfacesNV)(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
    GLvdpauSurfaceNV (MUT_STD_CALL *mutVDPAURegisterOutputSurfaceNV)(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
    GLvdpauSurfaceNV (MUT_STD_CALL *mutVDPAURegisterVideoSurfaceNV)(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
    void (MUT_STD_CALL *mutVDPAUSurfaceAccessNV)(GLvdpauSurfaceNV surface, GLenum access);
    void (MUT_STD_CALL *mutVDPAUUnmapSurfacesNV)(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
    void (MUT_STD_CALL *mutVDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV surface);
    void (MUT_STD_CALL *mutValidateProgramARB)(GLhandleARB programObj);
    void (MUT_STD_CALL *mutValidateProgramPipelineEXT)(GLuint pipeline);
    void (MUT_STD_CALL *mutVariantArrayObjectATI)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
    void (MUT_STD_CALL *mutVariantPointerEXT)(GLuint id, GLenum type, GLuint stride, const void *addr);
    void (MUT_STD_CALL *mutVariantbvEXT)(GLuint id, const GLbyte *addr);
    void (MUT_STD_CALL *mutVariantdvEXT)(GLuint id, const GLdouble *addr);
    void (MUT_STD_CALL *mutVariantfvEXT)(GLuint id, const GLfloat *addr);
    void (MUT_STD_CALL *mutVariantivEXT)(GLuint id, const GLint *addr);
    void (MUT_STD_CALL *mutVariantsvEXT)(GLuint id, const GLshort *addr);
    void (MUT_STD_CALL *mutVariantubvEXT)(GLuint id, const GLubyte *addr);
    void (MUT_STD_CALL *mutVariantuivEXT)(GLuint id, const GLuint *addr);
    void (MUT_STD_CALL *mutVariantusvEXT)(GLuint id, const GLushort *addr);
    void (MUT_STD_CALL *mutVertex2bOES)(GLbyte x, GLbyte y);
    void (MUT_STD_CALL *mutVertex2bvOES)(const GLbyte *coords);
    void (MUT_STD_CALL *mutVertex2hNV)(GLhalfNV x, GLhalfNV y);
    void (MUT_STD_CALL *mutVertex2hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertex2xOES)(GLfixed x);
    void (MUT_STD_CALL *mutVertex2xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutVertex3bOES)(GLbyte x, GLbyte y, GLbyte z);
    void (MUT_STD_CALL *mutVertex3bvOES)(const GLbyte *coords);
    void (MUT_STD_CALL *mutVertex3hNV)(GLhalfNV x, GLhalfNV y, GLhalfNV z);
    void (MUT_STD_CALL *mutVertex3hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertex3xOES)(GLfixed x, GLfixed y);
    void (MUT_STD_CALL *mutVertex3xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutVertex4bOES)(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
    void (MUT_STD_CALL *mutVertex4bvOES)(const GLbyte *coords);
    void (MUT_STD_CALL *mutVertex4hNV)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
    void (MUT_STD_CALL *mutVertex4hvNV)(const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertex4xOES)(GLfixed x, GLfixed y, GLfixed z);
    void (MUT_STD_CALL *mutVertex4xvOES)(const GLfixed *coords);
    void (MUT_STD_CALL *mutVertexArrayBindVertexBufferEXT)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    void (MUT_STD_CALL *mutVertexArrayColorOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayEdgeFlagOffsetEXT)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayFogCoordOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayIndexOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayMultiTexCoordOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayNormalOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayParameteriAPPLE)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutVertexArrayRangeAPPLE)(GLsizei length, void *pointer);
    void (MUT_STD_CALL *mutVertexArrayRangeNV)(GLsizei length, const void *pointer);
    void (MUT_STD_CALL *mutVertexArraySecondaryColorOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayTexCoordOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribBindingEXT)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribDivisorEXT)(GLuint vaobj, GLuint index, GLuint divisor);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribFormatEXT)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribIFormatEXT)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribIOffsetEXT)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribLFormatEXT)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribLOffsetEXT)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayVertexAttribOffsetEXT)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexArrayVertexBindingDivisorEXT)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
    void (MUT_STD_CALL *mutVertexArrayVertexOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    void (MUT_STD_CALL *mutVertexAttrib1dARB)(GLuint index, GLdouble x);
    void (MUT_STD_CALL *mutVertexAttrib1dNV)(GLuint index, GLdouble x);
    void (MUT_STD_CALL *mutVertexAttrib1dvARB)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib1dvNV)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib1fARB)(GLuint index, GLfloat x);
    void (MUT_STD_CALL *mutVertexAttrib1fNV)(GLuint index, GLfloat x);
    void (MUT_STD_CALL *mutVertexAttrib1fvARB)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib1fvNV)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib1hNV)(GLuint index, GLhalfNV x);
    void (MUT_STD_CALL *mutVertexAttrib1hvNV)(GLuint index, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttrib1sARB)(GLuint index, GLshort x);
    void (MUT_STD_CALL *mutVertexAttrib1sNV)(GLuint index, GLshort x);
    void (MUT_STD_CALL *mutVertexAttrib1svARB)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib1svNV)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib2dARB)(GLuint index, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutVertexAttrib2dNV)(GLuint index, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutVertexAttrib2dvARB)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib2dvNV)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib2fARB)(GLuint index, GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutVertexAttrib2fNV)(GLuint index, GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutVertexAttrib2fvARB)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib2fvNV)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib2hNV)(GLuint index, GLhalfNV x, GLhalfNV y);
    void (MUT_STD_CALL *mutVertexAttrib2hvNV)(GLuint index, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttrib2sARB)(GLuint index, GLshort x, GLshort y);
    void (MUT_STD_CALL *mutVertexAttrib2sNV)(GLuint index, GLshort x, GLshort y);
    void (MUT_STD_CALL *mutVertexAttrib2svARB)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib2svNV)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib3dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutVertexAttrib3dNV)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutVertexAttrib3dvARB)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib3dvNV)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib3fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutVertexAttrib3fNV)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutVertexAttrib3fvARB)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib3fvNV)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib3hNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
    void (MUT_STD_CALL *mutVertexAttrib3hvNV)(GLuint index, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttrib3sARB)(GLuint index, GLshort x, GLshort y, GLshort z);
    void (MUT_STD_CALL *mutVertexAttrib3sNV)(GLuint index, GLshort x, GLshort y, GLshort z);
    void (MUT_STD_CALL *mutVertexAttrib3svARB)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib3svNV)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib4NbvARB)(GLuint index, const GLbyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4NivARB)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttrib4NsvARB)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib4NubARB)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    void (MUT_STD_CALL *mutVertexAttrib4NubvARB)(GLuint index, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4NuivARB)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttrib4NusvARB)(GLuint index, const GLushort *v);
    void (MUT_STD_CALL *mutVertexAttrib4bvARB)(GLuint index, const GLbyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutVertexAttrib4dNV)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutVertexAttrib4dvARB)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib4dvNV)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttrib4fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutVertexAttrib4fNV)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutVertexAttrib4fvARB)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib4fvNV)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttrib4hNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
    void (MUT_STD_CALL *mutVertexAttrib4hvNV)(GLuint index, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttrib4ivARB)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttrib4sARB)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    void (MUT_STD_CALL *mutVertexAttrib4sNV)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    void (MUT_STD_CALL *mutVertexAttrib4svARB)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib4svNV)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttrib4ubNV)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    void (MUT_STD_CALL *mutVertexAttrib4ubvARB)(GLuint index, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4ubvNV)(GLuint index, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexAttrib4uivARB)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttrib4usvARB)(GLuint index, const GLushort *v);
    void (MUT_STD_CALL *mutVertexAttribArrayObjectATI)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
    void (MUT_STD_CALL *mutVertexAttribDivisorANGLE)(GLuint index, GLuint divisor);
    void (MUT_STD_CALL *mutVertexAttribDivisorARB)(GLuint index, GLuint divisor);
    void (MUT_STD_CALL *mutVertexAttribDivisorEXT)(GLuint index, GLuint divisor);
    void (MUT_STD_CALL *mutVertexAttribDivisorNV)(GLuint index, GLuint divisor);
    void (MUT_STD_CALL *mutVertexAttribFormatNV)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
    void (MUT_STD_CALL *mutVertexAttribI1iEXT)(GLuint index, GLint x);
    void (MUT_STD_CALL *mutVertexAttribI1ivEXT)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI1uiEXT)(GLuint index, GLuint x);
    void (MUT_STD_CALL *mutVertexAttribI1uivEXT)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI2iEXT)(GLuint index, GLint x, GLint y);
    void (MUT_STD_CALL *mutVertexAttribI2ivEXT)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI2uiEXT)(GLuint index, GLuint x, GLuint y);
    void (MUT_STD_CALL *mutVertexAttribI2uivEXT)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI3iEXT)(GLuint index, GLint x, GLint y, GLint z);
    void (MUT_STD_CALL *mutVertexAttribI3ivEXT)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI3uiEXT)(GLuint index, GLuint x, GLuint y, GLuint z);
    void (MUT_STD_CALL *mutVertexAttribI3uivEXT)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI4bvEXT)(GLuint index, const GLbyte *v);
    void (MUT_STD_CALL *mutVertexAttribI4iEXT)(GLuint index, GLint x, GLint y, GLint z, GLint w);
    void (MUT_STD_CALL *mutVertexAttribI4ivEXT)(GLuint index, const GLint *v);
    void (MUT_STD_CALL *mutVertexAttribI4svEXT)(GLuint index, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttribI4ubvEXT)(GLuint index, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexAttribI4uiEXT)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    void (MUT_STD_CALL *mutVertexAttribI4uivEXT)(GLuint index, const GLuint *v);
    void (MUT_STD_CALL *mutVertexAttribI4usvEXT)(GLuint index, const GLushort *v);
    void (MUT_STD_CALL *mutVertexAttribIFormatNV)(GLuint index, GLint size, GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutVertexAttribIPointerEXT)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexAttribL1dEXT)(GLuint index, GLdouble x);
    void (MUT_STD_CALL *mutVertexAttribL1dvEXT)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribL1i64NV)(GLuint index, GLint64EXT x);
    void (MUT_STD_CALL *mutVertexAttribL1i64vNV)(GLuint index, const GLint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL1ui64ARB)(GLuint index, GLuint64EXT x);
    void (MUT_STD_CALL *mutVertexAttribL1ui64NV)(GLuint index, GLuint64EXT x);
    void (MUT_STD_CALL *mutVertexAttribL1ui64vARB)(GLuint index, const GLuint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL1ui64vNV)(GLuint index, const GLuint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL2dEXT)(GLuint index, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutVertexAttribL2dvEXT)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribL2i64NV)(GLuint index, GLint64EXT x, GLint64EXT y);
    void (MUT_STD_CALL *mutVertexAttribL2i64vNV)(GLuint index, const GLint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL2ui64NV)(GLuint index, GLuint64EXT x, GLuint64EXT y);
    void (MUT_STD_CALL *mutVertexAttribL2ui64vNV)(GLuint index, const GLuint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL3dEXT)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutVertexAttribL3dvEXT)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribL3i64NV)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    void (MUT_STD_CALL *mutVertexAttribL3i64vNV)(GLuint index, const GLint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL3ui64NV)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    void (MUT_STD_CALL *mutVertexAttribL3ui64vNV)(GLuint index, const GLuint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL4dEXT)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutVertexAttribL4dvEXT)(GLuint index, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribL4i64NV)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    void (MUT_STD_CALL *mutVertexAttribL4i64vNV)(GLuint index, const GLint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribL4ui64NV)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    void (MUT_STD_CALL *mutVertexAttribL4ui64vNV)(GLuint index, const GLuint64EXT *v);
    void (MUT_STD_CALL *mutVertexAttribLFormatNV)(GLuint index, GLint size, GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutVertexAttribLPointerEXT)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexAttribParameteriAMD)(GLuint index, GLenum pname, GLint param);
    void (MUT_STD_CALL *mutVertexAttribPointerARB)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexAttribPointerNV)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexAttribs1dvNV)(GLuint index, GLsizei count, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribs1fvNV)(GLuint index, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttribs1hvNV)(GLuint index, GLsizei n, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttribs1svNV)(GLuint index, GLsizei count, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttribs2dvNV)(GLuint index, GLsizei count, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribs2fvNV)(GLuint index, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttribs2hvNV)(GLuint index, GLsizei n, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttribs2svNV)(GLuint index, GLsizei count, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttribs3dvNV)(GLuint index, GLsizei count, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribs3fvNV)(GLuint index, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttribs3hvNV)(GLuint index, GLsizei n, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttribs3svNV)(GLuint index, GLsizei count, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttribs4dvNV)(GLuint index, GLsizei count, const GLdouble *v);
    void (MUT_STD_CALL *mutVertexAttribs4fvNV)(GLuint index, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutVertexAttribs4hvNV)(GLuint index, GLsizei n, const GLhalfNV *v);
    void (MUT_STD_CALL *mutVertexAttribs4svNV)(GLuint index, GLsizei count, const GLshort *v);
    void (MUT_STD_CALL *mutVertexAttribs4ubvNV)(GLuint index, GLsizei count, const GLubyte *v);
    void (MUT_STD_CALL *mutVertexBlendARB)(GLint count);
    void (MUT_STD_CALL *mutVertexBlendEnvfATI)(GLenum pname, GLfloat param);
    void (MUT_STD_CALL *mutVertexBlendEnviATI)(GLenum pname, GLint param);
    void (MUT_STD_CALL *mutVertexFormatNV)(GLint size, GLenum type, GLsizei stride);
    void (MUT_STD_CALL *mutVertexPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
    void (MUT_STD_CALL *mutVertexPointerListIBM)(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
    void (MUT_STD_CALL *mutVertexPointervINTEL)(GLint size, GLenum type, const void **pointer);
    void (MUT_STD_CALL *mutVertexStream1dATI)(GLenum stream, GLdouble x);
    void (MUT_STD_CALL *mutVertexStream1dvATI)(GLenum stream, const GLdouble *coords);
    void (MUT_STD_CALL *mutVertexStream1fATI)(GLenum stream, GLfloat x);
    void (MUT_STD_CALL *mutVertexStream1fvATI)(GLenum stream, const GLfloat *coords);
    void (MUT_STD_CALL *mutVertexStream1iATI)(GLenum stream, GLint x);
    void (MUT_STD_CALL *mutVertexStream1ivATI)(GLenum stream, const GLint *coords);
    void (MUT_STD_CALL *mutVertexStream1sATI)(GLenum stream, GLshort x);
    void (MUT_STD_CALL *mutVertexStream1svATI)(GLenum stream, const GLshort *coords);
    void (MUT_STD_CALL *mutVertexStream2dATI)(GLenum stream, GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutVertexStream2dvATI)(GLenum stream, const GLdouble *coords);
    void (MUT_STD_CALL *mutVertexStream2fATI)(GLenum stream, GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutVertexStream2fvATI)(GLenum stream, const GLfloat *coords);
    void (MUT_STD_CALL *mutVertexStream2iATI)(GLenum stream, GLint x, GLint y);
    void (MUT_STD_CALL *mutVertexStream2ivATI)(GLenum stream, const GLint *coords);
    void (MUT_STD_CALL *mutVertexStream2sATI)(GLenum stream, GLshort x, GLshort y);
    void (MUT_STD_CALL *mutVertexStream2svATI)(GLenum stream, const GLshort *coords);
    void (MUT_STD_CALL *mutVertexStream3dATI)(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutVertexStream3dvATI)(GLenum stream, const GLdouble *coords);
    void (MUT_STD_CALL *mutVertexStream3fATI)(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutVertexStream3fvATI)(GLenum stream, const GLfloat *coords);
    void (MUT_STD_CALL *mutVertexStream3iATI)(GLenum stream, GLint x, GLint y, GLint z);
    void (MUT_STD_CALL *mutVertexStream3ivATI)(GLenum stream, const GLint *coords);
    void (MUT_STD_CALL *mutVertexStream3sATI)(GLenum stream, GLshort x, GLshort y, GLshort z);
    void (MUT_STD_CALL *mutVertexStream3svATI)(GLenum stream, const GLshort *coords);
    void (MUT_STD_CALL *mutVertexStream4dATI)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutVertexStream4dvATI)(GLenum stream, const GLdouble *coords);
    void (MUT_STD_CALL *mutVertexStream4fATI)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutVertexStream4fvATI)(GLenum stream, const GLfloat *coords);
    void (MUT_STD_CALL *mutVertexStream4iATI)(GLenum stream, GLint x, GLint y, GLint z, GLint w);
    void (MUT_STD_CALL *mutVertexStream4ivATI)(GLenum stream, const GLint *coords);
    void (MUT_STD_CALL *mutVertexStream4sATI)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
    void (MUT_STD_CALL *mutVertexStream4svATI)(GLenum stream, const GLshort *coords);
    void (MUT_STD_CALL *mutVertexWeightPointerEXT)(GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutVertexWeightfEXT)(GLfloat weight);
    void (MUT_STD_CALL *mutVertexWeightfvEXT)(const GLfloat *weight);
    void (MUT_STD_CALL *mutVertexWeighthNV)(GLhalfNV weight);
    void (MUT_STD_CALL *mutVertexWeighthvNV)(const GLhalfNV *weight);
    GLenum (MUT_STD_CALL *mutVideoCaptureNV)(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
    void (MUT_STD_CALL *mutVideoCaptureStreamParameterdvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
    void (MUT_STD_CALL *mutVideoCaptureStreamParameterfvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
    void (MUT_STD_CALL *mutVideoCaptureStreamParameterivNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
    void (MUT_STD_CALL *mutViewportArrayvNV)(GLuint first, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutViewportArrayvOES)(GLuint first, GLsizei count, const GLfloat *v);
    void (MUT_STD_CALL *mutViewportIndexedfNV)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
    void (MUT_STD_CALL *mutViewportIndexedfOES)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
    void (MUT_STD_CALL *mutViewportIndexedfvNV)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutViewportIndexedfvOES)(GLuint index, const GLfloat *v);
    void (MUT_STD_CALL *mutViewportPositionWScaleNV)(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
    void (MUT_STD_CALL *mutViewportSwizzleNV)(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
    void (MUT_STD_CALL *mutWaitSemaphoreEXT)(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
    void (MUT_STD_CALL *mutWaitSyncAPPLE)(GLsync sync, GLbitfield flags, GLuint64 timeout);
    void (MUT_STD_CALL *mutWaitVkSemaphoreNV)(GLuint64 vkSemaphore);
    void (MUT_STD_CALL *mutWeightPathsNV)(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
    void (MUT_STD_CALL *mutWeightPointerARB)(GLint size, GLenum type, GLsizei stride, const void *pointer);
    void (MUT_STD_CALL *mutWeightbvARB)(GLint size, const GLbyte *weights);
    void (MUT_STD_CALL *mutWeightdvARB)(GLint size, const GLdouble *weights);
    void (MUT_STD_CALL *mutWeightfvARB)(GLint size, const GLfloat *weights);
    void (MUT_STD_CALL *mutWeightivARB)(GLint size, const GLint *weights);
    void (MUT_STD_CALL *mutWeightsvARB)(GLint size, const GLshort *weights);
    void (MUT_STD_CALL *mutWeightubvARB)(GLint size, const GLubyte *weights);
    void (MUT_STD_CALL *mutWeightuivARB)(GLint size, const GLuint *weights);
    void (MUT_STD_CALL *mutWeightusvARB)(GLint size, const GLushort *weights);
    void (MUT_STD_CALL *mutWindowPos2dARB)(GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutWindowPos2dMESA)(GLdouble x, GLdouble y);
    void (MUT_STD_CALL *mutWindowPos2dvARB)(const GLdouble *v);
    void (MUT_STD_CALL *mutWindowPos2dvMESA)(const GLdouble *v);
    void (MUT_STD_CALL *mutWindowPos2fARB)(GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutWindowPos2fMESA)(GLfloat x, GLfloat y);
    void (MUT_STD_CALL *mutWindowPos2fvARB)(const GLfloat *v);
    void (MUT_STD_CALL *mutWindowPos2fvMESA)(const GLfloat *v);
    void (MUT_STD_CALL *mutWindowPos2iARB)(GLint x, GLint y);
    void (MUT_STD_CALL *mutWindowPos2iMESA)(GLint x, GLint y);
    void (MUT_STD_CALL *mutWindowPos2ivARB)(const GLint *v);
    void (MUT_STD_CALL *mutWindowPos2ivMESA)(const GLint *v);
    void (MUT_STD_CALL *mutWindowPos2sARB)(GLshort x, GLshort y);
    void (MUT_STD_CALL *mutWindowPos2sMESA)(GLshort x, GLshort y);
    void (MUT_STD_CALL *mutWindowPos2svARB)(const GLshort *v);
    void (MUT_STD_CALL *mutWindowPos2svMESA)(const GLshort *v);
    void (MUT_STD_CALL *mutWindowPos3dARB)(GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutWindowPos3dMESA)(GLdouble x, GLdouble y, GLdouble z);
    void (MUT_STD_CALL *mutWindowPos3dvARB)(const GLdouble *v);
    void (MUT_STD_CALL *mutWindowPos3dvMESA)(const GLdouble *v);
    void (MUT_STD_CALL *mutWindowPos3fARB)(GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutWindowPos3fMESA)(GLfloat x, GLfloat y, GLfloat z);
    void (MUT_STD_CALL *mutWindowPos3fvARB)(const GLfloat *v);
    void (MUT_STD_CALL *mutWindowPos3fvMESA)(const GLfloat *v);
    void (MUT_STD_CALL *mutWindowPos3iARB)(GLint x, GLint y, GLint z);
    void (MUT_STD_CALL *mutWindowPos3iMESA)(GLint x, GLint y, GLint z);
    void (MUT_STD_CALL *mutWindowPos3ivARB)(const GLint *v);
    void (MUT_STD_CALL *mutWindowPos3ivMESA)(const GLint *v);
    void (MUT_STD_CALL *mutWindowPos3sARB)(GLshort x, GLshort y, GLshort z);
    void (MUT_STD_CALL *mutWindowPos3sMESA)(GLshort x, GLshort y, GLshort z);
    void (MUT_STD_CALL *mutWindowPos3svARB)(const GLshort *v);
    void (MUT_STD_CALL *mutWindowPos3svMESA)(const GLshort *v);
    void (MUT_STD_CALL *mutWindowPos4dMESA)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void (MUT_STD_CALL *mutWindowPos4dvMESA)(const GLdouble *v);
    void (MUT_STD_CALL *mutWindowPos4fMESA)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void (MUT_STD_CALL *mutWindowPos4fvMESA)(const GLfloat *v);
    void (MUT_STD_CALL *mutWindowPos4iMESA)(GLint x, GLint y, GLint z, GLint w);
    void (MUT_STD_CALL *mutWindowPos4ivMESA)(const GLint *v);
    void (MUT_STD_CALL *mutWindowPos4sMESA)(GLshort x, GLshort y, GLshort z, GLshort w);
    void (MUT_STD_CALL *mutWindowPos4svMESA)(const GLshort *v);
    void (MUT_STD_CALL *mutWindowRectanglesEXT)(GLenum mode, GLsizei count, const GLint *box);
    void (MUT_STD_CALL *mutWriteMaskEXT)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
#endif
} MutGLAPIConfig;

extern MutGLAPIConfig mutGLAPI; // global instance.

MUT_FORCE_INLINE bool mutGLSupport(size_t extensionID) {
    return mutGLAPI.supportedExtensions[extensionID];
}

#if MUT_GL_WRANGLER_ENABLED

MUT_FORCE_INLINE void _mutAccumxOES(GLenum op, GLfixed value) { mutGLAPI.mutAccumxOES(op, value); }
MUT_FORCE_INLINE GLboolean _mutAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) { return mutGLAPI.mutAcquireKeyedMutexWin32EXT(memory, key, timeout); }
MUT_FORCE_INLINE void _mutActiveProgramEXT(GLuint program) { mutGLAPI.mutActiveProgramEXT(program); }
MUT_FORCE_INLINE void _mutActiveShaderProgram(GLuint pipeline, GLuint program) { mutGLAPI.mutActiveShaderProgram(pipeline, program); }
MUT_FORCE_INLINE void _mutActiveShaderProgramEXT(GLuint pipeline, GLuint program) { mutGLAPI.mutActiveShaderProgramEXT(pipeline, program); }
MUT_FORCE_INLINE void _mutActiveStencilFaceEXT(GLenum face) { mutGLAPI.mutActiveStencilFaceEXT(face); }
MUT_FORCE_INLINE void _mutActiveTexture(GLenum texture) { mutGLAPI.mutActiveTexture(texture); }
MUT_FORCE_INLINE void _mutActiveTextureARB(GLenum texture) { mutGLAPI.mutActiveTextureARB(texture); }
MUT_FORCE_INLINE void _mutActiveVaryingNV(GLuint program, const GLchar *name) { mutGLAPI.mutActiveVaryingNV(program, name); }
MUT_FORCE_INLINE void _mutAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { mutGLAPI.mutAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod); }
MUT_FORCE_INLINE void _mutAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { mutGLAPI.mutAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
MUT_FORCE_INLINE void _mutAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { mutGLAPI.mutAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
MUT_FORCE_INLINE void _mutAlphaFuncQCOM(GLenum func, GLclampf ref) { mutGLAPI.mutAlphaFuncQCOM(func, ref); }
MUT_FORCE_INLINE void _mutAlphaFuncxOES(GLenum func, GLfixed ref) { mutGLAPI.mutAlphaFuncxOES(func, ref); }
MUT_FORCE_INLINE void _mutAlphaToCoverageDitherControlNV(GLenum mode) { mutGLAPI.mutAlphaToCoverageDitherControlNV(mode); }
MUT_FORCE_INLINE void _mutApplyFramebufferAttachmentCMAAINTEL(void) { mutGLAPI.mutApplyFramebufferAttachmentCMAAINTEL(); }
MUT_FORCE_INLINE void _mutApplyTextureEXT(GLenum mode) { mutGLAPI.mutApplyTextureEXT(mode); }
MUT_FORCE_INLINE GLboolean _mutAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences) { return mutGLAPI.mutAreProgramsResidentNV(n, programs, residences); }
MUT_FORCE_INLINE GLboolean _mutAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences) { return mutGLAPI.mutAreTexturesResidentEXT(n, textures, residences); }
MUT_FORCE_INLINE void _mutArrayElementEXT(GLint i) { mutGLAPI.mutArrayElementEXT(i); }
MUT_FORCE_INLINE void _mutArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { mutGLAPI.mutArrayObjectATI(array, size, type, stride, buffer, offset); }
MUT_FORCE_INLINE void _mutAsyncMarkerSGIX(GLuint marker) { mutGLAPI.mutAsyncMarkerSGIX(marker); }
MUT_FORCE_INLINE void _mutAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) { mutGLAPI.mutAttachObjectARB(containerObj, obj); }
MUT_FORCE_INLINE void _mutAttachShader(GLuint program, GLuint shader) { mutGLAPI.mutAttachShader(program, shader); }
MUT_FORCE_INLINE void _mutBeginConditionalRender(GLuint id, GLenum mode) { mutGLAPI.mutBeginConditionalRender(id, mode); }
MUT_FORCE_INLINE void _mutBeginConditionalRenderNV(GLuint id, GLenum mode) { mutGLAPI.mutBeginConditionalRenderNV(id, mode); }
MUT_FORCE_INLINE void _mutBeginConditionalRenderNVX(GLuint id) { mutGLAPI.mutBeginConditionalRenderNVX(id); }
MUT_FORCE_INLINE void _mutBeginFragmentShaderATI(void) { mutGLAPI.mutBeginFragmentShaderATI(); }
MUT_FORCE_INLINE void _mutBeginOcclusionQueryNV(GLuint id) { mutGLAPI.mutBeginOcclusionQueryNV(id); }
MUT_FORCE_INLINE void _mutBeginPerfMonitorAMD(GLuint monitor) { mutGLAPI.mutBeginPerfMonitorAMD(monitor); }
MUT_FORCE_INLINE void _mutBeginPerfQueryINTEL(GLuint queryHandle) { mutGLAPI.mutBeginPerfQueryINTEL(queryHandle); }
MUT_FORCE_INLINE void _mutBeginQuery(GLenum target, GLuint id) { mutGLAPI.mutBeginQuery(target, id); }
MUT_FORCE_INLINE void _mutBeginQueryARB(GLenum target, GLuint id) { mutGLAPI.mutBeginQueryARB(target, id); }
MUT_FORCE_INLINE void _mutBeginQueryEXT(GLenum target, GLuint id) { mutGLAPI.mutBeginQueryEXT(target, id); }
MUT_FORCE_INLINE void _mutBeginQueryIndexed(GLenum target, GLuint index, GLuint id) { mutGLAPI.mutBeginQueryIndexed(target, index, id); }
MUT_FORCE_INLINE void _mutBeginTransformFeedback(GLenum primitiveMode) { mutGLAPI.mutBeginTransformFeedback(primitiveMode); }
MUT_FORCE_INLINE void _mutBeginTransformFeedbackEXT(GLenum primitiveMode) { mutGLAPI.mutBeginTransformFeedbackEXT(primitiveMode); }
MUT_FORCE_INLINE void _mutBeginTransformFeedbackNV(GLenum primitiveMode) { mutGLAPI.mutBeginTransformFeedbackNV(primitiveMode); }
MUT_FORCE_INLINE void _mutBeginVertexShaderEXT(void) { mutGLAPI.mutBeginVertexShaderEXT(); }
MUT_FORCE_INLINE void _mutBeginVideoCaptureNV(GLuint video_capture_slot) { mutGLAPI.mutBeginVideoCaptureNV(video_capture_slot); }
MUT_FORCE_INLINE void _mutBindAttribLocation(GLuint program, GLuint index, const GLchar *name) { mutGLAPI.mutBindAttribLocation(program, index, name); }
MUT_FORCE_INLINE void _mutBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name) { mutGLAPI.mutBindAttribLocationARB(programObj, index, name); }
MUT_FORCE_INLINE void _mutBindBuffer(GLenum target, GLuint buffer) { mutGLAPI.mutBindBuffer(target, buffer); }
MUT_FORCE_INLINE void _mutBindBufferARB(GLenum target, GLuint buffer) { mutGLAPI.mutBindBufferARB(target, buffer); }
MUT_FORCE_INLINE void _mutBindBufferBase(GLenum target, GLuint index, GLuint buffer) { mutGLAPI.mutBindBufferBase(target, index, buffer); }
MUT_FORCE_INLINE void _mutBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) { mutGLAPI.mutBindBufferBaseEXT(target, index, buffer); }
MUT_FORCE_INLINE void _mutBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) { mutGLAPI.mutBindBufferBaseNV(target, index, buffer); }
MUT_FORCE_INLINE void _mutBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { mutGLAPI.mutBindBufferOffsetEXT(target, index, buffer, offset); }
MUT_FORCE_INLINE void _mutBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { mutGLAPI.mutBindBufferOffsetNV(target, index, buffer, offset); }
MUT_FORCE_INLINE void _mutBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutBindBufferRange(target, index, buffer, offset, size); }
MUT_FORCE_INLINE void _mutBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutBindBufferRangeEXT(target, index, buffer, offset, size); }
MUT_FORCE_INLINE void _mutBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutBindBufferRangeNV(target, index, buffer, offset, size); }
MUT_FORCE_INLINE void _mutBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers) { mutGLAPI.mutBindBuffersBase(target, first, count, buffers); }
MUT_FORCE_INLINE void _mutBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) { mutGLAPI.mutBindBuffersRange(target, first, count, buffers, offsets, sizes); }
MUT_FORCE_INLINE void _mutBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) { mutGLAPI.mutBindFragDataLocation(program, color, name); }
MUT_FORCE_INLINE void _mutBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name) { mutGLAPI.mutBindFragDataLocationEXT(program, color, name); }
MUT_FORCE_INLINE void _mutBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) { mutGLAPI.mutBindFragDataLocationIndexed(program, colorNumber, index, name); }
MUT_FORCE_INLINE void _mutBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) { mutGLAPI.mutBindFragDataLocationIndexedEXT(program, colorNumber, index, name); }
MUT_FORCE_INLINE void _mutBindFragmentShaderATI(GLuint id) { mutGLAPI.mutBindFragmentShaderATI(id); }
MUT_FORCE_INLINE void _mutBindFramebuffer(GLenum target, GLuint framebuffer) { mutGLAPI.mutBindFramebuffer(target, framebuffer); }
MUT_FORCE_INLINE void _mutBindFramebufferEXT(GLenum target, GLuint framebuffer) { mutGLAPI.mutBindFramebufferEXT(target, framebuffer); }
MUT_FORCE_INLINE void _mutBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { mutGLAPI.mutBindImageTexture(unit, texture, level, layered, layer, access, format); }
MUT_FORCE_INLINE void _mutBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { mutGLAPI.mutBindImageTextureEXT(index, texture, level, layered, layer, access, format); }
MUT_FORCE_INLINE void _mutBindImageTextures(GLuint first, GLsizei count, const GLuint *textures) { mutGLAPI.mutBindImageTextures(first, count, textures); }
MUT_FORCE_INLINE GLuint _mutBindLightParameterEXT(GLenum light, GLenum value) { return mutGLAPI.mutBindLightParameterEXT(light, value); }
MUT_FORCE_INLINE GLuint _mutBindMaterialParameterEXT(GLenum face, GLenum value) { return mutGLAPI.mutBindMaterialParameterEXT(face, value); }
MUT_FORCE_INLINE void _mutBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) { mutGLAPI.mutBindMultiTextureEXT(texunit, target, texture); }
MUT_FORCE_INLINE GLuint _mutBindParameterEXT(GLenum value) { return mutGLAPI.mutBindParameterEXT(value); }
MUT_FORCE_INLINE void _mutBindProgramARB(GLenum target, GLuint program) { mutGLAPI.mutBindProgramARB(target, program); }
MUT_FORCE_INLINE void _mutBindProgramNV(GLenum target, GLuint id) { mutGLAPI.mutBindProgramNV(target, id); }
MUT_FORCE_INLINE void _mutBindProgramPipeline(GLuint pipeline) { mutGLAPI.mutBindProgramPipeline(pipeline); }
MUT_FORCE_INLINE void _mutBindProgramPipelineEXT(GLuint pipeline) { mutGLAPI.mutBindProgramPipelineEXT(pipeline); }
MUT_FORCE_INLINE void _mutBindRenderbuffer(GLenum target, GLuint renderbuffer) { mutGLAPI.mutBindRenderbuffer(target, renderbuffer); }
MUT_FORCE_INLINE void _mutBindRenderbufferEXT(GLenum target, GLuint renderbuffer) { mutGLAPI.mutBindRenderbufferEXT(target, renderbuffer); }
MUT_FORCE_INLINE void _mutBindSampler(GLuint unit, GLuint sampler) { mutGLAPI.mutBindSampler(unit, sampler); }
MUT_FORCE_INLINE void _mutBindSamplers(GLuint first, GLsizei count, const GLuint *samplers) { mutGLAPI.mutBindSamplers(first, count, samplers); }
MUT_FORCE_INLINE GLuint _mutBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) { return mutGLAPI.mutBindTexGenParameterEXT(unit, coord, value); }
MUT_FORCE_INLINE void _mutBindTexture(GLenum target, GLuint texture) { mutGLAPI.mutBindTexture(target, texture); }
MUT_FORCE_INLINE void _mutBindTextureEXT(GLenum target, GLuint texture) { mutGLAPI.mutBindTextureEXT(target, texture); }
MUT_FORCE_INLINE void _mutBindTextureUnit(GLuint unit, GLuint texture) { mutGLAPI.mutBindTextureUnit(unit, texture); }
MUT_FORCE_INLINE GLuint _mutBindTextureUnitParameterEXT(GLenum unit, GLenum value) { return mutGLAPI.mutBindTextureUnitParameterEXT(unit, value); }
MUT_FORCE_INLINE void _mutBindTextures(GLuint first, GLsizei count, const GLuint *textures) { mutGLAPI.mutBindTextures(first, count, textures); }
MUT_FORCE_INLINE void _mutBindTransformFeedback(GLenum target, GLuint id) { mutGLAPI.mutBindTransformFeedback(target, id); }
MUT_FORCE_INLINE void _mutBindTransformFeedbackNV(GLenum target, GLuint id) { mutGLAPI.mutBindTransformFeedbackNV(target, id); }
MUT_FORCE_INLINE void _mutBindVertexArray(GLuint array) { mutGLAPI.mutBindVertexArray(array); }
MUT_FORCE_INLINE void _mutBindVertexArrayAPPLE(GLuint array) { mutGLAPI.mutBindVertexArrayAPPLE(array); }
MUT_FORCE_INLINE void _mutBindVertexArrayOES(GLuint array) { mutGLAPI.mutBindVertexArrayOES(array); }
MUT_FORCE_INLINE void _mutBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { mutGLAPI.mutBindVertexBuffer(bindingindex, buffer, offset, stride); }
MUT_FORCE_INLINE void _mutBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) { mutGLAPI.mutBindVertexBuffers(first, count, buffers, offsets, strides); }
MUT_FORCE_INLINE void _mutBindVertexShaderEXT(GLuint id) { mutGLAPI.mutBindVertexShaderEXT(id); }
MUT_FORCE_INLINE void _mutBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { mutGLAPI.mutBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset); }
MUT_FORCE_INLINE void _mutBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { mutGLAPI.mutBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture); }
MUT_FORCE_INLINE void _mutBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) { mutGLAPI.mutBinormal3bEXT(bx, by, bz); }
MUT_FORCE_INLINE void _mutBinormal3bvEXT(const GLbyte *v) { mutGLAPI.mutBinormal3bvEXT(v); }
MUT_FORCE_INLINE void _mutBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) { mutGLAPI.mutBinormal3dEXT(bx, by, bz); }
MUT_FORCE_INLINE void _mutBinormal3dvEXT(const GLdouble *v) { mutGLAPI.mutBinormal3dvEXT(v); }
MUT_FORCE_INLINE void _mutBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) { mutGLAPI.mutBinormal3fEXT(bx, by, bz); }
MUT_FORCE_INLINE void _mutBinormal3fvEXT(const GLfloat *v) { mutGLAPI.mutBinormal3fvEXT(v); }
MUT_FORCE_INLINE void _mutBinormal3iEXT(GLint bx, GLint by, GLint bz) { mutGLAPI.mutBinormal3iEXT(bx, by, bz); }
MUT_FORCE_INLINE void _mutBinormal3ivEXT(const GLint *v) { mutGLAPI.mutBinormal3ivEXT(v); }
MUT_FORCE_INLINE void _mutBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) { mutGLAPI.mutBinormal3sEXT(bx, by, bz); }
MUT_FORCE_INLINE void _mutBinormal3svEXT(const GLshort *v) { mutGLAPI.mutBinormal3svEXT(v); }
MUT_FORCE_INLINE void _mutBinormalPointerEXT(GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutBinormalPointerEXT(type, stride, pointer); }
MUT_FORCE_INLINE void _mutBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap) { mutGLAPI.mutBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap); }
MUT_FORCE_INLINE void _mutBlendBarrier(void) { mutGLAPI.mutBlendBarrier(); }
MUT_FORCE_INLINE void _mutBlendBarrierKHR(void) { mutGLAPI.mutBlendBarrierKHR(); }
MUT_FORCE_INLINE void _mutBlendBarrierNV(void) { mutGLAPI.mutBlendBarrierNV(); }
MUT_FORCE_INLINE void _mutBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { mutGLAPI.mutBlendColor(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { mutGLAPI.mutBlendColorEXT(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { mutGLAPI.mutBlendColorxOES(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutBlendEquation(GLenum mode) { mutGLAPI.mutBlendEquation(mode); }
MUT_FORCE_INLINE void _mutBlendEquationEXT(GLenum mode) { mutGLAPI.mutBlendEquationEXT(mode); }
MUT_FORCE_INLINE void _mutBlendEquationIndexedAMD(GLuint buf, GLenum mode) { mutGLAPI.mutBlendEquationIndexedAMD(buf, mode); }
MUT_FORCE_INLINE void _mutBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) { mutGLAPI.mutBlendEquationSeparate(modeRGB, modeAlpha); }
MUT_FORCE_INLINE void _mutBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) { mutGLAPI.mutBlendEquationSeparateEXT(modeRGB, modeAlpha); }
MUT_FORCE_INLINE void _mutBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { mutGLAPI.mutBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha); }
MUT_FORCE_INLINE void _mutBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { mutGLAPI.mutBlendEquationSeparatei(buf, modeRGB, modeAlpha); }
MUT_FORCE_INLINE void _mutBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { mutGLAPI.mutBlendEquationSeparateiARB(buf, modeRGB, modeAlpha); }
MUT_FORCE_INLINE void _mutBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { mutGLAPI.mutBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha); }
MUT_FORCE_INLINE void _mutBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { mutGLAPI.mutBlendEquationSeparateiOES(buf, modeRGB, modeAlpha); }
MUT_FORCE_INLINE void _mutBlendEquationi(GLuint buf, GLenum mode) { mutGLAPI.mutBlendEquationi(buf, mode); }
MUT_FORCE_INLINE void _mutBlendEquationiARB(GLuint buf, GLenum mode) { mutGLAPI.mutBlendEquationiARB(buf, mode); }
MUT_FORCE_INLINE void _mutBlendEquationiEXT(GLuint buf, GLenum mode) { mutGLAPI.mutBlendEquationiEXT(buf, mode); }
MUT_FORCE_INLINE void _mutBlendEquationiOES(GLuint buf, GLenum mode) { mutGLAPI.mutBlendEquationiOES(buf, mode); }
MUT_FORCE_INLINE void _mutBlendFunc(GLenum sfactor, GLenum dfactor) { mutGLAPI.mutBlendFunc(sfactor, dfactor); }
MUT_FORCE_INLINE void _mutBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) { mutGLAPI.mutBlendFuncIndexedAMD(buf, src, dst); }
MUT_FORCE_INLINE void _mutBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { mutGLAPI.mutBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
MUT_FORCE_INLINE void _mutBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { mutGLAPI.mutBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
MUT_FORCE_INLINE void _mutBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { mutGLAPI.mutBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
MUT_FORCE_INLINE void _mutBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { mutGLAPI.mutBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
MUT_FORCE_INLINE void _mutBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { mutGLAPI.mutBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
MUT_FORCE_INLINE void _mutBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { mutGLAPI.mutBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
MUT_FORCE_INLINE void _mutBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { mutGLAPI.mutBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
MUT_FORCE_INLINE void _mutBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { mutGLAPI.mutBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
MUT_FORCE_INLINE void _mutBlendFunci(GLuint buf, GLenum src, GLenum dst) { mutGLAPI.mutBlendFunci(buf, src, dst); }
MUT_FORCE_INLINE void _mutBlendFunciARB(GLuint buf, GLenum src, GLenum dst) { mutGLAPI.mutBlendFunciARB(buf, src, dst); }
MUT_FORCE_INLINE void _mutBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) { mutGLAPI.mutBlendFunciEXT(buf, src, dst); }
MUT_FORCE_INLINE void _mutBlendFunciOES(GLuint buf, GLenum src, GLenum dst) { mutGLAPI.mutBlendFunciOES(buf, src, dst); }
MUT_FORCE_INLINE void _mutBlendParameteriNV(GLenum pname, GLint value) { mutGLAPI.mutBlendParameteriNV(pname, value); }
MUT_FORCE_INLINE void _mutBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { mutGLAPI.mutBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
MUT_FORCE_INLINE void _mutBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { mutGLAPI.mutBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
MUT_FORCE_INLINE void _mutBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { mutGLAPI.mutBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
MUT_FORCE_INLINE void _mutBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { mutGLAPI.mutBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
MUT_FORCE_INLINE void _mutBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { mutGLAPI.mutBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
MUT_FORCE_INLINE void _mutBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { mutGLAPI.mutBufferAddressRangeNV(pname, index, address, length); }
MUT_FORCE_INLINE void _mutBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) { mutGLAPI.mutBufferData(target, size, data, usage); }
MUT_FORCE_INLINE void _mutBufferDataARB(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage) { mutGLAPI.mutBufferDataARB(target, size, data, usage); }
MUT_FORCE_INLINE void _mutBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { mutGLAPI.mutBufferPageCommitmentARB(target, offset, size, commit); }
MUT_FORCE_INLINE void _mutBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) { mutGLAPI.mutBufferParameteriAPPLE(target, pname, param); }
MUT_FORCE_INLINE GLuint _mutBufferRegionEnabled(void) { return mutGLAPI.mutBufferRegionEnabled(); }
MUT_FORCE_INLINE void _mutBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) { mutGLAPI.mutBufferStorage(target, size, data, flags); }
MUT_FORCE_INLINE void _mutBufferStorageEXT(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) { mutGLAPI.mutBufferStorageEXT(target, size, data, flags); }
MUT_FORCE_INLINE void _mutBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { mutGLAPI.mutBufferStorageExternalEXT(target, offset, size, clientBuffer, flags); }
MUT_FORCE_INLINE void _mutBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { mutGLAPI.mutBufferStorageMemEXT(target, size, memory, offset); }
MUT_FORCE_INLINE void _mutBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) { mutGLAPI.mutBufferSubData(target, offset, size, data); }
MUT_FORCE_INLINE void _mutBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data) { mutGLAPI.mutBufferSubDataARB(target, offset, size, data); }
MUT_FORCE_INLINE void _mutCallCommandListNV(GLuint list) { mutGLAPI.mutCallCommandListNV(list); }
MUT_FORCE_INLINE GLenum _mutCheckFramebufferStatus(GLenum target) { return mutGLAPI.mutCheckFramebufferStatus(target); }
MUT_FORCE_INLINE GLenum _mutCheckFramebufferStatusEXT(GLenum target) { return mutGLAPI.mutCheckFramebufferStatusEXT(target); }
MUT_FORCE_INLINE GLenum _mutCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) { return mutGLAPI.mutCheckNamedFramebufferStatus(framebuffer, target); }
MUT_FORCE_INLINE GLenum _mutCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) { return mutGLAPI.mutCheckNamedFramebufferStatusEXT(framebuffer, target); }
MUT_FORCE_INLINE void _mutClampColor(GLenum target, GLenum clamp) { mutGLAPI.mutClampColor(target, clamp); }
MUT_FORCE_INLINE void _mutClampColorARB(GLenum target, GLenum clamp) { mutGLAPI.mutClampColorARB(target, clamp); }
MUT_FORCE_INLINE void _mutClear(GLbitfield mask) { mutGLAPI.mutClear(mask); }
MUT_FORCE_INLINE void _mutClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { mutGLAPI.mutClearAccumxOES(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearBufferData(target, internalformat, format, type, data); }
MUT_FORCE_INLINE void _mutClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearBufferSubData(target, internalformat, offset, size, format, type, data); }
MUT_FORCE_INLINE void _mutClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { mutGLAPI.mutClearBufferfi(buffer, drawbuffer, depth, stencil); }
MUT_FORCE_INLINE void _mutClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) { mutGLAPI.mutClearBufferfv(buffer, drawbuffer, value); }
MUT_FORCE_INLINE void _mutClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) { mutGLAPI.mutClearBufferiv(buffer, drawbuffer, value); }
MUT_FORCE_INLINE void _mutClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) { mutGLAPI.mutClearBufferuiv(buffer, drawbuffer, value); }
MUT_FORCE_INLINE void _mutClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { mutGLAPI.mutClearColor(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) { mutGLAPI.mutClearColorIiEXT(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) { mutGLAPI.mutClearColorIuiEXT(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { mutGLAPI.mutClearColorxOES(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutClearDepth(GLdouble depth) { mutGLAPI.mutClearDepth(depth); }
MUT_FORCE_INLINE void _mutClearDepthdNV(GLdouble depth) { mutGLAPI.mutClearDepthdNV(depth); }
MUT_FORCE_INLINE void _mutClearDepthf(GLfloat d) { mutGLAPI.mutClearDepthf(d); }
MUT_FORCE_INLINE void _mutClearDepthfOES(GLclampf depth) { mutGLAPI.mutClearDepthfOES(depth); }
MUT_FORCE_INLINE void _mutClearDepthxOES(GLfixed depth) { mutGLAPI.mutClearDepthxOES(depth); }
MUT_FORCE_INLINE void _mutClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearNamedBufferData(buffer, internalformat, format, type, data); }
MUT_FORCE_INLINE void _mutClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearNamedBufferDataEXT(buffer, internalformat, format, type, data); }
MUT_FORCE_INLINE void _mutClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
MUT_FORCE_INLINE void _mutClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data); }
MUT_FORCE_INLINE void _mutClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { mutGLAPI.mutClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
MUT_FORCE_INLINE void _mutClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) { mutGLAPI.mutClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
MUT_FORCE_INLINE void _mutClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) { mutGLAPI.mutClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
MUT_FORCE_INLINE void _mutClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) { mutGLAPI.mutClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
MUT_FORCE_INLINE void _mutClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint *values) { mutGLAPI.mutClearPixelLocalStorageuiEXT(offset, n, values); }
MUT_FORCE_INLINE void _mutClearStencil(GLint s) { mutGLAPI.mutClearStencil(s); }
MUT_FORCE_INLINE void _mutClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearTexImage(texture, level, format, type, data); }
MUT_FORCE_INLINE void _mutClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearTexImageEXT(texture, level, format, type, data); }
MUT_FORCE_INLINE void _mutClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
MUT_FORCE_INLINE void _mutClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) { mutGLAPI.mutClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
MUT_FORCE_INLINE void _mutClientActiveTexture(GLenum texture) { mutGLAPI.mutClientActiveTexture(texture); }
MUT_FORCE_INLINE void _mutClientActiveTextureARB(GLenum texture) { mutGLAPI.mutClientActiveTextureARB(texture); }
MUT_FORCE_INLINE void _mutClientActiveVertexStreamATI(GLenum stream) { mutGLAPI.mutClientActiveVertexStreamATI(stream); }
MUT_FORCE_INLINE void _mutClientAttribDefaultEXT(GLbitfield mask) { mutGLAPI.mutClientAttribDefaultEXT(mask); }
MUT_FORCE_INLINE GLenum _mutClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return mutGLAPI.mutClientWaitSync(sync, flags, timeout); }
MUT_FORCE_INLINE GLenum _mutClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { return mutGLAPI.mutClientWaitSyncAPPLE(sync, flags, timeout); }
MUT_FORCE_INLINE void _mutClipControl(GLenum origin, GLenum depth) { mutGLAPI.mutClipControl(origin, depth); }
MUT_FORCE_INLINE void _mutClipPlanefOES(GLenum plane, const GLfloat *equation) { mutGLAPI.mutClipPlanefOES(plane, equation); }
MUT_FORCE_INLINE void _mutClipPlanexOES(GLenum plane, const GLfixed *equation) { mutGLAPI.mutClipPlanexOES(plane, equation); }
MUT_FORCE_INLINE void _mutColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutColor3fVertex3fSUN(r, g, b, x, y, z); }
MUT_FORCE_INLINE void _mutColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v) { mutGLAPI.mutColor3fVertex3fvSUN(c, v); }
MUT_FORCE_INLINE void _mutColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { mutGLAPI.mutColor3hNV(red, green, blue); }
MUT_FORCE_INLINE void _mutColor3hvNV(const GLhalfNV *v) { mutGLAPI.mutColor3hvNV(v); }
MUT_FORCE_INLINE void _mutColor3xOES(GLfixed red, GLfixed green, GLfixed blue) { mutGLAPI.mutColor3xOES(red, green, blue); }
MUT_FORCE_INLINE void _mutColor3xvOES(const GLfixed *components) { mutGLAPI.mutColor3xvOES(components); }
MUT_FORCE_INLINE void _mutColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutColor4fNormal3fVertex3fvSUN(c, n, v); }
MUT_FORCE_INLINE void _mutColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { mutGLAPI.mutColor4hNV(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutColor4hvNV(const GLhalfNV *v) { mutGLAPI.mutColor4hvNV(v); }
MUT_FORCE_INLINE void _mutColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { mutGLAPI.mutColor4ubVertex2fSUN(r, g, b, a, x, y); }
MUT_FORCE_INLINE void _mutColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v) { mutGLAPI.mutColor4ubVertex2fvSUN(c, v); }
MUT_FORCE_INLINE void _mutColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutColor4ubVertex3fSUN(r, g, b, a, x, y, z); }
MUT_FORCE_INLINE void _mutColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v) { mutGLAPI.mutColor4ubVertex3fvSUN(c, v); }
MUT_FORCE_INLINE void _mutColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { mutGLAPI.mutColor4xOES(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutColor4xvOES(const GLfixed *components) { mutGLAPI.mutColor4xvOES(components); }
MUT_FORCE_INLINE void _mutColorFormatNV(GLint size, GLenum type, GLsizei stride) { mutGLAPI.mutColorFormatNV(size, type, stride); }
MUT_FORCE_INLINE void _mutColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { mutGLAPI.mutColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); }
MUT_FORCE_INLINE void _mutColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { mutGLAPI.mutColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
MUT_FORCE_INLINE void _mutColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { mutGLAPI.mutColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
MUT_FORCE_INLINE void _mutColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { mutGLAPI.mutColorMask(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { mutGLAPI.mutColorMaskIndexedEXT(index, r, g, b, a); }
MUT_FORCE_INLINE void _mutColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { mutGLAPI.mutColorMaski(index, r, g, b, a); }
MUT_FORCE_INLINE void _mutColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { mutGLAPI.mutColorMaskiEXT(index, r, g, b, a); }
MUT_FORCE_INLINE void _mutColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { mutGLAPI.mutColorMaskiOES(index, r, g, b, a); }
MUT_FORCE_INLINE void _mutColorP3ui(GLenum type, GLuint color) { mutGLAPI.mutColorP3ui(type, color); }
MUT_FORCE_INLINE void _mutColorP3uiv(GLenum type, const GLuint *color) { mutGLAPI.mutColorP3uiv(type, color); }
MUT_FORCE_INLINE void _mutColorP4ui(GLenum type, GLuint color) { mutGLAPI.mutColorP4ui(type, color); }
MUT_FORCE_INLINE void _mutColorP4uiv(GLenum type, const GLuint *color) { mutGLAPI.mutColorP4uiv(type, color); }
MUT_FORCE_INLINE void _mutColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) { mutGLAPI.mutColorPointerEXT(size, type, stride, count, pointer); }
MUT_FORCE_INLINE void _mutColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { mutGLAPI.mutColorPointerListIBM(size, type, stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutColorPointervINTEL(GLint size, GLenum type, const void **pointer) { mutGLAPI.mutColorPointervINTEL(size, type, pointer); }
MUT_FORCE_INLINE void _mutColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) { mutGLAPI.mutColorSubTable(target, start, count, format, type, data); }
MUT_FORCE_INLINE void _mutColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data) { mutGLAPI.mutColorSubTableEXT(target, start, count, format, type, data); }
MUT_FORCE_INLINE void _mutColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) { mutGLAPI.mutColorTable(target, internalformat, width, format, type, table); }
MUT_FORCE_INLINE void _mutColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table) { mutGLAPI.mutColorTableEXT(target, internalFormat, width, format, type, table); }
MUT_FORCE_INLINE void _mutColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutColorTableParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutColorTableParameterfvSGI(target, pname, params); }
MUT_FORCE_INLINE void _mutColorTableParameteriv(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutColorTableParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutColorTableParameterivSGI(target, pname, params); }
MUT_FORCE_INLINE void _mutColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table) { mutGLAPI.mutColorTableSGI(target, internalformat, width, format, type, table); }
MUT_FORCE_INLINE void _mutCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { mutGLAPI.mutCombinerInputNV(stage, portion, variable, input, mapping, componentUsage); }
MUT_FORCE_INLINE void _mutCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { mutGLAPI.mutCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); }
MUT_FORCE_INLINE void _mutCombinerParameterfNV(GLenum pname, GLfloat param) { mutGLAPI.mutCombinerParameterfNV(pname, param); }
MUT_FORCE_INLINE void _mutCombinerParameterfvNV(GLenum pname, const GLfloat *params) { mutGLAPI.mutCombinerParameterfvNV(pname, params); }
MUT_FORCE_INLINE void _mutCombinerParameteriNV(GLenum pname, GLint param) { mutGLAPI.mutCombinerParameteriNV(pname, param); }
MUT_FORCE_INLINE void _mutCombinerParameterivNV(GLenum pname, const GLint *params) { mutGLAPI.mutCombinerParameterivNV(pname, params); }
MUT_FORCE_INLINE void _mutCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params) { mutGLAPI.mutCombinerStageParameterfvNV(stage, pname, params); }
MUT_FORCE_INLINE void _mutCommandListSegmentsNV(GLuint list, GLuint segments) { mutGLAPI.mutCommandListSegmentsNV(list, segments); }
MUT_FORCE_INLINE void _mutCompileCommandListNV(GLuint list) { mutGLAPI.mutCompileCommandListNV(list); }
MUT_FORCE_INLINE void _mutCompileShader(GLuint shader) { mutGLAPI.mutCompileShader(shader); }
MUT_FORCE_INLINE void _mutCompileShaderARB(GLhandleARB shaderObj) { mutGLAPI.mutCompileShaderARB(shaderObj); }
MUT_FORCE_INLINE void _mutCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const *path, const GLint *length) { mutGLAPI.mutCompileShaderIncludeARB(shader, count, path, length); }
MUT_FORCE_INLINE void _mutCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
MUT_FORCE_INLINE void _mutCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) { mutGLAPI.mutCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
MUT_FORCE_INLINE void _mutCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits) { mutGLAPI.mutCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
MUT_FORCE_INLINE void _mutConservativeRasterParameterfNV(GLenum pname, GLfloat value) { mutGLAPI.mutConservativeRasterParameterfNV(pname, value); }
MUT_FORCE_INLINE void _mutConservativeRasterParameteriNV(GLenum pname, GLint param) { mutGLAPI.mutConservativeRasterParameteriNV(pname, param); }
MUT_FORCE_INLINE void _mutConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) { mutGLAPI.mutConvolutionFilter1D(target, internalformat, width, format, type, image); }
MUT_FORCE_INLINE void _mutConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image) { mutGLAPI.mutConvolutionFilter1DEXT(target, internalformat, width, format, type, image); }
MUT_FORCE_INLINE void _mutConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) { mutGLAPI.mutConvolutionFilter2D(target, internalformat, width, height, format, type, image); }
MUT_FORCE_INLINE void _mutConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image) { mutGLAPI.mutConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image); }
MUT_FORCE_INLINE void _mutConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) { mutGLAPI.mutConvolutionParameterf(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) { mutGLAPI.mutConvolutionParameterfEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutConvolutionParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutConvolutionParameterfvEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameteri(GLenum target, GLenum pname, GLint params) { mutGLAPI.mutConvolutionParameteri(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) { mutGLAPI.mutConvolutionParameteriEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutConvolutionParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutConvolutionParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) { mutGLAPI.mutConvolutionParameterxOES(target, pname, param); }
MUT_FORCE_INLINE void _mutConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed *params) { mutGLAPI.mutConvolutionParameterxvOES(target, pname, params); }
MUT_FORCE_INLINE void _mutCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { mutGLAPI.mutCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
MUT_FORCE_INLINE void _mutCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { mutGLAPI.mutCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size); }
MUT_FORCE_INLINE void _mutCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyColorSubTable(target, start, x, y, width); }
MUT_FORCE_INLINE void _mutCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyColorSubTableEXT(target, start, x, y, width); }
MUT_FORCE_INLINE void _mutCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyColorTable(target, internalformat, x, y, width); }
MUT_FORCE_INLINE void _mutCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyColorTableSGI(target, internalformat, x, y, width); }
MUT_FORCE_INLINE void _mutCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyConvolutionFilter1D(target, internalformat, x, y, width); }
MUT_FORCE_INLINE void _mutCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyConvolutionFilter1DEXT(target, internalformat, x, y, width); }
MUT_FORCE_INLINE void _mutCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyConvolutionFilter2D(target, internalformat, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { mutGLAPI.mutCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
MUT_FORCE_INLINE void _mutCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { mutGLAPI.mutCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
MUT_FORCE_INLINE void _mutCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { mutGLAPI.mutCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
MUT_FORCE_INLINE void _mutCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { mutGLAPI.mutCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
MUT_FORCE_INLINE void _mutCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { mutGLAPI.mutCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border); }
MUT_FORCE_INLINE void _mutCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { mutGLAPI.mutCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border); }
MUT_FORCE_INLINE void _mutCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width); }
MUT_FORCE_INLINE void _mutCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { mutGLAPI.mutCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
MUT_FORCE_INLINE void _mutCopyPathNV(GLuint resultPath, GLuint srcPath) { mutGLAPI.mutCopyPathNV(resultPath, srcPath); }
MUT_FORCE_INLINE void _mutCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { mutGLAPI.mutCopyTexImage1D(target, level, internalformat, x, y, width, border); }
MUT_FORCE_INLINE void _mutCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { mutGLAPI.mutCopyTexImage1DEXT(target, level, internalformat, x, y, width, border); }
MUT_FORCE_INLINE void _mutCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { mutGLAPI.mutCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
MUT_FORCE_INLINE void _mutCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { mutGLAPI.mutCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border); }
MUT_FORCE_INLINE void _mutCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyTexSubImage1D(target, level, xoffset, x, y, width); }
MUT_FORCE_INLINE void _mutCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyTexSubImage1DEXT(target, level, xoffset, x, y, width); }
MUT_FORCE_INLINE void _mutCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { mutGLAPI.mutCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border); }
MUT_FORCE_INLINE void _mutCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { mutGLAPI.mutCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border); }
MUT_FORCE_INLINE void _mutCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) { mutGLAPI.mutCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount); }
MUT_FORCE_INLINE void _mutCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
MUT_FORCE_INLINE void _mutCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { mutGLAPI.mutCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width); }
MUT_FORCE_INLINE void _mutCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
MUT_FORCE_INLINE void _mutCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { mutGLAPI.mutCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
MUT_FORCE_INLINE void _mutCoverFillPathNV(GLuint path, GLenum coverMode) { mutGLAPI.mutCoverFillPathNV(path, coverMode); }
MUT_FORCE_INLINE void _mutCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { mutGLAPI.mutCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
MUT_FORCE_INLINE void _mutCoverStrokePathNV(GLuint path, GLenum coverMode) { mutGLAPI.mutCoverStrokePathNV(path, coverMode); }
MUT_FORCE_INLINE void _mutCoverageMaskNV(GLboolean mask) { mutGLAPI.mutCoverageMaskNV(mask); }
MUT_FORCE_INLINE void _mutCoverageModulationNV(GLenum components) { mutGLAPI.mutCoverageModulationNV(components); }
MUT_FORCE_INLINE void _mutCoverageModulationTableNV(GLsizei n, const GLfloat *v) { mutGLAPI.mutCoverageModulationTableNV(n, v); }
MUT_FORCE_INLINE void _mutCoverageOperationNV(GLenum operation) { mutGLAPI.mutCoverageOperationNV(operation); }
MUT_FORCE_INLINE void _mutCreateBuffers(GLsizei n, GLuint *buffers) { mutGLAPI.mutCreateBuffers(n, buffers); }
MUT_FORCE_INLINE void _mutCreateCommandListsNV(GLsizei n, GLuint *lists) { mutGLAPI.mutCreateCommandListsNV(n, lists); }
MUT_FORCE_INLINE void _mutCreateFramebuffers(GLsizei n, GLuint *framebuffers) { mutGLAPI.mutCreateFramebuffers(n, framebuffers); }
MUT_FORCE_INLINE void _mutCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects) { mutGLAPI.mutCreateMemoryObjectsEXT(n, memoryObjects); }
MUT_FORCE_INLINE void _mutCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle) { mutGLAPI.mutCreatePerfQueryINTEL(queryId, queryHandle); }
MUT_FORCE_INLINE GLuint _mutCreateProgram(void) { return mutGLAPI.mutCreateProgram(); }
MUT_FORCE_INLINE GLhandleARB _mutCreateProgramObjectARB(void) { return mutGLAPI.mutCreateProgramObjectARB(); }
MUT_FORCE_INLINE void _mutCreateProgramPipelines(GLsizei n, GLuint *pipelines) { mutGLAPI.mutCreateProgramPipelines(n, pipelines); }
MUT_FORCE_INLINE void _mutCreateQueries(GLenum target, GLsizei n, GLuint *ids) { mutGLAPI.mutCreateQueries(target, n, ids); }
MUT_FORCE_INLINE void _mutCreateRenderbuffers(GLsizei n, GLuint *renderbuffers) { mutGLAPI.mutCreateRenderbuffers(n, renderbuffers); }
MUT_FORCE_INLINE void _mutCreateSamplers(GLsizei n, GLuint *samplers) { mutGLAPI.mutCreateSamplers(n, samplers); }
MUT_FORCE_INLINE GLuint _mutCreateShader(GLenum type) { return mutGLAPI.mutCreateShader(type); }
MUT_FORCE_INLINE GLhandleARB _mutCreateShaderObjectARB(GLenum shaderType) { return mutGLAPI.mutCreateShaderObjectARB(shaderType); }
MUT_FORCE_INLINE GLuint _mutCreateShaderProgramEXT(GLenum type, const GLchar *string) { return mutGLAPI.mutCreateShaderProgramEXT(type, string); }
MUT_FORCE_INLINE GLuint _mutCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const *strings) { return mutGLAPI.mutCreateShaderProgramv(type, count, strings); }
MUT_FORCE_INLINE GLuint _mutCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar **strings) { return mutGLAPI.mutCreateShaderProgramvEXT(type, count, strings); }
MUT_FORCE_INLINE void _mutCreateStatesNV(GLsizei n, GLuint *states) { mutGLAPI.mutCreateStatesNV(n, states); }
MUT_FORCE_INLINE GLsync _mutCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags) { return mutGLAPI.mutCreateSyncFromCLeventARB(context, event, flags); }
MUT_FORCE_INLINE void _mutCreateTextures(GLenum target, GLsizei n, GLuint *textures) { mutGLAPI.mutCreateTextures(target, n, textures); }
MUT_FORCE_INLINE void _mutCreateTransformFeedbacks(GLsizei n, GLuint *ids) { mutGLAPI.mutCreateTransformFeedbacks(n, ids); }
MUT_FORCE_INLINE void _mutCreateVertexArrays(GLsizei n, GLuint *arrays) { mutGLAPI.mutCreateVertexArrays(n, arrays); }
MUT_FORCE_INLINE void _mutCullFace(GLenum mode) { mutGLAPI.mutCullFace(mode); }
MUT_FORCE_INLINE void _mutCullParameterdvEXT(GLenum pname, GLdouble *params) { mutGLAPI.mutCullParameterdvEXT(pname, params); }
MUT_FORCE_INLINE void _mutCullParameterfvEXT(GLenum pname, GLfloat *params) { mutGLAPI.mutCullParameterfvEXT(pname, params); }
MUT_FORCE_INLINE void _mutCurrentPaletteMatrixARB(GLint index) { mutGLAPI.mutCurrentPaletteMatrixARB(index); }
MUT_FORCE_INLINE void _mutDebugMessageCallback(GLDEBUGPROC callback, const void *userParam) { mutGLAPI.mutDebugMessageCallback(callback, userParam); }
MUT_FORCE_INLINE void _mutDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void *userParam) { mutGLAPI.mutDebugMessageCallbackAMD(callback, userParam); }
MUT_FORCE_INLINE void _mutDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam) { mutGLAPI.mutDebugMessageCallbackARB(callback, userParam); }
MUT_FORCE_INLINE void _mutDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam) { mutGLAPI.mutDebugMessageCallbackKHR(callback, userParam); }
MUT_FORCE_INLINE void _mutDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) { mutGLAPI.mutDebugMessageControl(source, type, severity, count, ids, enabled); }
MUT_FORCE_INLINE void _mutDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) { mutGLAPI.mutDebugMessageControlARB(source, type, severity, count, ids, enabled); }
MUT_FORCE_INLINE void _mutDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) { mutGLAPI.mutDebugMessageControlKHR(source, type, severity, count, ids, enabled); }
MUT_FORCE_INLINE void _mutDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) { mutGLAPI.mutDebugMessageEnableAMD(category, severity, count, ids, enabled); }
MUT_FORCE_INLINE void _mutDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) { mutGLAPI.mutDebugMessageInsert(source, type, id, severity, length, buf); }
MUT_FORCE_INLINE void _mutDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf) { mutGLAPI.mutDebugMessageInsertAMD(category, severity, id, length, buf); }
MUT_FORCE_INLINE void _mutDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) { mutGLAPI.mutDebugMessageInsertARB(source, type, id, severity, length, buf); }
MUT_FORCE_INLINE void _mutDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) { mutGLAPI.mutDebugMessageInsertKHR(source, type, id, severity, length, buf); }
MUT_FORCE_INLINE void _mutDeformSGIX(GLbitfield mask) { mutGLAPI.mutDeformSGIX(mask); }
MUT_FORCE_INLINE void _mutDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points) { mutGLAPI.mutDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
MUT_FORCE_INLINE void _mutDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points) { mutGLAPI.mutDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
MUT_FORCE_INLINE void _mutDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) { mutGLAPI.mutDeleteAsyncMarkersSGIX(marker, range); }
MUT_FORCE_INLINE void _mutDeleteBufferRegion(GLenum region) { mutGLAPI.mutDeleteBufferRegion(region); }
MUT_FORCE_INLINE void _mutDeleteBuffers(GLsizei n, const GLuint *buffers) { mutGLAPI.mutDeleteBuffers(n, buffers); }
MUT_FORCE_INLINE void _mutDeleteBuffersARB(GLsizei n, const GLuint *buffers) { mutGLAPI.mutDeleteBuffersARB(n, buffers); }
MUT_FORCE_INLINE void _mutDeleteCommandListsNV(GLsizei n, const GLuint *lists) { mutGLAPI.mutDeleteCommandListsNV(n, lists); }
MUT_FORCE_INLINE void _mutDeleteFencesAPPLE(GLsizei n, const GLuint *fences) { mutGLAPI.mutDeleteFencesAPPLE(n, fences); }
MUT_FORCE_INLINE void _mutDeleteFencesNV(GLsizei n, const GLuint *fences) { mutGLAPI.mutDeleteFencesNV(n, fences); }
MUT_FORCE_INLINE void _mutDeleteFragmentShaderATI(GLuint id) { mutGLAPI.mutDeleteFragmentShaderATI(id); }
MUT_FORCE_INLINE void _mutDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) { mutGLAPI.mutDeleteFramebuffers(n, framebuffers); }
MUT_FORCE_INLINE void _mutDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers) { mutGLAPI.mutDeleteFramebuffersEXT(n, framebuffers); }
MUT_FORCE_INLINE void _mutDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects) { mutGLAPI.mutDeleteMemoryObjectsEXT(n, memoryObjects); }
MUT_FORCE_INLINE void _mutDeleteNamedStringARB(GLint namelen, const GLchar *name) { mutGLAPI.mutDeleteNamedStringARB(namelen, name); }
MUT_FORCE_INLINE void _mutDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names) { mutGLAPI.mutDeleteNamesAMD(identifier, num, names); }
MUT_FORCE_INLINE void _mutDeleteObjectARB(GLhandleARB obj) { mutGLAPI.mutDeleteObjectARB(obj); }
MUT_FORCE_INLINE void _mutDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids) { mutGLAPI.mutDeleteOcclusionQueriesNV(n, ids); }
MUT_FORCE_INLINE void _mutDeletePathsNV(GLuint path, GLsizei range) { mutGLAPI.mutDeletePathsNV(path, range); }
MUT_FORCE_INLINE void _mutDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors) { mutGLAPI.mutDeletePerfMonitorsAMD(n, monitors); }
MUT_FORCE_INLINE void _mutDeletePerfQueryINTEL(GLuint queryHandle) { mutGLAPI.mutDeletePerfQueryINTEL(queryHandle); }
MUT_FORCE_INLINE void _mutDeleteProgram(GLuint program) { mutGLAPI.mutDeleteProgram(program); }
MUT_FORCE_INLINE void _mutDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) { mutGLAPI.mutDeleteProgramPipelines(n, pipelines); }
MUT_FORCE_INLINE void _mutDeleteProgramPipelinesEXT(GLsizei n, const GLuint *pipelines) { mutGLAPI.mutDeleteProgramPipelinesEXT(n, pipelines); }
MUT_FORCE_INLINE void _mutDeleteProgramsARB(GLsizei n, const GLuint *programs) { mutGLAPI.mutDeleteProgramsARB(n, programs); }
MUT_FORCE_INLINE void _mutDeleteProgramsNV(GLsizei n, const GLuint *programs) { mutGLAPI.mutDeleteProgramsNV(n, programs); }
MUT_FORCE_INLINE void _mutDeleteQueries(GLsizei n, const GLuint *ids) { mutGLAPI.mutDeleteQueries(n, ids); }
MUT_FORCE_INLINE void _mutDeleteQueriesARB(GLsizei n, const GLuint *ids) { mutGLAPI.mutDeleteQueriesARB(n, ids); }
MUT_FORCE_INLINE void _mutDeleteQueriesEXT(GLsizei n, const GLuint *ids) { mutGLAPI.mutDeleteQueriesEXT(n, ids); }
MUT_FORCE_INLINE void _mutDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) { mutGLAPI.mutDeleteRenderbuffers(n, renderbuffers); }
MUT_FORCE_INLINE void _mutDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers) { mutGLAPI.mutDeleteRenderbuffersEXT(n, renderbuffers); }
MUT_FORCE_INLINE void _mutDeleteSamplers(GLsizei count, const GLuint *samplers) { mutGLAPI.mutDeleteSamplers(count, samplers); }
MUT_FORCE_INLINE void _mutDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores) { mutGLAPI.mutDeleteSemaphoresEXT(n, semaphores); }
MUT_FORCE_INLINE void _mutDeleteShader(GLuint shader) { mutGLAPI.mutDeleteShader(shader); }
MUT_FORCE_INLINE void _mutDeleteStatesNV(GLsizei n, const GLuint *states) { mutGLAPI.mutDeleteStatesNV(n, states); }
MUT_FORCE_INLINE void _mutDeleteSync(GLsync sync) { mutGLAPI.mutDeleteSync(sync); }
MUT_FORCE_INLINE void _mutDeleteSyncAPPLE(GLsync sync) { mutGLAPI.mutDeleteSyncAPPLE(sync); }
MUT_FORCE_INLINE void _mutDeleteTextures(GLsizei n, const GLuint *textures) { mutGLAPI.mutDeleteTextures(n, textures); }
MUT_FORCE_INLINE void _mutDeleteTexturesEXT(GLsizei n, const GLuint *textures) { mutGLAPI.mutDeleteTexturesEXT(n, textures); }
MUT_FORCE_INLINE void _mutDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) { mutGLAPI.mutDeleteTransformFeedbacks(n, ids); }
MUT_FORCE_INLINE void _mutDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids) { mutGLAPI.mutDeleteTransformFeedbacksNV(n, ids); }
MUT_FORCE_INLINE void _mutDeleteVertexArrays(GLsizei n, const GLuint *arrays) { mutGLAPI.mutDeleteVertexArrays(n, arrays); }
MUT_FORCE_INLINE void _mutDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays) { mutGLAPI.mutDeleteVertexArraysAPPLE(n, arrays); }
MUT_FORCE_INLINE void _mutDeleteVertexArraysOES(GLsizei n, const GLuint *arrays) { mutGLAPI.mutDeleteVertexArraysOES(n, arrays); }
MUT_FORCE_INLINE void _mutDeleteVertexShaderEXT(GLuint id) { mutGLAPI.mutDeleteVertexShaderEXT(id); }
MUT_FORCE_INLINE void _mutDepthBoundsEXT(GLclampd zmin, GLclampd zmax) { mutGLAPI.mutDepthBoundsEXT(zmin, zmax); }
MUT_FORCE_INLINE void _mutDepthBoundsdNV(GLdouble zmin, GLdouble zmax) { mutGLAPI.mutDepthBoundsdNV(zmin, zmax); }
MUT_FORCE_INLINE void _mutDepthFunc(GLenum func) { mutGLAPI.mutDepthFunc(func); }
MUT_FORCE_INLINE void _mutDepthMask(GLboolean flag) { mutGLAPI.mutDepthMask(flag); }
MUT_FORCE_INLINE void _mutDepthRange(GLdouble zNear, GLdouble zFar) { mutGLAPI.mutDepthRange(zNear, zFar); }
MUT_FORCE_INLINE void _mutDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat *v) { mutGLAPI.mutDepthRangeArrayfvNV(first, count, v); }
MUT_FORCE_INLINE void _mutDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat *v) { mutGLAPI.mutDepthRangeArrayfvOES(first, count, v); }
MUT_FORCE_INLINE void _mutDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v) { mutGLAPI.mutDepthRangeArrayv(first, count, v); }
MUT_FORCE_INLINE void _mutDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) { mutGLAPI.mutDepthRangeIndexed(index, n, f); }
MUT_FORCE_INLINE void _mutDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) { mutGLAPI.mutDepthRangeIndexedfNV(index, n, f); }
MUT_FORCE_INLINE void _mutDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) { mutGLAPI.mutDepthRangeIndexedfOES(index, n, f); }
MUT_FORCE_INLINE void _mutDepthRangedNV(GLdouble zNear, GLdouble zFar) { mutGLAPI.mutDepthRangedNV(zNear, zFar); }
MUT_FORCE_INLINE void _mutDepthRangef(GLfloat n, GLfloat f) { mutGLAPI.mutDepthRangef(n, f); }
MUT_FORCE_INLINE void _mutDepthRangefOES(GLclampf n, GLclampf f) { mutGLAPI.mutDepthRangefOES(n, f); }
MUT_FORCE_INLINE void _mutDepthRangexOES(GLfixed n, GLfixed f) { mutGLAPI.mutDepthRangexOES(n, f); }
MUT_FORCE_INLINE void _mutDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) { mutGLAPI.mutDetachObjectARB(containerObj, attachedObj); }
MUT_FORCE_INLINE void _mutDetachShader(GLuint program, GLuint shader) { mutGLAPI.mutDetachShader(program, shader); }
MUT_FORCE_INLINE void _mutDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) { mutGLAPI.mutDetailTexFuncSGIS(target, n, points); }
MUT_FORCE_INLINE void _mutDisable(GLenum cap) { mutGLAPI.mutDisable(cap); }
MUT_FORCE_INLINE void _mutDisableClientStateIndexedEXT(GLenum array, GLuint index) { mutGLAPI.mutDisableClientStateIndexedEXT(array, index); }
MUT_FORCE_INLINE void _mutDisableClientStateiEXT(GLenum array, GLuint index) { mutGLAPI.mutDisableClientStateiEXT(array, index); }
MUT_FORCE_INLINE void _mutDisableDriverControlQCOM(GLuint driverControl) { mutGLAPI.mutDisableDriverControlQCOM(driverControl); }
MUT_FORCE_INLINE void _mutDisableIndexedEXT(GLenum target, GLuint index) { mutGLAPI.mutDisableIndexedEXT(target, index); }
MUT_FORCE_INLINE void _mutDisableVariantClientStateEXT(GLuint id) { mutGLAPI.mutDisableVariantClientStateEXT(id); }
MUT_FORCE_INLINE void _mutDisableVertexArrayAttrib(GLuint vaobj, GLuint index) { mutGLAPI.mutDisableVertexArrayAttrib(vaobj, index); }
MUT_FORCE_INLINE void _mutDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { mutGLAPI.mutDisableVertexArrayAttribEXT(vaobj, index); }
MUT_FORCE_INLINE void _mutDisableVertexArrayEXT(GLuint vaobj, GLenum array) { mutGLAPI.mutDisableVertexArrayEXT(vaobj, array); }
MUT_FORCE_INLINE void _mutDisableVertexAttribAPPLE(GLuint index, GLenum pname) { mutGLAPI.mutDisableVertexAttribAPPLE(index, pname); }
MUT_FORCE_INLINE void _mutDisableVertexAttribArray(GLuint index) { mutGLAPI.mutDisableVertexAttribArray(index); }
MUT_FORCE_INLINE void _mutDisableVertexAttribArrayARB(GLuint index) { mutGLAPI.mutDisableVertexAttribArrayARB(index); }
MUT_FORCE_INLINE void _mutDisablei(GLenum target, GLuint index) { mutGLAPI.mutDisablei(target, index); }
MUT_FORCE_INLINE void _mutDisableiEXT(GLenum target, GLuint index) { mutGLAPI.mutDisableiEXT(target, index); }
MUT_FORCE_INLINE void _mutDisableiNV(GLenum target, GLuint index) { mutGLAPI.mutDisableiNV(target, index); }
MUT_FORCE_INLINE void _mutDisableiOES(GLenum target, GLuint index) { mutGLAPI.mutDisableiOES(target, index); }
MUT_FORCE_INLINE void _mutDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments) { mutGLAPI.mutDiscardFramebufferEXT(target, numAttachments, attachments); }
MUT_FORCE_INLINE void _mutDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { mutGLAPI.mutDispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
MUT_FORCE_INLINE void _mutDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { mutGLAPI.mutDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); }
MUT_FORCE_INLINE void _mutDispatchComputeIndirect(GLintptr indirect) { mutGLAPI.mutDispatchComputeIndirect(indirect); }
MUT_FORCE_INLINE void _mutDrawArrays(GLenum mode, GLint first, GLsizei count) { mutGLAPI.mutDrawArrays(mode, first, count); }
MUT_FORCE_INLINE void _mutDrawArraysEXT(GLenum mode, GLint first, GLsizei count) { mutGLAPI.mutDrawArraysEXT(mode, first, count); }
MUT_FORCE_INLINE void _mutDrawArraysIndirect(GLenum mode, const void *indirect) { mutGLAPI.mutDrawArraysIndirect(mode, indirect); }
MUT_FORCE_INLINE void _mutDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { mutGLAPI.mutDrawArraysInstanced(mode, first, count, instancecount); }
MUT_FORCE_INLINE void _mutDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { mutGLAPI.mutDrawArraysInstancedANGLE(mode, first, count, primcount); }
MUT_FORCE_INLINE void _mutDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { mutGLAPI.mutDrawArraysInstancedARB(mode, first, count, primcount); }
MUT_FORCE_INLINE void _mutDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { mutGLAPI.mutDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
MUT_FORCE_INLINE void _mutDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { mutGLAPI.mutDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance); }
MUT_FORCE_INLINE void _mutDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) { mutGLAPI.mutDrawArraysInstancedEXT(mode, start, count, primcount); }
MUT_FORCE_INLINE void _mutDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { mutGLAPI.mutDrawArraysInstancedNV(mode, first, count, primcount); }
MUT_FORCE_INLINE void _mutDrawBuffer(GLenum buf) { mutGLAPI.mutDrawBuffer(buf); }
MUT_FORCE_INLINE void _mutDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) { mutGLAPI.mutDrawBufferRegion(region, x, y, width, height, xDest, yDest); }
MUT_FORCE_INLINE void _mutDrawBuffers(GLsizei n, const GLenum *bufs) { mutGLAPI.mutDrawBuffers(n, bufs); }
MUT_FORCE_INLINE void _mutDrawBuffersARB(GLsizei n, const GLenum *bufs) { mutGLAPI.mutDrawBuffersARB(n, bufs); }
MUT_FORCE_INLINE void _mutDrawBuffersATI(GLsizei n, const GLenum *bufs) { mutGLAPI.mutDrawBuffersATI(n, bufs); }
MUT_FORCE_INLINE void _mutDrawBuffersEXT(GLsizei n, const GLenum *bufs) { mutGLAPI.mutDrawBuffersEXT(n, bufs); }
MUT_FORCE_INLINE void _mutDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices) { mutGLAPI.mutDrawBuffersIndexedEXT(n, location, indices); }
MUT_FORCE_INLINE void _mutDrawBuffersNV(GLsizei n, const GLenum *bufs) { mutGLAPI.mutDrawBuffersNV(n, bufs); }
MUT_FORCE_INLINE void _mutDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count) { mutGLAPI.mutDrawCommandsAddressNV(primitiveMode, indirects, sizes, count); }
MUT_FORCE_INLINE void _mutDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count) { mutGLAPI.mutDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count); }
MUT_FORCE_INLINE void _mutDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) { mutGLAPI.mutDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count); }
MUT_FORCE_INLINE void _mutDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) { mutGLAPI.mutDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count); }
MUT_FORCE_INLINE void _mutDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) { mutGLAPI.mutDrawElementArrayAPPLE(mode, first, count); }
MUT_FORCE_INLINE void _mutDrawElementArrayATI(GLenum mode, GLsizei count) { mutGLAPI.mutDrawElementArrayATI(mode, count); }
MUT_FORCE_INLINE void _mutDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices) { mutGLAPI.mutDrawElements(mode, count, type, indices); }
MUT_FORCE_INLINE void _mutDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) { mutGLAPI.mutDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
MUT_FORCE_INLINE void _mutDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) { mutGLAPI.mutDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex); }
MUT_FORCE_INLINE void _mutDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) { mutGLAPI.mutDrawElementsBaseVertexOES(mode, count, type, indices, basevertex); }
MUT_FORCE_INLINE void _mutDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect) { mutGLAPI.mutDrawElementsIndirect(mode, type, indirect); }
MUT_FORCE_INLINE void _mutDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) { mutGLAPI.mutDrawElementsInstanced(mode, count, type, indices, instancecount); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) { mutGLAPI.mutDrawElementsInstancedANGLE(mode, count, type, indices, primcount); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) { mutGLAPI.mutDrawElementsInstancedARB(mode, count, type, indices, primcount); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) { mutGLAPI.mutDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) { mutGLAPI.mutDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) { mutGLAPI.mutDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { mutGLAPI.mutDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { mutGLAPI.mutDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) { mutGLAPI.mutDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) { mutGLAPI.mutDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) { mutGLAPI.mutDrawElementsInstancedEXT(mode, count, type, indices, primcount); }
MUT_FORCE_INLINE void _mutDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount) { mutGLAPI.mutDrawElementsInstancedNV(mode, count, type, indices, primcount); }
MUT_FORCE_INLINE void _mutDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) { mutGLAPI.mutDrawMeshArraysSUN(mode, first, count, width); }
MUT_FORCE_INLINE void _mutDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { mutGLAPI.mutDrawRangeElementArrayAPPLE(mode, start, end, first, count); }
MUT_FORCE_INLINE void _mutDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) { mutGLAPI.mutDrawRangeElementArrayATI(mode, start, end, count); }
MUT_FORCE_INLINE void _mutDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) { mutGLAPI.mutDrawRangeElements(mode, start, end, count, type, indices); }
MUT_FORCE_INLINE void _mutDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) { mutGLAPI.mutDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
MUT_FORCE_INLINE void _mutDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) { mutGLAPI.mutDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex); }
MUT_FORCE_INLINE void _mutDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) { mutGLAPI.mutDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex); }
MUT_FORCE_INLINE void _mutDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) { mutGLAPI.mutDrawRangeElementsEXT(mode, start, end, count, type, indices); }
MUT_FORCE_INLINE void _mutDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { mutGLAPI.mutDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
MUT_FORCE_INLINE void _mutDrawTransformFeedback(GLenum mode, GLuint id) { mutGLAPI.mutDrawTransformFeedback(mode, id); }
MUT_FORCE_INLINE void _mutDrawTransformFeedbackEXT(GLenum mode, GLuint id) { mutGLAPI.mutDrawTransformFeedbackEXT(mode, id); }
MUT_FORCE_INLINE void _mutDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) { mutGLAPI.mutDrawTransformFeedbackInstanced(mode, id, instancecount); }
MUT_FORCE_INLINE void _mutDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) { mutGLAPI.mutDrawTransformFeedbackInstancedEXT(mode, id, instancecount); }
MUT_FORCE_INLINE void _mutDrawTransformFeedbackNV(GLenum mode, GLuint id) { mutGLAPI.mutDrawTransformFeedbackNV(mode, id); }
MUT_FORCE_INLINE void _mutDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) { mutGLAPI.mutDrawTransformFeedbackStream(mode, id, stream); }
MUT_FORCE_INLINE void _mutDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { mutGLAPI.mutDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
MUT_FORCE_INLINE void _mutDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { mutGLAPI.mutDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
MUT_FORCE_INLINE void _mutEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) { mutGLAPI.mutEGLImageTargetRenderbufferStorageOES(target, image); }
MUT_FORCE_INLINE void _mutEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) { mutGLAPI.mutEGLImageTargetTexture2DOES(target, image); }
MUT_FORCE_INLINE void _mutEdgeFlagFormatNV(GLsizei stride) { mutGLAPI.mutEdgeFlagFormatNV(stride); }
MUT_FORCE_INLINE void _mutEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer) { mutGLAPI.mutEdgeFlagPointerEXT(stride, count, pointer); }
MUT_FORCE_INLINE void _mutEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride) { mutGLAPI.mutEdgeFlagPointerListIBM(stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutElementPointerAPPLE(GLenum type, const void *pointer) { mutGLAPI.mutElementPointerAPPLE(type, pointer); }
MUT_FORCE_INLINE void _mutElementPointerATI(GLenum type, const void *pointer) { mutGLAPI.mutElementPointerATI(type, pointer); }
MUT_FORCE_INLINE void _mutEnable(GLenum cap) { mutGLAPI.mutEnable(cap); }
MUT_FORCE_INLINE void _mutEnableClientStateIndexedEXT(GLenum array, GLuint index) { mutGLAPI.mutEnableClientStateIndexedEXT(array, index); }
MUT_FORCE_INLINE void _mutEnableClientStateiEXT(GLenum array, GLuint index) { mutGLAPI.mutEnableClientStateiEXT(array, index); }
MUT_FORCE_INLINE void _mutEnableDriverControlQCOM(GLuint driverControl) { mutGLAPI.mutEnableDriverControlQCOM(driverControl); }
MUT_FORCE_INLINE void _mutEnableIndexedEXT(GLenum target, GLuint index) { mutGLAPI.mutEnableIndexedEXT(target, index); }
MUT_FORCE_INLINE void _mutEnableVariantClientStateEXT(GLuint id) { mutGLAPI.mutEnableVariantClientStateEXT(id); }
MUT_FORCE_INLINE void _mutEnableVertexArrayAttrib(GLuint vaobj, GLuint index) { mutGLAPI.mutEnableVertexArrayAttrib(vaobj, index); }
MUT_FORCE_INLINE void _mutEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { mutGLAPI.mutEnableVertexArrayAttribEXT(vaobj, index); }
MUT_FORCE_INLINE void _mutEnableVertexArrayEXT(GLuint vaobj, GLenum array) { mutGLAPI.mutEnableVertexArrayEXT(vaobj, array); }
MUT_FORCE_INLINE void _mutEnableVertexAttribAPPLE(GLuint index, GLenum pname) { mutGLAPI.mutEnableVertexAttribAPPLE(index, pname); }
MUT_FORCE_INLINE void _mutEnableVertexAttribArray(GLuint index) { mutGLAPI.mutEnableVertexAttribArray(index); }
MUT_FORCE_INLINE void _mutEnableVertexAttribArrayARB(GLuint index) { mutGLAPI.mutEnableVertexAttribArrayARB(index); }
MUT_FORCE_INLINE void _mutEnablei(GLenum target, GLuint index) { mutGLAPI.mutEnablei(target, index); }
MUT_FORCE_INLINE void _mutEnableiEXT(GLenum target, GLuint index) { mutGLAPI.mutEnableiEXT(target, index); }
MUT_FORCE_INLINE void _mutEnableiNV(GLenum target, GLuint index) { mutGLAPI.mutEnableiNV(target, index); }
MUT_FORCE_INLINE void _mutEnableiOES(GLenum target, GLuint index) { mutGLAPI.mutEnableiOES(target, index); }
MUT_FORCE_INLINE void _mutEndConditionalRender(void) { mutGLAPI.mutEndConditionalRender(); }
MUT_FORCE_INLINE void _mutEndConditionalRenderNV(void) { mutGLAPI.mutEndConditionalRenderNV(); }
MUT_FORCE_INLINE void _mutEndConditionalRenderNVX(void) { mutGLAPI.mutEndConditionalRenderNVX(); }
MUT_FORCE_INLINE void _mutEndFragmentShaderATI(void) { mutGLAPI.mutEndFragmentShaderATI(); }
MUT_FORCE_INLINE void _mutEndOcclusionQueryNV(void) { mutGLAPI.mutEndOcclusionQueryNV(); }
MUT_FORCE_INLINE void _mutEndPerfMonitorAMD(GLuint monitor) { mutGLAPI.mutEndPerfMonitorAMD(monitor); }
MUT_FORCE_INLINE void _mutEndPerfQueryINTEL(GLuint queryHandle) { mutGLAPI.mutEndPerfQueryINTEL(queryHandle); }
MUT_FORCE_INLINE void _mutEndQuery(GLenum target) { mutGLAPI.mutEndQuery(target); }
MUT_FORCE_INLINE void _mutEndQueryARB(GLenum target) { mutGLAPI.mutEndQueryARB(target); }
MUT_FORCE_INLINE void _mutEndQueryEXT(GLenum target) { mutGLAPI.mutEndQueryEXT(target); }
MUT_FORCE_INLINE void _mutEndQueryIndexed(GLenum target, GLuint index) { mutGLAPI.mutEndQueryIndexed(target, index); }
MUT_FORCE_INLINE void _mutEndTilingQCOM(GLbitfield preserveMask) { mutGLAPI.mutEndTilingQCOM(preserveMask); }
MUT_FORCE_INLINE void _mutEndTransformFeedback(void) { mutGLAPI.mutEndTransformFeedback(); }
MUT_FORCE_INLINE void _mutEndTransformFeedbackEXT(void) { mutGLAPI.mutEndTransformFeedbackEXT(); }
MUT_FORCE_INLINE void _mutEndTransformFeedbackNV(void) { mutGLAPI.mutEndTransformFeedbackNV(); }
MUT_FORCE_INLINE void _mutEndVertexShaderEXT(void) { mutGLAPI.mutEndVertexShaderEXT(); }
MUT_FORCE_INLINE void _mutEndVideoCaptureNV(GLuint video_capture_slot) { mutGLAPI.mutEndVideoCaptureNV(video_capture_slot); }
MUT_FORCE_INLINE void _mutEvalCoord1xOES(GLfixed u) { mutGLAPI.mutEvalCoord1xOES(u); }
MUT_FORCE_INLINE void _mutEvalCoord1xvOES(const GLfixed *coords) { mutGLAPI.mutEvalCoord1xvOES(coords); }
MUT_FORCE_INLINE void _mutEvalCoord2xOES(GLfixed u, GLfixed v) { mutGLAPI.mutEvalCoord2xOES(u, v); }
MUT_FORCE_INLINE void _mutEvalCoord2xvOES(const GLfixed *coords) { mutGLAPI.mutEvalCoord2xvOES(coords); }
MUT_FORCE_INLINE void _mutEvalMapsNV(GLenum target, GLenum mode) { mutGLAPI.mutEvalMapsNV(target, mode); }
MUT_FORCE_INLINE void _mutEvaluateDepthValuesARB(void) { mutGLAPI.mutEvaluateDepthValuesARB(); }
MUT_FORCE_INLINE void _mutExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params) { mutGLAPI.mutExecuteProgramNV(target, id, params); }
MUT_FORCE_INLINE void _mutExtGetBufferPointervQCOM(GLenum target, void **params) { mutGLAPI.mutExtGetBufferPointervQCOM(target, params); }
MUT_FORCE_INLINE void _mutExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers) { mutGLAPI.mutExtGetBuffersQCOM(buffers, maxBuffers, numBuffers); }
MUT_FORCE_INLINE void _mutExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers) { mutGLAPI.mutExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers); }
MUT_FORCE_INLINE void _mutExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length) { mutGLAPI.mutExtGetProgramBinarySourceQCOM(program, shadertype, source, length); }
MUT_FORCE_INLINE void _mutExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms) { mutGLAPI.mutExtGetProgramsQCOM(programs, maxPrograms, numPrograms); }
MUT_FORCE_INLINE void _mutExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers) { mutGLAPI.mutExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers); }
MUT_FORCE_INLINE void _mutExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders) { mutGLAPI.mutExtGetShadersQCOM(shaders, maxShaders, numShaders); }
MUT_FORCE_INLINE void _mutExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params) { mutGLAPI.mutExtGetTexLevelParameterivQCOM(texture, face, level, pname, params); }
MUT_FORCE_INLINE void _mutExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels) { mutGLAPI.mutExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels); }
MUT_FORCE_INLINE void _mutExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures) { mutGLAPI.mutExtGetTexturesQCOM(textures, maxTextures, numTextures); }
MUT_FORCE_INLINE GLboolean _mutExtIsProgramBinaryQCOM(GLuint program) { return mutGLAPI.mutExtIsProgramBinaryQCOM(program); }
MUT_FORCE_INLINE void _mutExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) { mutGLAPI.mutExtTexObjectStateOverrideiQCOM(target, pname, param); }
MUT_FORCE_INLINE void _mutExtractComponentEXT(GLuint res, GLuint src, GLuint num) { mutGLAPI.mutExtractComponentEXT(res, src, num); }
MUT_FORCE_INLINE void _mutFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed *buffer) { mutGLAPI.mutFeedbackBufferxOES(n, type, buffer); }
MUT_FORCE_INLINE GLsync _mutFenceSync(GLenum condition, GLbitfield flags) { return mutGLAPI.mutFenceSync(condition, flags); }
MUT_FORCE_INLINE GLsync _mutFenceSyncAPPLE(GLenum condition, GLbitfield flags) { return mutGLAPI.mutFenceSyncAPPLE(condition, flags); }
MUT_FORCE_INLINE void _mutFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { mutGLAPI.mutFinalCombinerInputNV(variable, input, mapping, componentUsage); }
MUT_FORCE_INLINE void _mutFinish(void) { mutGLAPI.mutFinish(); }
MUT_FORCE_INLINE GLint _mutFinishAsyncSGIX(GLuint *markerp) { return mutGLAPI.mutFinishAsyncSGIX(markerp); }
MUT_FORCE_INLINE void _mutFinishFenceAPPLE(GLuint fence) { mutGLAPI.mutFinishFenceAPPLE(fence); }
MUT_FORCE_INLINE void _mutFinishFenceNV(GLuint fence) { mutGLAPI.mutFinishFenceNV(fence); }
MUT_FORCE_INLINE void _mutFinishObjectAPPLE(GLenum object, GLint name) { mutGLAPI.mutFinishObjectAPPLE(object, name); }
MUT_FORCE_INLINE void _mutFinishTextureSUNX(void) { mutGLAPI.mutFinishTextureSUNX(); }
MUT_FORCE_INLINE void _mutFlush(void) { mutGLAPI.mutFlush(); }
MUT_FORCE_INLINE void _mutFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) { mutGLAPI.mutFlushMappedBufferRange(target, offset, length); }
MUT_FORCE_INLINE void _mutFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutFlushMappedBufferRangeAPPLE(target, offset, size); }
MUT_FORCE_INLINE void _mutFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) { mutGLAPI.mutFlushMappedBufferRangeEXT(target, offset, length); }
MUT_FORCE_INLINE void _mutFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) { mutGLAPI.mutFlushMappedNamedBufferRange(buffer, offset, length); }
MUT_FORCE_INLINE void _mutFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) { mutGLAPI.mutFlushMappedNamedBufferRangeEXT(buffer, offset, length); }
MUT_FORCE_INLINE void _mutFlushPixelDataRangeNV(GLenum target) { mutGLAPI.mutFlushPixelDataRangeNV(target); }
MUT_FORCE_INLINE void _mutFlushRasterSGIX(void) { mutGLAPI.mutFlushRasterSGIX(); }
MUT_FORCE_INLINE void _mutFlushStaticDataIBM(GLenum target) { mutGLAPI.mutFlushStaticDataIBM(target); }
MUT_FORCE_INLINE void _mutFlushVertexArrayRangeAPPLE(GLsizei length, void *pointer) { mutGLAPI.mutFlushVertexArrayRangeAPPLE(length, pointer); }
MUT_FORCE_INLINE void _mutFlushVertexArrayRangeNV(void) { mutGLAPI.mutFlushVertexArrayRangeNV(); }
MUT_FORCE_INLINE void _mutFogCoordFormatNV(GLenum type, GLsizei stride) { mutGLAPI.mutFogCoordFormatNV(type, stride); }
MUT_FORCE_INLINE void _mutFogCoordPointer(GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutFogCoordPointer(type, stride, pointer); }
MUT_FORCE_INLINE void _mutFogCoordPointerEXT(GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutFogCoordPointerEXT(type, stride, pointer); }
MUT_FORCE_INLINE void _mutFogCoordPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) { mutGLAPI.mutFogCoordPointerListIBM(type, stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutFogCoordd(GLdouble coord) { mutGLAPI.mutFogCoordd(coord); }
MUT_FORCE_INLINE void _mutFogCoorddEXT(GLdouble coord) { mutGLAPI.mutFogCoorddEXT(coord); }
MUT_FORCE_INLINE void _mutFogCoorddv(const GLdouble *coord) { mutGLAPI.mutFogCoorddv(coord); }
MUT_FORCE_INLINE void _mutFogCoorddvEXT(const GLdouble *coord) { mutGLAPI.mutFogCoorddvEXT(coord); }
MUT_FORCE_INLINE void _mutFogCoordf(GLfloat coord) { mutGLAPI.mutFogCoordf(coord); }
MUT_FORCE_INLINE void _mutFogCoordfEXT(GLfloat coord) { mutGLAPI.mutFogCoordfEXT(coord); }
MUT_FORCE_INLINE void _mutFogCoordfv(const GLfloat *coord) { mutGLAPI.mutFogCoordfv(coord); }
MUT_FORCE_INLINE void _mutFogCoordfvEXT(const GLfloat *coord) { mutGLAPI.mutFogCoordfvEXT(coord); }
MUT_FORCE_INLINE void _mutFogCoordhNV(GLhalfNV fog) { mutGLAPI.mutFogCoordhNV(fog); }
MUT_FORCE_INLINE void _mutFogCoordhvNV(const GLhalfNV *fog) { mutGLAPI.mutFogCoordhvNV(fog); }
MUT_FORCE_INLINE void _mutFogFuncSGIS(GLsizei n, const GLfloat *points) { mutGLAPI.mutFogFuncSGIS(n, points); }
MUT_FORCE_INLINE void _mutFogxOES(GLenum pname, GLfixed param) { mutGLAPI.mutFogxOES(pname, param); }
MUT_FORCE_INLINE void _mutFogxvOES(GLenum pname, const GLfixed *param) { mutGLAPI.mutFogxvOES(pname, param); }
MUT_FORCE_INLINE void _mutFragmentColorMaterialSGIX(GLenum face, GLenum mode) { mutGLAPI.mutFragmentColorMaterialSGIX(face, mode); }
MUT_FORCE_INLINE void _mutFragmentCoverageColorNV(GLuint color) { mutGLAPI.mutFragmentCoverageColorNV(color); }
MUT_FORCE_INLINE void _mutFragmentLightModelfSGIX(GLenum pname, GLfloat param) { mutGLAPI.mutFragmentLightModelfSGIX(pname, param); }
MUT_FORCE_INLINE void _mutFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params) { mutGLAPI.mutFragmentLightModelfvSGIX(pname, params); }
MUT_FORCE_INLINE void _mutFragmentLightModeliSGIX(GLenum pname, GLint param) { mutGLAPI.mutFragmentLightModeliSGIX(pname, param); }
MUT_FORCE_INLINE void _mutFragmentLightModelivSGIX(GLenum pname, const GLint *params) { mutGLAPI.mutFragmentLightModelivSGIX(pname, params); }
MUT_FORCE_INLINE void _mutFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) { mutGLAPI.mutFragmentLightfSGIX(light, pname, param); }
MUT_FORCE_INLINE void _mutFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params) { mutGLAPI.mutFragmentLightfvSGIX(light, pname, params); }
MUT_FORCE_INLINE void _mutFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) { mutGLAPI.mutFragmentLightiSGIX(light, pname, param); }
MUT_FORCE_INLINE void _mutFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params) { mutGLAPI.mutFragmentLightivSGIX(light, pname, params); }
MUT_FORCE_INLINE void _mutFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) { mutGLAPI.mutFragmentMaterialfSGIX(face, pname, param); }
MUT_FORCE_INLINE void _mutFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params) { mutGLAPI.mutFragmentMaterialfvSGIX(face, pname, params); }
MUT_FORCE_INLINE void _mutFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) { mutGLAPI.mutFragmentMaterialiSGIX(face, pname, param); }
MUT_FORCE_INLINE void _mutFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params) { mutGLAPI.mutFragmentMaterialivSGIX(face, pname, params); }
MUT_FORCE_INLINE void _mutFrameTerminatorGREMEDY(void) { mutGLAPI.mutFrameTerminatorGREMEDY(); }
MUT_FORCE_INLINE void _mutFrameZoomSGIX(GLint factor) { mutGLAPI.mutFrameZoomSGIX(factor); }
MUT_FORCE_INLINE void _mutFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) { mutGLAPI.mutFramebufferDrawBufferEXT(framebuffer, mode); }
MUT_FORCE_INLINE void _mutFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs) { mutGLAPI.mutFramebufferDrawBuffersEXT(framebuffer, n, bufs); }
MUT_FORCE_INLINE void _mutFramebufferFetchBarrierQCOM(void) { mutGLAPI.mutFramebufferFetchBarrierQCOM(); }
MUT_FORCE_INLINE void _mutFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures) { mutGLAPI.mutFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures); }
MUT_FORCE_INLINE void _mutFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { mutGLAPI.mutFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
MUT_FORCE_INLINE void _mutFramebufferParameteri(GLenum target, GLenum pname, GLint param) { mutGLAPI.mutFramebufferParameteri(target, pname, param); }
MUT_FORCE_INLINE void _mutFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) { mutGLAPI.mutFramebufferPixelLocalStorageSizeEXT(target, size); }
MUT_FORCE_INLINE void _mutFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) { mutGLAPI.mutFramebufferReadBufferEXT(framebuffer, mode); }
MUT_FORCE_INLINE void _mutFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { mutGLAPI.mutFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
MUT_FORCE_INLINE void _mutFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { mutGLAPI.mutFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer); }
MUT_FORCE_INLINE void _mutFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v) { mutGLAPI.mutFramebufferSampleLocationsfvARB(target, start, count, v); }
MUT_FORCE_INLINE void _mutFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v) { mutGLAPI.mutFramebufferSampleLocationsfvNV(target, start, count, v); }
MUT_FORCE_INLINE void _mutFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values) { mutGLAPI.mutFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values); }
MUT_FORCE_INLINE void _mutFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTexture(target, attachment, texture, level); }
MUT_FORCE_INLINE void _mutFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTexture1D(target, attachment, textarget, texture, level); }
MUT_FORCE_INLINE void _mutFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTexture1DEXT(target, attachment, textarget, texture, level); }
MUT_FORCE_INLINE void _mutFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTexture2D(target, attachment, textarget, texture, level); }
MUT_FORCE_INLINE void _mutFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) { mutGLAPI.mutFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale); }
MUT_FORCE_INLINE void _mutFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTexture2DEXT(target, attachment, textarget, texture, level); }
MUT_FORCE_INLINE void _mutFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { mutGLAPI.mutFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
MUT_FORCE_INLINE void _mutFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { mutGLAPI.mutFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples); }
MUT_FORCE_INLINE void _mutFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { mutGLAPI.mutFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); }
MUT_FORCE_INLINE void _mutFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { mutGLAPI.mutFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset); }
MUT_FORCE_INLINE void _mutFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { mutGLAPI.mutFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset); }
MUT_FORCE_INLINE void _mutFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTextureARB(target, attachment, texture, level); }
MUT_FORCE_INLINE void _mutFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTextureEXT(target, attachment, texture, level); }
MUT_FORCE_INLINE void _mutFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { mutGLAPI.mutFramebufferTextureFaceARB(target, attachment, texture, level, face); }
MUT_FORCE_INLINE void _mutFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { mutGLAPI.mutFramebufferTextureFaceEXT(target, attachment, texture, level, face); }
MUT_FORCE_INLINE void _mutFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { mutGLAPI.mutFramebufferTextureLayer(target, attachment, texture, level, layer); }
MUT_FORCE_INLINE void _mutFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { mutGLAPI.mutFramebufferTextureLayerARB(target, attachment, texture, level, layer); }
MUT_FORCE_INLINE void _mutFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) { mutGLAPI.mutFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale); }
MUT_FORCE_INLINE void _mutFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { mutGLAPI.mutFramebufferTextureLayerEXT(target, attachment, texture, level, layer); }
MUT_FORCE_INLINE void _mutFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) { mutGLAPI.mutFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews); }
MUT_FORCE_INLINE void _mutFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { mutGLAPI.mutFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews); }
MUT_FORCE_INLINE void _mutFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) { mutGLAPI.mutFramebufferTextureOES(target, attachment, texture, level); }
MUT_FORCE_INLINE void _mutFreeObjectBufferATI(GLuint buffer) { mutGLAPI.mutFreeObjectBufferATI(buffer); }
MUT_FORCE_INLINE void _mutFrontFace(GLenum mode) { mutGLAPI.mutFrontFace(mode); }
MUT_FORCE_INLINE void _mutFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { mutGLAPI.mutFrustumfOES(l, r, b, t, n, f); }
MUT_FORCE_INLINE void _mutFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { mutGLAPI.mutFrustumxOES(l, r, b, t, n, f); }
MUT_FORCE_INLINE GLuint _mutGenAsyncMarkersSGIX(GLsizei range) { return mutGLAPI.mutGenAsyncMarkersSGIX(range); }
MUT_FORCE_INLINE void _mutGenBuffers(GLsizei n, GLuint *buffers) { mutGLAPI.mutGenBuffers(n, buffers); }
MUT_FORCE_INLINE void _mutGenBuffersARB(GLsizei n, GLuint *buffers) { mutGLAPI.mutGenBuffersARB(n, buffers); }
MUT_FORCE_INLINE void _mutGenFencesAPPLE(GLsizei n, GLuint *fences) { mutGLAPI.mutGenFencesAPPLE(n, fences); }
MUT_FORCE_INLINE void _mutGenFencesNV(GLsizei n, GLuint *fences) { mutGLAPI.mutGenFencesNV(n, fences); }
MUT_FORCE_INLINE GLuint _mutGenFragmentShadersATI(GLuint range) { return mutGLAPI.mutGenFragmentShadersATI(range); }
MUT_FORCE_INLINE void _mutGenFramebuffers(GLsizei n, GLuint *framebuffers) { mutGLAPI.mutGenFramebuffers(n, framebuffers); }
MUT_FORCE_INLINE void _mutGenFramebuffersEXT(GLsizei n, GLuint *framebuffers) { mutGLAPI.mutGenFramebuffersEXT(n, framebuffers); }
MUT_FORCE_INLINE void _mutGenNamesAMD(GLenum identifier, GLuint num, GLuint *names) { mutGLAPI.mutGenNamesAMD(identifier, num, names); }
MUT_FORCE_INLINE void _mutGenOcclusionQueriesNV(GLsizei n, GLuint *ids) { mutGLAPI.mutGenOcclusionQueriesNV(n, ids); }
MUT_FORCE_INLINE GLuint _mutGenPathsNV(GLsizei range) { return mutGLAPI.mutGenPathsNV(range); }
MUT_FORCE_INLINE void _mutGenPerfMonitorsAMD(GLsizei n, GLuint *monitors) { mutGLAPI.mutGenPerfMonitorsAMD(n, monitors); }
MUT_FORCE_INLINE void _mutGenProgramPipelines(GLsizei n, GLuint *pipelines) { mutGLAPI.mutGenProgramPipelines(n, pipelines); }
MUT_FORCE_INLINE void _mutGenProgramPipelinesEXT(GLsizei n, GLuint *pipelines) { mutGLAPI.mutGenProgramPipelinesEXT(n, pipelines); }
MUT_FORCE_INLINE void _mutGenProgramsARB(GLsizei n, GLuint *programs) { mutGLAPI.mutGenProgramsARB(n, programs); }
MUT_FORCE_INLINE void _mutGenProgramsNV(GLsizei n, GLuint *programs) { mutGLAPI.mutGenProgramsNV(n, programs); }
MUT_FORCE_INLINE void _mutGenQueries(GLsizei n, GLuint *ids) { mutGLAPI.mutGenQueries(n, ids); }
MUT_FORCE_INLINE void _mutGenQueriesARB(GLsizei n, GLuint *ids) { mutGLAPI.mutGenQueriesARB(n, ids); }
MUT_FORCE_INLINE void _mutGenQueriesEXT(GLsizei n, GLuint *ids) { mutGLAPI.mutGenQueriesEXT(n, ids); }
MUT_FORCE_INLINE void _mutGenRenderbuffers(GLsizei n, GLuint *renderbuffers) { mutGLAPI.mutGenRenderbuffers(n, renderbuffers); }
MUT_FORCE_INLINE void _mutGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers) { mutGLAPI.mutGenRenderbuffersEXT(n, renderbuffers); }
MUT_FORCE_INLINE void _mutGenSamplers(GLsizei count, GLuint *samplers) { mutGLAPI.mutGenSamplers(count, samplers); }
MUT_FORCE_INLINE void _mutGenSemaphoresEXT(GLsizei n, GLuint *semaphores) { mutGLAPI.mutGenSemaphoresEXT(n, semaphores); }
MUT_FORCE_INLINE GLuint _mutGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return mutGLAPI.mutGenSymbolsEXT(datatype, storagetype, range, components); }
MUT_FORCE_INLINE void _mutGenTextures(GLsizei n, GLuint *textures) { mutGLAPI.mutGenTextures(n, textures); }
MUT_FORCE_INLINE void _mutGenTexturesEXT(GLsizei n, GLuint *textures) { mutGLAPI.mutGenTexturesEXT(n, textures); }
MUT_FORCE_INLINE void _mutGenTransformFeedbacks(GLsizei n, GLuint *ids) { mutGLAPI.mutGenTransformFeedbacks(n, ids); }
MUT_FORCE_INLINE void _mutGenTransformFeedbacksNV(GLsizei n, GLuint *ids) { mutGLAPI.mutGenTransformFeedbacksNV(n, ids); }
MUT_FORCE_INLINE void _mutGenVertexArrays(GLsizei n, GLuint *arrays) { mutGLAPI.mutGenVertexArrays(n, arrays); }
MUT_FORCE_INLINE void _mutGenVertexArraysAPPLE(GLsizei n, GLuint *arrays) { mutGLAPI.mutGenVertexArraysAPPLE(n, arrays); }
MUT_FORCE_INLINE void _mutGenVertexArraysOES(GLsizei n, GLuint *arrays) { mutGLAPI.mutGenVertexArraysOES(n, arrays); }
MUT_FORCE_INLINE GLuint _mutGenVertexShadersEXT(GLuint range) { return mutGLAPI.mutGenVertexShadersEXT(range); }
MUT_FORCE_INLINE void _mutGenerateMipmap(GLenum target) { mutGLAPI.mutGenerateMipmap(target); }
MUT_FORCE_INLINE void _mutGenerateMipmapEXT(GLenum target) { mutGLAPI.mutGenerateMipmapEXT(target); }
MUT_FORCE_INLINE void _mutGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) { mutGLAPI.mutGenerateMultiTexMipmapEXT(texunit, target); }
MUT_FORCE_INLINE void _mutGenerateTextureMipmap(GLuint texture) { mutGLAPI.mutGenerateTextureMipmap(texture); }
MUT_FORCE_INLINE void _mutGenerateTextureMipmapEXT(GLuint texture, GLenum target) { mutGLAPI.mutGenerateTextureMipmapEXT(texture, target); }
MUT_FORCE_INLINE void _mutGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) { mutGLAPI.mutGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); }
MUT_FORCE_INLINE void _mutGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { mutGLAPI.mutGetActiveAttrib(program, index, bufSize, length, size, type, name); }
MUT_FORCE_INLINE void _mutGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) { mutGLAPI.mutGetActiveAttribARB(programObj, index, maxLength, length, size, type, name); }
MUT_FORCE_INLINE void _mutGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) { mutGLAPI.mutGetActiveSubroutineName(program, shadertype, index, bufsize, length, name); }
MUT_FORCE_INLINE void _mutGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) { mutGLAPI.mutGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name); }
MUT_FORCE_INLINE void _mutGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) { mutGLAPI.mutGetActiveSubroutineUniformiv(program, shadertype, index, pname, values); }
MUT_FORCE_INLINE void _mutGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) { mutGLAPI.mutGetActiveUniform(program, index, bufSize, length, size, type, name); }
MUT_FORCE_INLINE void _mutGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) { mutGLAPI.mutGetActiveUniformARB(programObj, index, maxLength, length, size, type, name); }
MUT_FORCE_INLINE void _mutGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) { mutGLAPI.mutGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
MUT_FORCE_INLINE void _mutGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) { mutGLAPI.mutGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
MUT_FORCE_INLINE void _mutGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) { mutGLAPI.mutGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
MUT_FORCE_INLINE void _mutGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) { mutGLAPI.mutGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
MUT_FORCE_INLINE void _mutGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { mutGLAPI.mutGetActiveVaryingNV(program, index, bufSize, length, size, type, name); }
MUT_FORCE_INLINE void _mutGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params) { mutGLAPI.mutGetArrayObjectfvATI(array, pname, params); }
MUT_FORCE_INLINE void _mutGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params) { mutGLAPI.mutGetArrayObjectivATI(array, pname, params); }
MUT_FORCE_INLINE void _mutGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) { mutGLAPI.mutGetAttachedObjectsARB(containerObj, maxCount, count, obj); }
MUT_FORCE_INLINE void _mutGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) { mutGLAPI.mutGetAttachedShaders(program, maxCount, count, shaders); }
MUT_FORCE_INLINE GLint _mutGetAttribLocation(GLuint program, const GLchar *name) { return mutGLAPI.mutGetAttribLocation(program, name); }
MUT_FORCE_INLINE GLint _mutGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name) { return mutGLAPI.mutGetAttribLocationARB(programObj, name); }
MUT_FORCE_INLINE void _mutGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data) { mutGLAPI.mutGetBooleanIndexedvEXT(target, index, data); }
MUT_FORCE_INLINE void _mutGetBooleani_v(GLenum target, GLuint index, GLboolean *data) { mutGLAPI.mutGetBooleani_v(target, index, data); }
MUT_FORCE_INLINE void _mutGetBooleanv(GLenum pname, GLboolean *data) { mutGLAPI.mutGetBooleanv(pname, data); }
MUT_FORCE_INLINE void _mutGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) { mutGLAPI.mutGetBufferParameteri64v(target, pname, params); }
MUT_FORCE_INLINE void _mutGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetBufferParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetBufferParameterivARB(target, pname, params); }
MUT_FORCE_INLINE void _mutGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params) { mutGLAPI.mutGetBufferParameterui64vNV(target, pname, params); }
MUT_FORCE_INLINE void _mutGetBufferPointerv(GLenum target, GLenum pname, void **params) { mutGLAPI.mutGetBufferPointerv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetBufferPointervARB(GLenum target, GLenum pname, void **params) { mutGLAPI.mutGetBufferPointervARB(target, pname, params); }
MUT_FORCE_INLINE void _mutGetBufferPointervOES(GLenum target, GLenum pname, void **params) { mutGLAPI.mutGetBufferPointervOES(target, pname, params); }
MUT_FORCE_INLINE void _mutGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) { mutGLAPI.mutGetBufferSubData(target, offset, size, data); }
MUT_FORCE_INLINE void _mutGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data) { mutGLAPI.mutGetBufferSubDataARB(target, offset, size, data); }
MUT_FORCE_INLINE void _mutGetClipPlanefOES(GLenum plane, GLfloat *equation) { mutGLAPI.mutGetClipPlanefOES(plane, equation); }
MUT_FORCE_INLINE void _mutGetClipPlanexOES(GLenum plane, GLfixed *equation) { mutGLAPI.mutGetClipPlanexOES(plane, equation); }
MUT_FORCE_INLINE void _mutGetColorTable(GLenum target, GLenum format, GLenum type, void *table) { mutGLAPI.mutGetColorTable(target, format, type, table); }
MUT_FORCE_INLINE void _mutGetColorTableEXT(GLenum target, GLenum format, GLenum type, void *data) { mutGLAPI.mutGetColorTableEXT(target, format, type, data); }
MUT_FORCE_INLINE void _mutGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetColorTableParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetColorTableParameterfvEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetColorTableParameterfvSGI(target, pname, params); }
MUT_FORCE_INLINE void _mutGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetColorTableParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetColorTableParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetColorTableParameterivSGI(target, pname, params); }
MUT_FORCE_INLINE void _mutGetColorTableSGI(GLenum target, GLenum format, GLenum type, void *table) { mutGLAPI.mutGetColorTableSGI(target, format, type, table); }
MUT_FORCE_INLINE void _mutGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) { mutGLAPI.mutGetCombinerInputParameterfvNV(stage, portion, variable, pname, params); }
MUT_FORCE_INLINE void _mutGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) { mutGLAPI.mutGetCombinerInputParameterivNV(stage, portion, variable, pname, params); }
MUT_FORCE_INLINE void _mutGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params) { mutGLAPI.mutGetCombinerOutputParameterfvNV(stage, portion, pname, params); }
MUT_FORCE_INLINE void _mutGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params) { mutGLAPI.mutGetCombinerOutputParameterivNV(stage, portion, pname, params); }
MUT_FORCE_INLINE void _mutGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params) { mutGLAPI.mutGetCombinerStageParameterfvNV(stage, pname, params); }
MUT_FORCE_INLINE GLuint _mutGetCommandHeaderNV(GLenum tokenID, GLuint size) { return mutGLAPI.mutGetCommandHeaderNV(tokenID, size); }
MUT_FORCE_INLINE void _mutGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img) { mutGLAPI.mutGetCompressedMultiTexImageEXT(texunit, target, lod, img); }
MUT_FORCE_INLINE void _mutGetCompressedTexImage(GLenum target, GLint level, void *img) { mutGLAPI.mutGetCompressedTexImage(target, level, img); }
MUT_FORCE_INLINE void _mutGetCompressedTexImageARB(GLenum target, GLint level, void *img) { mutGLAPI.mutGetCompressedTexImageARB(target, level, img); }
MUT_FORCE_INLINE void _mutGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels) { mutGLAPI.mutGetCompressedTextureImage(texture, level, bufSize, pixels); }
MUT_FORCE_INLINE void _mutGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img) { mutGLAPI.mutGetCompressedTextureImageEXT(texture, target, lod, img); }
MUT_FORCE_INLINE void _mutGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) { mutGLAPI.mutGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); }
MUT_FORCE_INLINE void _mutGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void *image) { mutGLAPI.mutGetConvolutionFilter(target, format, type, image); }
MUT_FORCE_INLINE void _mutGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void *image) { mutGLAPI.mutGetConvolutionFilterEXT(target, format, type, image); }
MUT_FORCE_INLINE void _mutGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetConvolutionParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetConvolutionParameterfvEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetConvolutionParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetConvolutionParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed *params) { mutGLAPI.mutGetConvolutionParameterxvOES(target, pname, params); }
MUT_FORCE_INLINE void _mutGetCoverageModulationTableNV(GLsizei bufsize, GLfloat *v) { mutGLAPI.mutGetCoverageModulationTableNV(bufsize, v); }
MUT_FORCE_INLINE GLuint _mutGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { return mutGLAPI.mutGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
MUT_FORCE_INLINE GLuint _mutGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message) { return mutGLAPI.mutGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message); }
MUT_FORCE_INLINE GLuint _mutGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { return mutGLAPI.mutGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
MUT_FORCE_INLINE GLuint _mutGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) { return mutGLAPI.mutGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
MUT_FORCE_INLINE void _mutGetDetailTexFuncSGIS(GLenum target, GLfloat *points) { mutGLAPI.mutGetDetailTexFuncSGIS(target, points); }
MUT_FORCE_INLINE void _mutGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data) { mutGLAPI.mutGetDoubleIndexedvEXT(target, index, data); }
MUT_FORCE_INLINE void _mutGetDoublei_v(GLenum target, GLuint index, GLdouble *data) { mutGLAPI.mutGetDoublei_v(target, index, data); }
MUT_FORCE_INLINE void _mutGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params) { mutGLAPI.mutGetDoublei_vEXT(pname, index, params); }
MUT_FORCE_INLINE void _mutGetDoublev(GLenum pname, GLdouble *data) { mutGLAPI.mutGetDoublev(pname, data); }
MUT_FORCE_INLINE void _mutGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString) { mutGLAPI.mutGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString); }
MUT_FORCE_INLINE void _mutGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls) { mutGLAPI.mutGetDriverControlsQCOM(num, size, driverControls); }
MUT_FORCE_INLINE GLenum _mutGetError(void) { return mutGLAPI.mutGetError(); }
MUT_FORCE_INLINE void _mutGetFenceivNV(GLuint fence, GLenum pname, GLint *params) { mutGLAPI.mutGetFenceivNV(fence, pname, params); }
MUT_FORCE_INLINE void _mutGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params) { mutGLAPI.mutGetFinalCombinerInputParameterfvNV(variable, pname, params); }
MUT_FORCE_INLINE void _mutGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params) { mutGLAPI.mutGetFinalCombinerInputParameterivNV(variable, pname, params); }
MUT_FORCE_INLINE void _mutGetFirstPerfQueryIdINTEL(GLuint *queryId) { mutGLAPI.mutGetFirstPerfQueryIdINTEL(queryId); }
MUT_FORCE_INLINE void _mutGetFixedvOES(GLenum pname, GLfixed *params) { mutGLAPI.mutGetFixedvOES(pname, params); }
MUT_FORCE_INLINE void _mutGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data) { mutGLAPI.mutGetFloatIndexedvEXT(target, index, data); }
MUT_FORCE_INLINE void _mutGetFloati_v(GLenum target, GLuint index, GLfloat *data) { mutGLAPI.mutGetFloati_v(target, index, data); }
MUT_FORCE_INLINE void _mutGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params) { mutGLAPI.mutGetFloati_vEXT(pname, index, params); }
MUT_FORCE_INLINE void _mutGetFloati_vNV(GLenum target, GLuint index, GLfloat *data) { mutGLAPI.mutGetFloati_vNV(target, index, data); }
MUT_FORCE_INLINE void _mutGetFloati_vOES(GLenum target, GLuint index, GLfloat *data) { mutGLAPI.mutGetFloati_vOES(target, index, data); }
MUT_FORCE_INLINE void _mutGetFloatv(GLenum pname, GLfloat *data) { mutGLAPI.mutGetFloatv(pname, data); }
MUT_FORCE_INLINE void _mutGetFogFuncSGIS(GLfloat *points) { mutGLAPI.mutGetFogFuncSGIS(points); }
MUT_FORCE_INLINE GLint _mutGetFragDataIndex(GLuint program, const GLchar *name) { return mutGLAPI.mutGetFragDataIndex(program, name); }
MUT_FORCE_INLINE GLint _mutGetFragDataIndexEXT(GLuint program, const GLchar *name) { return mutGLAPI.mutGetFragDataIndexEXT(program, name); }
MUT_FORCE_INLINE GLint _mutGetFragDataLocation(GLuint program, const GLchar *name) { return mutGLAPI.mutGetFragDataLocation(program, name); }
MUT_FORCE_INLINE GLint _mutGetFragDataLocationEXT(GLuint program, const GLchar *name) { return mutGLAPI.mutGetFragDataLocationEXT(program, name); }
MUT_FORCE_INLINE void _mutGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params) { mutGLAPI.mutGetFragmentLightfvSGIX(light, pname, params); }
MUT_FORCE_INLINE void _mutGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params) { mutGLAPI.mutGetFragmentLightivSGIX(light, pname, params); }
MUT_FORCE_INLINE void _mutGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params) { mutGLAPI.mutGetFragmentMaterialfvSGIX(face, pname, params); }
MUT_FORCE_INLINE void _mutGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params) { mutGLAPI.mutGetFragmentMaterialivSGIX(face, pname, params); }
MUT_FORCE_INLINE void _mutGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) { mutGLAPI.mutGetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
MUT_FORCE_INLINE void _mutGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params) { mutGLAPI.mutGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params); }
MUT_FORCE_INLINE void _mutGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) { mutGLAPI.mutGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values); }
MUT_FORCE_INLINE void _mutGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetFramebufferParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) { mutGLAPI.mutGetFramebufferParameterivEXT(framebuffer, pname, params); }
MUT_FORCE_INLINE GLsizei _mutGetFramebufferPixelLocalStorageSizeEXT(GLuint target) { return mutGLAPI.mutGetFramebufferPixelLocalStorageSizeEXT(target); }
MUT_FORCE_INLINE GLenum _mutGetGraphicsResetStatus(void) { return mutGLAPI.mutGetGraphicsResetStatus(); }
MUT_FORCE_INLINE GLenum _mutGetGraphicsResetStatusARB(void) { return mutGLAPI.mutGetGraphicsResetStatusARB(); }
MUT_FORCE_INLINE GLenum _mutGetGraphicsResetStatusEXT(void) { return mutGLAPI.mutGetGraphicsResetStatusEXT(); }
MUT_FORCE_INLINE GLenum _mutGetGraphicsResetStatusKHR(void) { return mutGLAPI.mutGetGraphicsResetStatusKHR(); }
MUT_FORCE_INLINE GLhandleARB _mutGetHandleARB(GLenum pname) { return mutGLAPI.mutGetHandleARB(pname); }
MUT_FORCE_INLINE void _mutGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { mutGLAPI.mutGetHistogram(target, reset, format, type, values); }
MUT_FORCE_INLINE void _mutGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { mutGLAPI.mutGetHistogramEXT(target, reset, format, type, values); }
MUT_FORCE_INLINE void _mutGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetHistogramParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetHistogramParameterfvEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetHistogramParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetHistogramParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed *params) { mutGLAPI.mutGetHistogramParameterxvOES(target, pname, params); }
MUT_FORCE_INLINE GLuint64 _mutGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return mutGLAPI.mutGetImageHandleARB(texture, level, layered, layer, format); }
MUT_FORCE_INLINE GLuint64 _mutGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return mutGLAPI.mutGetImageHandleNV(texture, level, layered, layer, format); }
MUT_FORCE_INLINE void _mutGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetImageTransformParameterfvHP(target, pname, params); }
MUT_FORCE_INLINE void _mutGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetImageTransformParameterivHP(target, pname, params); }
MUT_FORCE_INLINE void _mutGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) { mutGLAPI.mutGetInfoLogARB(obj, maxLength, length, infoLog); }
MUT_FORCE_INLINE GLint _mutGetInstrumentsSGIX(void) { return mutGLAPI.mutGetInstrumentsSGIX(); }
MUT_FORCE_INLINE void _mutGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) { mutGLAPI.mutGetInteger64i_v(target, index, data); }
MUT_FORCE_INLINE void _mutGetInteger64v(GLenum pname, GLint64 *data) { mutGLAPI.mutGetInteger64v(pname, data); }
MUT_FORCE_INLINE void _mutGetInteger64vAPPLE(GLenum pname, GLint64 *params) { mutGLAPI.mutGetInteger64vAPPLE(pname, params); }
MUT_FORCE_INLINE void _mutGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data) { mutGLAPI.mutGetIntegerIndexedvEXT(target, index, data); }
MUT_FORCE_INLINE void _mutGetIntegeri_v(GLenum target, GLuint index, GLint *data) { mutGLAPI.mutGetIntegeri_v(target, index, data); }
MUT_FORCE_INLINE void _mutGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data) { mutGLAPI.mutGetIntegeri_vEXT(target, index, data); }
MUT_FORCE_INLINE void _mutGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result) { mutGLAPI.mutGetIntegerui64i_vNV(value, index, result); }
MUT_FORCE_INLINE void _mutGetIntegerui64vNV(GLenum value, GLuint64EXT *result) { mutGLAPI.mutGetIntegerui64vNV(value, result); }
MUT_FORCE_INLINE void _mutGetIntegerv(GLenum pname, GLint *data) { mutGLAPI.mutGetIntegerv(pname, data); }
MUT_FORCE_INLINE void _mutGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params) { mutGLAPI.mutGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params); }
MUT_FORCE_INLINE void _mutGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) { mutGLAPI.mutGetInternalformati64v(target, internalformat, pname, bufSize, params); }
MUT_FORCE_INLINE void _mutGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) { mutGLAPI.mutGetInternalformativ(target, internalformat, pname, bufSize, params); }
MUT_FORCE_INLINE void _mutGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) { mutGLAPI.mutGetInvariantBooleanvEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) { mutGLAPI.mutGetInvariantFloatvEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data) { mutGLAPI.mutGetInvariantIntegervEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetLightxOES(GLenum light, GLenum pname, GLfixed *params) { mutGLAPI.mutGetLightxOES(light, pname, params); }
MUT_FORCE_INLINE void _mutGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params) { mutGLAPI.mutGetListParameterfvSGIX(list, pname, params); }
MUT_FORCE_INLINE void _mutGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params) { mutGLAPI.mutGetListParameterivSGIX(list, pname, params); }
MUT_FORCE_INLINE void _mutGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) { mutGLAPI.mutGetLocalConstantBooleanvEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data) { mutGLAPI.mutGetLocalConstantFloatvEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data) { mutGLAPI.mutGetLocalConstantIntegervEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMapAttribParameterfvNV(target, index, pname, params); }
MUT_FORCE_INLINE void _mutGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetMapAttribParameterivNV(target, index, pname, params); }
MUT_FORCE_INLINE void _mutGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points) { mutGLAPI.mutGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points); }
MUT_FORCE_INLINE void _mutGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMapParameterfvNV(target, pname, params); }
MUT_FORCE_INLINE void _mutGetMapParameterivNV(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetMapParameterivNV(target, pname, params); }
MUT_FORCE_INLINE void _mutGetMapxvOES(GLenum target, GLenum query, GLfixed *v) { mutGLAPI.mutGetMapxvOES(target, query, v); }
MUT_FORCE_INLINE void _mutGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) { mutGLAPI.mutGetMaterialxOES(face, pname, param); }
MUT_FORCE_INLINE void _mutGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params) { mutGLAPI.mutGetMemoryObjectParameterivEXT(memoryObject, pname, params); }
MUT_FORCE_INLINE void _mutGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { mutGLAPI.mutGetMinmax(target, reset, format, type, values); }
MUT_FORCE_INLINE void _mutGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values) { mutGLAPI.mutGetMinmaxEXT(target, reset, format, type, values); }
MUT_FORCE_INLINE void _mutGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMinmaxParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMinmaxParameterfvEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetMinmaxParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetMinmaxParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMultiTexEnvfvEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetMultiTexEnvivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) { mutGLAPI.mutGetMultiTexGendvEXT(texunit, coord, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMultiTexGenfvEXT(texunit, coord, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params) { mutGLAPI.mutGetMultiTexGenivEXT(texunit, coord, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { mutGLAPI.mutGetMultiTexImageEXT(texunit, target, level, format, type, pixels); }
MUT_FORCE_INLINE void _mutGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) { mutGLAPI.mutGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetMultiTexParameterIivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params) { mutGLAPI.mutGetMultiTexParameterIuivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetMultiTexParameterfvEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetMultiTexParameterivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) { mutGLAPI.mutGetMultisamplefv(pname, index, val); }
MUT_FORCE_INLINE void _mutGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val) { mutGLAPI.mutGetMultisamplefvNV(pname, index, val); }
MUT_FORCE_INLINE void _mutGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params) { mutGLAPI.mutGetNamedBufferParameteri64v(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedBufferParameteriv(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedBufferParameterivEXT(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params) { mutGLAPI.mutGetNamedBufferParameterui64vNV(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params) { mutGLAPI.mutGetNamedBufferPointerv(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params) { mutGLAPI.mutGetNamedBufferPointervEXT(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) { mutGLAPI.mutGetNamedBufferSubData(buffer, offset, size, data); }
MUT_FORCE_INLINE void _mutGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) { mutGLAPI.mutGetNamedBufferSubDataEXT(buffer, offset, size, data); }
MUT_FORCE_INLINE void _mutGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values) { mutGLAPI.mutGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values); }
MUT_FORCE_INLINE void _mutGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param) { mutGLAPI.mutGetNamedFramebufferParameteriv(framebuffer, pname, param); }
MUT_FORCE_INLINE void _mutGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedFramebufferParameterivEXT(framebuffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params) { mutGLAPI.mutGetNamedProgramLocalParameterIivEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params) { mutGLAPI.mutGetNamedProgramLocalParameterIuivEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params) { mutGLAPI.mutGetNamedProgramLocalParameterdvEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params) { mutGLAPI.mutGetNamedProgramLocalParameterfvEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string) { mutGLAPI.mutGetNamedProgramStringEXT(program, target, pname, string); }
MUT_FORCE_INLINE void _mutGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedProgramivEXT(program, target, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedRenderbufferParameteriv(renderbuffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params); }
MUT_FORCE_INLINE void _mutGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) { mutGLAPI.mutGetNamedStringARB(namelen, name, bufSize, stringlen, string); }
MUT_FORCE_INLINE void _mutGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params) { mutGLAPI.mutGetNamedStringivARB(namelen, name, pname, params); }
MUT_FORCE_INLINE void _mutGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId) { mutGLAPI.mutGetNextPerfQueryIdINTEL(queryId, nextQueryId); }
MUT_FORCE_INLINE void _mutGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params) { mutGLAPI.mutGetObjectBufferfvATI(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params) { mutGLAPI.mutGetObjectBufferivATI(buffer, pname, params); }
MUT_FORCE_INLINE void _mutGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) { mutGLAPI.mutGetObjectLabel(identifier, name, bufSize, length, label); }
MUT_FORCE_INLINE void _mutGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) { mutGLAPI.mutGetObjectLabelEXT(type, object, bufSize, length, label); }
MUT_FORCE_INLINE void _mutGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) { mutGLAPI.mutGetObjectLabelKHR(identifier, name, bufSize, length, label); }
MUT_FORCE_INLINE void _mutGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params) { mutGLAPI.mutGetObjectParameterfvARB(obj, pname, params); }
MUT_FORCE_INLINE void _mutGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params) { mutGLAPI.mutGetObjectParameterivAPPLE(objectType, name, pname, params); }
MUT_FORCE_INLINE void _mutGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params) { mutGLAPI.mutGetObjectParameterivARB(obj, pname, params); }
MUT_FORCE_INLINE void _mutGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) { mutGLAPI.mutGetObjectPtrLabel(ptr, bufSize, length, label); }
MUT_FORCE_INLINE void _mutGetObjectPtrLabelKHR(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) { mutGLAPI.mutGetObjectPtrLabelKHR(ptr, bufSize, length, label); }
MUT_FORCE_INLINE void _mutGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params) { mutGLAPI.mutGetOcclusionQueryivNV(id, pname, params); }
MUT_FORCE_INLINE void _mutGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params) { mutGLAPI.mutGetOcclusionQueryuivNV(id, pname, params); }
MUT_FORCE_INLINE void _mutGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value) { mutGLAPI.mutGetPathColorGenfvNV(color, pname, value); }
MUT_FORCE_INLINE void _mutGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value) { mutGLAPI.mutGetPathColorGenivNV(color, pname, value); }
MUT_FORCE_INLINE void _mutGetPathCommandsNV(GLuint path, GLubyte *commands) { mutGLAPI.mutGetPathCommandsNV(path, commands); }
MUT_FORCE_INLINE void _mutGetPathCoordsNV(GLuint path, GLfloat *coords) { mutGLAPI.mutGetPathCoordsNV(path, coords); }
MUT_FORCE_INLINE void _mutGetPathDashArrayNV(GLuint path, GLfloat *dashArray) { mutGLAPI.mutGetPathDashArrayNV(path, dashArray); }
MUT_FORCE_INLINE GLfloat _mutGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) { return mutGLAPI.mutGetPathLengthNV(path, startSegment, numSegments); }
MUT_FORCE_INLINE void _mutGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) { mutGLAPI.mutGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics); }
MUT_FORCE_INLINE void _mutGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) { mutGLAPI.mutGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); }
MUT_FORCE_INLINE void _mutGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value) { mutGLAPI.mutGetPathParameterfvNV(path, pname, value); }
MUT_FORCE_INLINE void _mutGetPathParameterivNV(GLuint path, GLenum pname, GLint *value) { mutGLAPI.mutGetPathParameterivNV(path, pname, value); }
MUT_FORCE_INLINE void _mutGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) { mutGLAPI.mutGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); }
MUT_FORCE_INLINE void _mutGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value) { mutGLAPI.mutGetPathTexGenfvNV(texCoordSet, pname, value); }
MUT_FORCE_INLINE void _mutGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value) { mutGLAPI.mutGetPathTexGenivNV(texCoordSet, pname, value); }
MUT_FORCE_INLINE void _mutGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue) { mutGLAPI.mutGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); }
MUT_FORCE_INLINE void _mutGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) { mutGLAPI.mutGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten); }
MUT_FORCE_INLINE void _mutGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data) { mutGLAPI.mutGetPerfMonitorCounterInfoAMD(group, counter, pname, data); }
MUT_FORCE_INLINE void _mutGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) { mutGLAPI.mutGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString); }
MUT_FORCE_INLINE void _mutGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters) { mutGLAPI.mutGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters); }
MUT_FORCE_INLINE void _mutGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) { mutGLAPI.mutGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString); }
MUT_FORCE_INLINE void _mutGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups) { mutGLAPI.mutGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups); }
MUT_FORCE_INLINE void _mutGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten) { mutGLAPI.mutGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten); }
MUT_FORCE_INLINE void _mutGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId) { mutGLAPI.mutGetPerfQueryIdByNameINTEL(queryName, queryId); }
MUT_FORCE_INLINE void _mutGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask) { mutGLAPI.mutGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); }
MUT_FORCE_INLINE void _mutGetPixelMapxv(GLenum map, GLint size, GLfixed *values) { mutGLAPI.mutGetPixelMapxv(map, size, values); }
MUT_FORCE_INLINE void _mutGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params) { mutGLAPI.mutGetPixelTexGenParameterfvSGIS(pname, params); }
MUT_FORCE_INLINE void _mutGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params) { mutGLAPI.mutGetPixelTexGenParameterivSGIS(pname, params); }
MUT_FORCE_INLINE void _mutGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetPixelTransformParameterfvEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetPixelTransformParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetPointerIndexedvEXT(GLenum target, GLuint index, void **data) { mutGLAPI.mutGetPointerIndexedvEXT(target, index, data); }
MUT_FORCE_INLINE void _mutGetPointeri_vEXT(GLenum pname, GLuint index, void **params) { mutGLAPI.mutGetPointeri_vEXT(pname, index, params); }
MUT_FORCE_INLINE void _mutGetPointerv(GLenum pname, void **params) { mutGLAPI.mutGetPointerv(pname, params); }
MUT_FORCE_INLINE void _mutGetPointervEXT(GLenum pname, void **params) { mutGLAPI.mutGetPointervEXT(pname, params); }
MUT_FORCE_INLINE void _mutGetPointervKHR(GLenum pname, void **params) { mutGLAPI.mutGetPointervKHR(pname, params); }
MUT_FORCE_INLINE void _mutGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) { mutGLAPI.mutGetProgramBinary(program, bufSize, length, binaryFormat, binary); }
MUT_FORCE_INLINE void _mutGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) { mutGLAPI.mutGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary); }
MUT_FORCE_INLINE void _mutGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params) { mutGLAPI.mutGetProgramEnvParameterIivNV(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params) { mutGLAPI.mutGetProgramEnvParameterIuivNV(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params) { mutGLAPI.mutGetProgramEnvParameterdvARB(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params) { mutGLAPI.mutGetProgramEnvParameterfvARB(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { mutGLAPI.mutGetProgramInfoLog(program, bufSize, length, infoLog); }
MUT_FORCE_INLINE void _mutGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) { mutGLAPI.mutGetProgramInterfaceiv(program, programInterface, pname, params); }
MUT_FORCE_INLINE void _mutGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params) { mutGLAPI.mutGetProgramLocalParameterIivNV(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params) { mutGLAPI.mutGetProgramLocalParameterIuivNV(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params) { mutGLAPI.mutGetProgramLocalParameterdvARB(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params) { mutGLAPI.mutGetProgramLocalParameterfvARB(target, index, params); }
MUT_FORCE_INLINE void _mutGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) { mutGLAPI.mutGetProgramNamedParameterdvNV(id, len, name, params); }
MUT_FORCE_INLINE void _mutGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) { mutGLAPI.mutGetProgramNamedParameterfvNV(id, len, name, params); }
MUT_FORCE_INLINE void _mutGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params) { mutGLAPI.mutGetProgramParameterdvNV(target, index, pname, params); }
MUT_FORCE_INLINE void _mutGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) { mutGLAPI.mutGetProgramParameterfvNV(target, index, pname, params); }
MUT_FORCE_INLINE void _mutGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { mutGLAPI.mutGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
MUT_FORCE_INLINE void _mutGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { mutGLAPI.mutGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog); }
MUT_FORCE_INLINE void _mutGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) { mutGLAPI.mutGetProgramPipelineiv(pipeline, pname, params); }
MUT_FORCE_INLINE void _mutGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint *params) { if (mutGLSupport(GL_ES_VERSION_2_0) && (pname == GL_CURRENT_PROGRAM)) { pname = GL_ACTIVE_PROGRAM; } else if (mutGLSupport(GL_VERSION_1_0) && (pname == GL_ACTIVE_PROGRAM)) { pname = GL_CURRENT_PROGRAM; } mutGLAPI.mutGetProgramPipelineivEXT(pipeline, pname, params); }
MUT_FORCE_INLINE GLuint _mutGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) { return mutGLAPI.mutGetProgramResourceIndex(program, programInterface, name); }
MUT_FORCE_INLINE GLint _mutGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) { return mutGLAPI.mutGetProgramResourceLocation(program, programInterface, name); }
MUT_FORCE_INLINE GLint _mutGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) { return mutGLAPI.mutGetProgramResourceLocationIndex(program, programInterface, name); }
MUT_FORCE_INLINE GLint _mutGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar *name) { return mutGLAPI.mutGetProgramResourceLocationIndexEXT(program, programInterface, name); }
MUT_FORCE_INLINE void _mutGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) { mutGLAPI.mutGetProgramResourceName(program, programInterface, index, bufSize, length, name); }
MUT_FORCE_INLINE void _mutGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params) { mutGLAPI.mutGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params); }
MUT_FORCE_INLINE void _mutGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) { mutGLAPI.mutGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params); }
MUT_FORCE_INLINE void _mutGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values) { mutGLAPI.mutGetProgramStageiv(program, shadertype, pname, values); }
MUT_FORCE_INLINE void _mutGetProgramStringARB(GLenum target, GLenum pname, void *string) { mutGLAPI.mutGetProgramStringARB(target, pname, string); }
MUT_FORCE_INLINE void _mutGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program) { mutGLAPI.mutGetProgramStringNV(id, pname, program); }
MUT_FORCE_INLINE void _mutGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *param) { mutGLAPI.mutGetProgramSubroutineParameteruivNV(target, index, param); }
MUT_FORCE_INLINE void _mutGetProgramiv(GLuint program, GLenum pname, GLint *params) { mutGLAPI.mutGetProgramiv(program, pname, params); }
MUT_FORCE_INLINE void _mutGetProgramivARB(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetProgramivARB(target, pname, params); }
MUT_FORCE_INLINE void _mutGetProgramivNV(GLuint id, GLenum pname, GLint *params) { mutGLAPI.mutGetProgramivNV(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { mutGLAPI.mutGetQueryBufferObjecti64v(id, buffer, pname, offset); }
MUT_FORCE_INLINE void _mutGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { mutGLAPI.mutGetQueryBufferObjectiv(id, buffer, pname, offset); }
MUT_FORCE_INLINE void _mutGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { mutGLAPI.mutGetQueryBufferObjectui64v(id, buffer, pname, offset); }
MUT_FORCE_INLINE void _mutGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { mutGLAPI.mutGetQueryBufferObjectuiv(id, buffer, pname, offset); }
MUT_FORCE_INLINE void _mutGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetQueryIndexediv(target, index, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) { mutGLAPI.mutGetQueryObjecti64v(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params) { mutGLAPI.mutGetQueryObjecti64vEXT(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) { mutGLAPI.mutGetQueryObjectiv(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params) { mutGLAPI.mutGetQueryObjectivARB(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params) { mutGLAPI.mutGetQueryObjectivEXT(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) { mutGLAPI.mutGetQueryObjectui64v(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params) { mutGLAPI.mutGetQueryObjectui64vEXT(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) { mutGLAPI.mutGetQueryObjectuiv(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params) { mutGLAPI.mutGetQueryObjectuivARB(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params) { mutGLAPI.mutGetQueryObjectuivEXT(id, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryiv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetQueryiv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryivARB(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetQueryivARB(target, pname, params); }
MUT_FORCE_INLINE void _mutGetQueryivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetQueryivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetRenderbufferParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetRenderbufferParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) { mutGLAPI.mutGetSamplerParameterIiv(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint *params) { mutGLAPI.mutGetSamplerParameterIivEXT(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint *params) { mutGLAPI.mutGetSamplerParameterIivOES(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) { mutGLAPI.mutGetSamplerParameterIuiv(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint *params) { mutGLAPI.mutGetSamplerParameterIuivEXT(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint *params) { mutGLAPI.mutGetSamplerParameterIuivOES(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) { mutGLAPI.mutGetSamplerParameterfv(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) { mutGLAPI.mutGetSamplerParameteriv(sampler, pname, params); }
MUT_FORCE_INLINE void _mutGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params) { mutGLAPI.mutGetSemaphoreParameterui64vEXT(semaphore, pname, params); }
MUT_FORCE_INLINE void _mutGetSeparableFilter(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) { mutGLAPI.mutGetSeparableFilter(target, format, type, row, column, span); }
MUT_FORCE_INLINE void _mutGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span) { mutGLAPI.mutGetSeparableFilterEXT(target, format, type, row, column, span); }
MUT_FORCE_INLINE void _mutGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) { mutGLAPI.mutGetShaderInfoLog(shader, bufSize, length, infoLog); }
MUT_FORCE_INLINE void _mutGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) { mutGLAPI.mutGetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
MUT_FORCE_INLINE void _mutGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) { mutGLAPI.mutGetShaderSource(shader, bufSize, length, source); }
MUT_FORCE_INLINE void _mutGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) { mutGLAPI.mutGetShaderSourceARB(obj, maxLength, length, source); }
MUT_FORCE_INLINE void _mutGetShaderiv(GLuint shader, GLenum pname, GLint *params) { mutGLAPI.mutGetShaderiv(shader, pname, params); }
MUT_FORCE_INLINE void _mutGetSharpenTexFuncSGIS(GLenum target, GLfloat *points) { mutGLAPI.mutGetSharpenTexFuncSGIS(target, points); }
MUT_FORCE_INLINE GLushort _mutGetStageIndexNV(GLenum shadertype) { return mutGLAPI.mutGetStageIndexNV(shadertype); }
MUT_FORCE_INLINE const GLubyte *_mutGetString(GLenum name) { return mutGLAPI.mutGetString(name); }
MUT_FORCE_INLINE const GLubyte *_mutGetStringi(GLenum name, GLuint index) { return mutGLAPI.mutGetStringi(name, index); }
MUT_FORCE_INLINE GLuint _mutGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name) { return mutGLAPI.mutGetSubroutineIndex(program, shadertype, name); }
MUT_FORCE_INLINE GLint _mutGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name) { return mutGLAPI.mutGetSubroutineUniformLocation(program, shadertype, name); }
MUT_FORCE_INLINE void _mutGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { mutGLAPI.mutGetSynciv(sync, pname, bufSize, length, values); }
MUT_FORCE_INLINE void _mutGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { mutGLAPI.mutGetSyncivAPPLE(sync, pname, bufSize, length, values); }
MUT_FORCE_INLINE void _mutGetTexBumpParameterfvATI(GLenum pname, GLfloat *param) { mutGLAPI.mutGetTexBumpParameterfvATI(pname, param); }
MUT_FORCE_INLINE void _mutGetTexBumpParameterivATI(GLenum pname, GLint *param) { mutGLAPI.mutGetTexBumpParameterivATI(pname, param); }
MUT_FORCE_INLINE void _mutGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed *params) { mutGLAPI.mutGetTexEnvxvOES(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights) { mutGLAPI.mutGetTexFilterFuncSGIS(target, filter, weights); }
MUT_FORCE_INLINE void _mutGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params) { mutGLAPI.mutGetTexGenxvOES(coord, pname, params); }
MUT_FORCE_INLINE void _mutGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { mutGLAPI.mutGetTexImage(target, level, format, type, pixels); }
MUT_FORCE_INLINE void _mutGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) { mutGLAPI.mutGetTexLevelParameterfv(target, level, pname, params); }
MUT_FORCE_INLINE void _mutGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) { mutGLAPI.mutGetTexLevelParameteriv(target, level, pname, params); }
MUT_FORCE_INLINE void _mutGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed *params) { mutGLAPI.mutGetTexLevelParameterxvOES(target, level, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetTexParameterIiv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetTexParameterIivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterIivOES(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetTexParameterIivOES(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) { mutGLAPI.mutGetTexParameterIuiv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params) { mutGLAPI.mutGetTexParameterIuivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint *params) { mutGLAPI.mutGetTexParameterIuivOES(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void **params) { mutGLAPI.mutGetTexParameterPointervAPPLE(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetTexParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameteriv(GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetTexParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed *params) { mutGLAPI.mutGetTexParameterxvOES(target, pname, params); }
MUT_FORCE_INLINE GLuint64 _mutGetTextureHandleARB(GLuint texture) { return mutGLAPI.mutGetTextureHandleARB(texture); }
MUT_FORCE_INLINE GLuint64 _mutGetTextureHandleIMG(GLuint texture) { return mutGLAPI.mutGetTextureHandleIMG(texture); }
MUT_FORCE_INLINE GLuint64 _mutGetTextureHandleNV(GLuint texture) { return mutGLAPI.mutGetTextureHandleNV(texture); }
MUT_FORCE_INLINE void _mutGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { mutGLAPI.mutGetTextureImage(texture, level, format, type, bufSize, pixels); }
MUT_FORCE_INLINE void _mutGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels) { mutGLAPI.mutGetTextureImageEXT(texture, target, level, format, type, pixels); }
MUT_FORCE_INLINE void _mutGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params) { mutGLAPI.mutGetTextureLevelParameterfv(texture, level, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) { mutGLAPI.mutGetTextureLevelParameterfvEXT(texture, target, level, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params) { mutGLAPI.mutGetTextureLevelParameteriv(texture, level, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) { mutGLAPI.mutGetTextureLevelParameterivEXT(texture, target, level, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params) { mutGLAPI.mutGetTextureParameterIiv(texture, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetTextureParameterIivEXT(texture, target, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params) { mutGLAPI.mutGetTextureParameterIuiv(texture, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params) { mutGLAPI.mutGetTextureParameterIuivEXT(texture, target, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params) { mutGLAPI.mutGetTextureParameterfv(texture, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params) { mutGLAPI.mutGetTextureParameterfvEXT(texture, target, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params) { mutGLAPI.mutGetTextureParameteriv(texture, pname, params); }
MUT_FORCE_INLINE void _mutGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) { mutGLAPI.mutGetTextureParameterivEXT(texture, target, pname, params); }
MUT_FORCE_INLINE GLuint64 _mutGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) { return mutGLAPI.mutGetTextureSamplerHandleARB(texture, sampler); }
MUT_FORCE_INLINE GLuint64 _mutGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) { return mutGLAPI.mutGetTextureSamplerHandleIMG(texture, sampler); }
MUT_FORCE_INLINE GLuint64 _mutGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) { return mutGLAPI.mutGetTextureSamplerHandleNV(texture, sampler); }
MUT_FORCE_INLINE void _mutGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { mutGLAPI.mutGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); }
MUT_FORCE_INLINE void _mutGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params) { mutGLAPI.mutGetTrackMatrixivNV(target, address, pname, params); }
MUT_FORCE_INLINE void _mutGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { mutGLAPI.mutGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
MUT_FORCE_INLINE void _mutGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) { mutGLAPI.mutGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name); }
MUT_FORCE_INLINE void _mutGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location) { mutGLAPI.mutGetTransformFeedbackVaryingNV(program, index, location); }
MUT_FORCE_INLINE void _mutGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param) { mutGLAPI.mutGetTransformFeedbacki64_v(xfb, pname, index, param); }
MUT_FORCE_INLINE void _mutGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param) { mutGLAPI.mutGetTransformFeedbacki_v(xfb, pname, index, param); }
MUT_FORCE_INLINE void _mutGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param) { mutGLAPI.mutGetTransformFeedbackiv(xfb, pname, param); }
MUT_FORCE_INLINE void _mutGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source) { mutGLAPI.mutGetTranslatedShaderSourceANGLE(shader, bufsize, length, source); }
MUT_FORCE_INLINE GLuint _mutGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) { return mutGLAPI.mutGetUniformBlockIndex(program, uniformBlockName); }
MUT_FORCE_INLINE GLint _mutGetUniformBufferSizeEXT(GLuint program, GLint location) { return mutGLAPI.mutGetUniformBufferSizeEXT(program, location); }
MUT_FORCE_INLINE void _mutGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const *uniformNames, GLuint *uniformIndices) { mutGLAPI.mutGetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
MUT_FORCE_INLINE GLint _mutGetUniformLocation(GLuint program, const GLchar *name) { return mutGLAPI.mutGetUniformLocation(program, name); }
MUT_FORCE_INLINE GLint _mutGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name) { return mutGLAPI.mutGetUniformLocationARB(programObj, name); }
MUT_FORCE_INLINE GLintptr _mutGetUniformOffsetEXT(GLuint program, GLint location) { return mutGLAPI.mutGetUniformOffsetEXT(program, location); }
MUT_FORCE_INLINE void _mutGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params) { mutGLAPI.mutGetUniformSubroutineuiv(shadertype, location, params); }
MUT_FORCE_INLINE void _mutGetUniformdv(GLuint program, GLint location, GLdouble *params) { mutGLAPI.mutGetUniformdv(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformfv(GLuint program, GLint location, GLfloat *params) { mutGLAPI.mutGetUniformfv(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params) { mutGLAPI.mutGetUniformfvARB(programObj, location, params); }
MUT_FORCE_INLINE void _mutGetUniformi64vARB(GLuint program, GLint location, GLint64 *params) { mutGLAPI.mutGetUniformi64vARB(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params) { mutGLAPI.mutGetUniformi64vNV(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformiv(GLuint program, GLint location, GLint *params) { mutGLAPI.mutGetUniformiv(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params) { mutGLAPI.mutGetUniformivARB(programObj, location, params); }
MUT_FORCE_INLINE void _mutGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params) { mutGLAPI.mutGetUniformui64vARB(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params) { mutGLAPI.mutGetUniformui64vNV(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformuiv(GLuint program, GLint location, GLuint *params) { mutGLAPI.mutGetUniformuiv(program, location, params); }
MUT_FORCE_INLINE void _mutGetUniformuivEXT(GLuint program, GLint location, GLuint *params) { mutGLAPI.mutGetUniformuivEXT(program, location, params); }
MUT_FORCE_INLINE void _mutGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data) { mutGLAPI.mutGetUnsignedBytei_vEXT(target, index, data); }
MUT_FORCE_INLINE void _mutGetUnsignedBytevEXT(GLenum pname, GLubyte *data) { mutGLAPI.mutGetUnsignedBytevEXT(pname, data); }
MUT_FORCE_INLINE void _mutGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params) { mutGLAPI.mutGetVariantArrayObjectfvATI(id, pname, params); }
MUT_FORCE_INLINE void _mutGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params) { mutGLAPI.mutGetVariantArrayObjectivATI(id, pname, params); }
MUT_FORCE_INLINE void _mutGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) { mutGLAPI.mutGetVariantBooleanvEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) { mutGLAPI.mutGetVariantFloatvEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data) { mutGLAPI.mutGetVariantIntegervEXT(id, value, data); }
MUT_FORCE_INLINE void _mutGetVariantPointervEXT(GLuint id, GLenum value, void **data) { mutGLAPI.mutGetVariantPointervEXT(id, value, data); }
MUT_FORCE_INLINE GLint _mutGetVaryingLocationNV(GLuint program, const GLchar *name) { return mutGLAPI.mutGetVaryingLocationNV(program, name); }
MUT_FORCE_INLINE void _mutGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) { mutGLAPI.mutGetVertexArrayIndexed64iv(vaobj, index, pname, param); }
MUT_FORCE_INLINE void _mutGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param) { mutGLAPI.mutGetVertexArrayIndexediv(vaobj, index, pname, param); }
MUT_FORCE_INLINE void _mutGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param) { mutGLAPI.mutGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param); }
MUT_FORCE_INLINE void _mutGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param) { mutGLAPI.mutGetVertexArrayIntegervEXT(vaobj, pname, param); }
MUT_FORCE_INLINE void _mutGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param) { mutGLAPI.mutGetVertexArrayPointeri_vEXT(vaobj, index, pname, param); }
MUT_FORCE_INLINE void _mutGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param) { mutGLAPI.mutGetVertexArrayPointervEXT(vaobj, pname, param); }
MUT_FORCE_INLINE void _mutGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param) { mutGLAPI.mutGetVertexArrayiv(vaobj, pname, param); }
MUT_FORCE_INLINE void _mutGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params) { mutGLAPI.mutGetVertexAttribArrayObjectfvATI(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetVertexAttribArrayObjectivATI(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetVertexAttribIiv(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetVertexAttribIivEXT(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) { mutGLAPI.mutGetVertexAttribIuiv(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params) { mutGLAPI.mutGetVertexAttribIuivEXT(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) { mutGLAPI.mutGetVertexAttribLdv(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params) { mutGLAPI.mutGetVertexAttribLdvEXT(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params) { mutGLAPI.mutGetVertexAttribLi64vNV(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params) { mutGLAPI.mutGetVertexAttribLui64vARB(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params) { mutGLAPI.mutGetVertexAttribLui64vNV(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) { mutGLAPI.mutGetVertexAttribPointerv(index, pname, pointer); }
MUT_FORCE_INLINE void _mutGetVertexAttribPointervARB(GLuint index, GLenum pname, void **pointer) { mutGLAPI.mutGetVertexAttribPointervARB(index, pname, pointer); }
MUT_FORCE_INLINE void _mutGetVertexAttribPointervNV(GLuint index, GLenum pname, void **pointer) { mutGLAPI.mutGetVertexAttribPointervNV(index, pname, pointer); }
MUT_FORCE_INLINE void _mutGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) { mutGLAPI.mutGetVertexAttribdv(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params) { mutGLAPI.mutGetVertexAttribdvARB(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params) { mutGLAPI.mutGetVertexAttribdvNV(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) { mutGLAPI.mutGetVertexAttribfv(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params) { mutGLAPI.mutGetVertexAttribfvARB(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params) { mutGLAPI.mutGetVertexAttribfvNV(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetVertexAttribiv(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetVertexAttribivARB(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params) { mutGLAPI.mutGetVertexAttribivNV(index, pname, params); }
MUT_FORCE_INLINE void _mutGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) { mutGLAPI.mutGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params); }
MUT_FORCE_INLINE void _mutGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) { mutGLAPI.mutGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params); }
MUT_FORCE_INLINE void _mutGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) { mutGLAPI.mutGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params); }
MUT_FORCE_INLINE void _mutGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params) { mutGLAPI.mutGetVideoCaptureivNV(video_capture_slot, pname, params); }
MUT_FORCE_INLINE void _mutGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params) { mutGLAPI.mutGetVideoi64vNV(video_slot, pname, params); }
MUT_FORCE_INLINE void _mutGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params) { mutGLAPI.mutGetVideoivNV(video_slot, pname, params); }
MUT_FORCE_INLINE void _mutGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params) { mutGLAPI.mutGetVideoui64vNV(video_slot, pname, params); }
MUT_FORCE_INLINE void _mutGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params) { mutGLAPI.mutGetVideouivNV(video_slot, pname, params); }
MUT_FORCE_INLINE GLVULKANPROCNV _mutGetVkProcAddrNV(const GLchar *name) { return mutGLAPI.mutGetVkProcAddrNV(name); }
MUT_FORCE_INLINE void _mutGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) { mutGLAPI.mutGetnColorTable(target, format, type, bufSize, table); }
MUT_FORCE_INLINE void _mutGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table) { mutGLAPI.mutGetnColorTableARB(target, format, type, bufSize, table); }
MUT_FORCE_INLINE void _mutGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels) { mutGLAPI.mutGetnCompressedTexImage(target, lod, bufSize, pixels); }
MUT_FORCE_INLINE void _mutGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img) { mutGLAPI.mutGetnCompressedTexImageARB(target, lod, bufSize, img); }
MUT_FORCE_INLINE void _mutGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) { mutGLAPI.mutGetnConvolutionFilter(target, format, type, bufSize, image); }
MUT_FORCE_INLINE void _mutGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image) { mutGLAPI.mutGetnConvolutionFilterARB(target, format, type, bufSize, image); }
MUT_FORCE_INLINE void _mutGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { mutGLAPI.mutGetnHistogram(target, reset, format, type, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { mutGLAPI.mutGetnHistogramARB(target, reset, format, type, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) { mutGLAPI.mutGetnMapdv(target, query, bufSize, v); }
MUT_FORCE_INLINE void _mutGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) { mutGLAPI.mutGetnMapdvARB(target, query, bufSize, v); }
MUT_FORCE_INLINE void _mutGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) { mutGLAPI.mutGetnMapfv(target, query, bufSize, v); }
MUT_FORCE_INLINE void _mutGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) { mutGLAPI.mutGetnMapfvARB(target, query, bufSize, v); }
MUT_FORCE_INLINE void _mutGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v) { mutGLAPI.mutGetnMapiv(target, query, bufSize, v); }
MUT_FORCE_INLINE void _mutGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v) { mutGLAPI.mutGetnMapivARB(target, query, bufSize, v); }
MUT_FORCE_INLINE void _mutGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { mutGLAPI.mutGetnMinmax(target, reset, format, type, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values) { mutGLAPI.mutGetnMinmaxARB(target, reset, format, type, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values) { mutGLAPI.mutGetnPixelMapfv(map, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values) { mutGLAPI.mutGetnPixelMapfvARB(map, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values) { mutGLAPI.mutGetnPixelMapuiv(map, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values) { mutGLAPI.mutGetnPixelMapuivARB(map, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values) { mutGLAPI.mutGetnPixelMapusv(map, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values) { mutGLAPI.mutGetnPixelMapusvARB(map, bufSize, values); }
MUT_FORCE_INLINE void _mutGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern) { mutGLAPI.mutGetnPolygonStipple(bufSize, pattern); }
MUT_FORCE_INLINE void _mutGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern) { mutGLAPI.mutGetnPolygonStippleARB(bufSize, pattern); }
MUT_FORCE_INLINE void _mutGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) { mutGLAPI.mutGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span); }
MUT_FORCE_INLINE void _mutGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span) { mutGLAPI.mutGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span); }
MUT_FORCE_INLINE void _mutGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) { mutGLAPI.mutGetnTexImage(target, level, format, type, bufSize, pixels); }
MUT_FORCE_INLINE void _mutGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) { mutGLAPI.mutGetnTexImageARB(target, level, format, type, bufSize, img); }
MUT_FORCE_INLINE void _mutGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) { mutGLAPI.mutGetnUniformdv(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) { mutGLAPI.mutGetnUniformdvARB(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { mutGLAPI.mutGetnUniformfv(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { mutGLAPI.mutGetnUniformfvARB(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { mutGLAPI.mutGetnUniformfvEXT(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) { mutGLAPI.mutGetnUniformfvKHR(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params) { mutGLAPI.mutGetnUniformi64vARB(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params) { mutGLAPI.mutGetnUniformiv(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params) { mutGLAPI.mutGetnUniformivARB(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params) { mutGLAPI.mutGetnUniformivEXT(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint *params) { mutGLAPI.mutGetnUniformivKHR(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params) { mutGLAPI.mutGetnUniformui64vARB(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params) { mutGLAPI.mutGetnUniformuiv(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params) { mutGLAPI.mutGetnUniformuivARB(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint *params) { mutGLAPI.mutGetnUniformuivKHR(program, location, bufSize, params); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactorbSUN(GLbyte factor) { mutGLAPI.mutGlobalAlphaFactorbSUN(factor); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactordSUN(GLdouble factor) { mutGLAPI.mutGlobalAlphaFactordSUN(factor); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactorfSUN(GLfloat factor) { mutGLAPI.mutGlobalAlphaFactorfSUN(factor); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactoriSUN(GLint factor) { mutGLAPI.mutGlobalAlphaFactoriSUN(factor); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactorsSUN(GLshort factor) { mutGLAPI.mutGlobalAlphaFactorsSUN(factor); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactorubSUN(GLubyte factor) { mutGLAPI.mutGlobalAlphaFactorubSUN(factor); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactoruiSUN(GLuint factor) { mutGLAPI.mutGlobalAlphaFactoruiSUN(factor); }
MUT_FORCE_INLINE void _mutGlobalAlphaFactorusSUN(GLushort factor) { mutGLAPI.mutGlobalAlphaFactorusSUN(factor); }
MUT_FORCE_INLINE void _mutHint(GLenum target, GLenum mode) { mutGLAPI.mutHint(target, mode); }
MUT_FORCE_INLINE void _mutHintPGI(GLenum target, GLint mode) { mutGLAPI.mutHintPGI(target, mode); }
MUT_FORCE_INLINE void _mutHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { mutGLAPI.mutHistogram(target, width, internalformat, sink); }
MUT_FORCE_INLINE void _mutHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { mutGLAPI.mutHistogramEXT(target, width, internalformat, sink); }
MUT_FORCE_INLINE void _mutIglooInterfaceSGIX(GLenum pname, const void *params) { mutGLAPI.mutIglooInterfaceSGIX(pname, params); }
MUT_FORCE_INLINE void _mutImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) { mutGLAPI.mutImageTransformParameterfHP(target, pname, param); }
MUT_FORCE_INLINE void _mutImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutImageTransformParameterfvHP(target, pname, params); }
MUT_FORCE_INLINE void _mutImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) { mutGLAPI.mutImageTransformParameteriHP(target, pname, param); }
MUT_FORCE_INLINE void _mutImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutImageTransformParameterivHP(target, pname, params); }
MUT_FORCE_INLINE void _mutImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { mutGLAPI.mutImportMemoryFdEXT(memory, size, handleType, fd); }
MUT_FORCE_INLINE void _mutImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void *handle) { mutGLAPI.mutImportMemoryWin32HandleEXT(memory, size, handleType, handle); }
MUT_FORCE_INLINE void _mutImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void *name) { mutGLAPI.mutImportMemoryWin32NameEXT(memory, size, handleType, name); }
MUT_FORCE_INLINE void _mutImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) { mutGLAPI.mutImportSemaphoreFdEXT(semaphore, handleType, fd); }
MUT_FORCE_INLINE void _mutImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void *handle) { mutGLAPI.mutImportSemaphoreWin32HandleEXT(semaphore, handleType, handle); }
MUT_FORCE_INLINE void _mutImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void *name) { mutGLAPI.mutImportSemaphoreWin32NameEXT(semaphore, handleType, name); }
MUT_FORCE_INLINE GLsync _mutImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return mutGLAPI.mutImportSyncEXT(external_sync_type, external_sync, flags); }
MUT_FORCE_INLINE void _mutIndexFormatNV(GLenum type, GLsizei stride) { mutGLAPI.mutIndexFormatNV(type, stride); }
MUT_FORCE_INLINE void _mutIndexFuncEXT(GLenum func, GLclampf ref) { mutGLAPI.mutIndexFuncEXT(func, ref); }
MUT_FORCE_INLINE void _mutIndexMaterialEXT(GLenum face, GLenum mode) { mutGLAPI.mutIndexMaterialEXT(face, mode); }
MUT_FORCE_INLINE void _mutIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer) { mutGLAPI.mutIndexPointerEXT(type, stride, count, pointer); }
MUT_FORCE_INLINE void _mutIndexPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) { mutGLAPI.mutIndexPointerListIBM(type, stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutIndexxOES(GLfixed component) { mutGLAPI.mutIndexxOES(component); }
MUT_FORCE_INLINE void _mutIndexxvOES(const GLfixed *component) { mutGLAPI.mutIndexxvOES(component); }
MUT_FORCE_INLINE void _mutInsertComponentEXT(GLuint res, GLuint src, GLuint num) { mutGLAPI.mutInsertComponentEXT(res, src, num); }
MUT_FORCE_INLINE void _mutInsertEventMarkerEXT(GLsizei length, const GLchar *marker) { mutGLAPI.mutInsertEventMarkerEXT(length, marker); }
MUT_FORCE_INLINE void _mutInstrumentsBufferSGIX(GLsizei size, GLint *buffer) { mutGLAPI.mutInstrumentsBufferSGIX(size, buffer); }
MUT_FORCE_INLINE void _mutInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { mutGLAPI.mutInterpolatePathsNV(resultPath, pathA, pathB, weight); }
MUT_FORCE_INLINE void _mutInvalidateBufferData(GLuint buffer) { mutGLAPI.mutInvalidateBufferData(buffer); }
MUT_FORCE_INLINE void _mutInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) { mutGLAPI.mutInvalidateBufferSubData(buffer, offset, length); }
MUT_FORCE_INLINE void _mutInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) { mutGLAPI.mutInvalidateFramebuffer(target, numAttachments, attachments); }
MUT_FORCE_INLINE void _mutInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) { mutGLAPI.mutInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
MUT_FORCE_INLINE void _mutInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
MUT_FORCE_INLINE void _mutInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
MUT_FORCE_INLINE void _mutInvalidateTexImage(GLuint texture, GLint level) { mutGLAPI.mutInvalidateTexImage(texture, level); }
MUT_FORCE_INLINE void _mutInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { mutGLAPI.mutInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); }
MUT_FORCE_INLINE GLboolean _mutIsAsyncMarkerSGIX(GLuint marker) { return mutGLAPI.mutIsAsyncMarkerSGIX(marker); }
MUT_FORCE_INLINE GLboolean _mutIsBuffer(GLuint buffer) { return mutGLAPI.mutIsBuffer(buffer); }
MUT_FORCE_INLINE GLboolean _mutIsBufferARB(GLuint buffer) { return mutGLAPI.mutIsBufferARB(buffer); }
MUT_FORCE_INLINE GLboolean _mutIsBufferResidentNV(GLenum target) { return mutGLAPI.mutIsBufferResidentNV(target); }
MUT_FORCE_INLINE GLboolean _mutIsCommandListNV(GLuint list) { return mutGLAPI.mutIsCommandListNV(list); }
MUT_FORCE_INLINE GLboolean _mutIsEnabled(GLenum cap) { return mutGLAPI.mutIsEnabled(cap); }
MUT_FORCE_INLINE GLboolean _mutIsEnabledIndexedEXT(GLenum target, GLuint index) { return mutGLAPI.mutIsEnabledIndexedEXT(target, index); }
MUT_FORCE_INLINE GLboolean _mutIsEnabledi(GLenum target, GLuint index) { return mutGLAPI.mutIsEnabledi(target, index); }
MUT_FORCE_INLINE GLboolean _mutIsEnablediEXT(GLenum target, GLuint index) { return mutGLAPI.mutIsEnablediEXT(target, index); }
MUT_FORCE_INLINE GLboolean _mutIsEnablediNV(GLenum target, GLuint index) { return mutGLAPI.mutIsEnablediNV(target, index); }
MUT_FORCE_INLINE GLboolean _mutIsEnablediOES(GLenum target, GLuint index) { return mutGLAPI.mutIsEnablediOES(target, index); }
MUT_FORCE_INLINE GLboolean _mutIsFenceAPPLE(GLuint fence) { return mutGLAPI.mutIsFenceAPPLE(fence); }
MUT_FORCE_INLINE GLboolean _mutIsFenceNV(GLuint fence) { return mutGLAPI.mutIsFenceNV(fence); }
MUT_FORCE_INLINE GLboolean _mutIsFramebuffer(GLuint framebuffer) { return mutGLAPI.mutIsFramebuffer(framebuffer); }
MUT_FORCE_INLINE GLboolean _mutIsFramebufferEXT(GLuint framebuffer) { return mutGLAPI.mutIsFramebufferEXT(framebuffer); }
MUT_FORCE_INLINE GLboolean _mutIsImageHandleResidentARB(GLuint64 handle) { return mutGLAPI.mutIsImageHandleResidentARB(handle); }
MUT_FORCE_INLINE GLboolean _mutIsImageHandleResidentNV(GLuint64 handle) { return mutGLAPI.mutIsImageHandleResidentNV(handle); }
MUT_FORCE_INLINE GLboolean _mutIsMemoryObjectEXT(GLuint memoryObject) { return mutGLAPI.mutIsMemoryObjectEXT(memoryObject); }
MUT_FORCE_INLINE GLboolean _mutIsNameAMD(GLenum identifier, GLuint name) { return mutGLAPI.mutIsNameAMD(identifier, name); }
MUT_FORCE_INLINE GLboolean _mutIsNamedBufferResidentNV(GLuint buffer) { return mutGLAPI.mutIsNamedBufferResidentNV(buffer); }
MUT_FORCE_INLINE GLboolean _mutIsNamedStringARB(GLint namelen, const GLchar *name) { return mutGLAPI.mutIsNamedStringARB(namelen, name); }
MUT_FORCE_INLINE GLboolean _mutIsObjectBufferATI(GLuint buffer) { return mutGLAPI.mutIsObjectBufferATI(buffer); }
MUT_FORCE_INLINE GLboolean _mutIsOcclusionQueryNV(GLuint id) { return mutGLAPI.mutIsOcclusionQueryNV(id); }
MUT_FORCE_INLINE GLboolean _mutIsPathNV(GLuint path) { return mutGLAPI.mutIsPathNV(path); }
MUT_FORCE_INLINE GLboolean _mutIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) { return mutGLAPI.mutIsPointInFillPathNV(path, mask, x, y); }
MUT_FORCE_INLINE GLboolean _mutIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) { return mutGLAPI.mutIsPointInStrokePathNV(path, x, y); }
MUT_FORCE_INLINE GLboolean _mutIsProgram(GLuint program) { return mutGLAPI.mutIsProgram(program); }
MUT_FORCE_INLINE GLboolean _mutIsProgramARB(GLuint program) { return mutGLAPI.mutIsProgramARB(program); }
MUT_FORCE_INLINE GLboolean _mutIsProgramNV(GLuint id) { return mutGLAPI.mutIsProgramNV(id); }
MUT_FORCE_INLINE GLboolean _mutIsProgramPipeline(GLuint pipeline) { return mutGLAPI.mutIsProgramPipeline(pipeline); }
MUT_FORCE_INLINE GLboolean _mutIsProgramPipelineEXT(GLuint pipeline) { return mutGLAPI.mutIsProgramPipelineEXT(pipeline); }
MUT_FORCE_INLINE GLboolean _mutIsQuery(GLuint id) { return mutGLAPI.mutIsQuery(id); }
MUT_FORCE_INLINE GLboolean _mutIsQueryARB(GLuint id) { return mutGLAPI.mutIsQueryARB(id); }
MUT_FORCE_INLINE GLboolean _mutIsQueryEXT(GLuint id) { return mutGLAPI.mutIsQueryEXT(id); }
MUT_FORCE_INLINE GLboolean _mutIsRenderbuffer(GLuint renderbuffer) { return mutGLAPI.mutIsRenderbuffer(renderbuffer); }
MUT_FORCE_INLINE GLboolean _mutIsRenderbufferEXT(GLuint renderbuffer) { return mutGLAPI.mutIsRenderbufferEXT(renderbuffer); }
MUT_FORCE_INLINE GLboolean _mutIsSampler(GLuint sampler) { return mutGLAPI.mutIsSampler(sampler); }
MUT_FORCE_INLINE GLboolean _mutIsSemaphoreEXT(GLuint semaphore) { return mutGLAPI.mutIsSemaphoreEXT(semaphore); }
MUT_FORCE_INLINE GLboolean _mutIsShader(GLuint shader) { return mutGLAPI.mutIsShader(shader); }
MUT_FORCE_INLINE GLboolean _mutIsStateNV(GLuint state) { return mutGLAPI.mutIsStateNV(state); }
MUT_FORCE_INLINE GLboolean _mutIsSync(GLsync sync) { return mutGLAPI.mutIsSync(sync); }
MUT_FORCE_INLINE GLboolean _mutIsSyncAPPLE(GLsync sync) { return mutGLAPI.mutIsSyncAPPLE(sync); }
MUT_FORCE_INLINE GLboolean _mutIsTexture(GLuint texture) { return mutGLAPI.mutIsTexture(texture); }
MUT_FORCE_INLINE GLboolean _mutIsTextureEXT(GLuint texture) { return mutGLAPI.mutIsTextureEXT(texture); }
MUT_FORCE_INLINE GLboolean _mutIsTextureHandleResidentARB(GLuint64 handle) { return mutGLAPI.mutIsTextureHandleResidentARB(handle); }
MUT_FORCE_INLINE GLboolean _mutIsTextureHandleResidentNV(GLuint64 handle) { return mutGLAPI.mutIsTextureHandleResidentNV(handle); }
MUT_FORCE_INLINE GLboolean _mutIsTransformFeedback(GLuint id) { return mutGLAPI.mutIsTransformFeedback(id); }
MUT_FORCE_INLINE GLboolean _mutIsTransformFeedbackNV(GLuint id) { return mutGLAPI.mutIsTransformFeedbackNV(id); }
MUT_FORCE_INLINE GLboolean _mutIsVariantEnabledEXT(GLuint id, GLenum cap) { return mutGLAPI.mutIsVariantEnabledEXT(id, cap); }
MUT_FORCE_INLINE GLboolean _mutIsVertexArray(GLuint array) { return mutGLAPI.mutIsVertexArray(array); }
MUT_FORCE_INLINE GLboolean _mutIsVertexArrayAPPLE(GLuint array) { return mutGLAPI.mutIsVertexArrayAPPLE(array); }
MUT_FORCE_INLINE GLboolean _mutIsVertexArrayOES(GLuint array) { return mutGLAPI.mutIsVertexArrayOES(array); }
MUT_FORCE_INLINE GLboolean _mutIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) { return mutGLAPI.mutIsVertexAttribEnabledAPPLE(index, pname); }
MUT_FORCE_INLINE void _mutLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { mutGLAPI.mutLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
MUT_FORCE_INLINE void _mutLGPUInterlockNVX(void) { mutGLAPI.mutLGPUInterlockNVX(); }
MUT_FORCE_INLINE void _mutLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) { mutGLAPI.mutLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data); }
MUT_FORCE_INLINE void _mutLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label) { mutGLAPI.mutLabelObjectEXT(type, object, length, label); }
MUT_FORCE_INLINE void _mutLightEnviSGIX(GLenum pname, GLint param) { mutGLAPI.mutLightEnviSGIX(pname, param); }
MUT_FORCE_INLINE void _mutLightModelxOES(GLenum pname, GLfixed param) { mutGLAPI.mutLightModelxOES(pname, param); }
MUT_FORCE_INLINE void _mutLightModelxvOES(GLenum pname, const GLfixed *param) { mutGLAPI.mutLightModelxvOES(pname, param); }
MUT_FORCE_INLINE void _mutLightxOES(GLenum light, GLenum pname, GLfixed param) { mutGLAPI.mutLightxOES(light, pname, param); }
MUT_FORCE_INLINE void _mutLightxvOES(GLenum light, GLenum pname, const GLfixed *params) { mutGLAPI.mutLightxvOES(light, pname, params); }
MUT_FORCE_INLINE void _mutLineWidth(GLfloat width) { mutGLAPI.mutLineWidth(width); }
MUT_FORCE_INLINE void _mutLineWidthxOES(GLfixed width) { mutGLAPI.mutLineWidthxOES(width); }
MUT_FORCE_INLINE void _mutLinkProgram(GLuint program) { mutGLAPI.mutLinkProgram(program); }
MUT_FORCE_INLINE void _mutLinkProgramARB(GLhandleARB programObj) { mutGLAPI.mutLinkProgramARB(programObj); }
MUT_FORCE_INLINE void _mutListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count) { mutGLAPI.mutListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count); }
MUT_FORCE_INLINE void _mutListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) { mutGLAPI.mutListParameterfSGIX(list, pname, param); }
MUT_FORCE_INLINE void _mutListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params) { mutGLAPI.mutListParameterfvSGIX(list, pname, params); }
MUT_FORCE_INLINE void _mutListParameteriSGIX(GLuint list, GLenum pname, GLint param) { mutGLAPI.mutListParameteriSGIX(list, pname, param); }
MUT_FORCE_INLINE void _mutListParameterivSGIX(GLuint list, GLenum pname, const GLint *params) { mutGLAPI.mutListParameterivSGIX(list, pname, params); }
MUT_FORCE_INLINE void _mutLoadIdentityDeformationMapSGIX(GLbitfield mask) { mutGLAPI.mutLoadIdentityDeformationMapSGIX(mask); }
MUT_FORCE_INLINE void _mutLoadMatrixxOES(const GLfixed *m) { mutGLAPI.mutLoadMatrixxOES(m); }
MUT_FORCE_INLINE void _mutLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program) { mutGLAPI.mutLoadProgramNV(target, id, len, program); }
MUT_FORCE_INLINE void _mutLoadTransposeMatrixd(const GLdouble *m) { mutGLAPI.mutLoadTransposeMatrixd(m); }
MUT_FORCE_INLINE void _mutLoadTransposeMatrixdARB(const GLdouble *m) { mutGLAPI.mutLoadTransposeMatrixdARB(m); }
MUT_FORCE_INLINE void _mutLoadTransposeMatrixf(const GLfloat *m) { mutGLAPI.mutLoadTransposeMatrixf(m); }
MUT_FORCE_INLINE void _mutLoadTransposeMatrixfARB(const GLfloat *m) { mutGLAPI.mutLoadTransposeMatrixfARB(m); }
MUT_FORCE_INLINE void _mutLoadTransposeMatrixxOES(const GLfixed *m) { mutGLAPI.mutLoadTransposeMatrixxOES(m); }
MUT_FORCE_INLINE void _mutLockArraysEXT(GLint first, GLsizei count) { mutGLAPI.mutLockArraysEXT(first, count); }
MUT_FORCE_INLINE void _mutLogicOp(GLenum opcode) { mutGLAPI.mutLogicOp(opcode); }
MUT_FORCE_INLINE void _mutMakeBufferNonResidentNV(GLenum target) { mutGLAPI.mutMakeBufferNonResidentNV(target); }
MUT_FORCE_INLINE void _mutMakeBufferResidentNV(GLenum target, GLenum access) { mutGLAPI.mutMakeBufferResidentNV(target, access); }
MUT_FORCE_INLINE void _mutMakeImageHandleNonResidentARB(GLuint64 handle) { mutGLAPI.mutMakeImageHandleNonResidentARB(handle); }
MUT_FORCE_INLINE void _mutMakeImageHandleNonResidentNV(GLuint64 handle) { mutGLAPI.mutMakeImageHandleNonResidentNV(handle); }
MUT_FORCE_INLINE void _mutMakeImageHandleResidentARB(GLuint64 handle, GLenum access) { mutGLAPI.mutMakeImageHandleResidentARB(handle, access); }
MUT_FORCE_INLINE void _mutMakeImageHandleResidentNV(GLuint64 handle, GLenum access) { mutGLAPI.mutMakeImageHandleResidentNV(handle, access); }
MUT_FORCE_INLINE void _mutMakeNamedBufferNonResidentNV(GLuint buffer) { mutGLAPI.mutMakeNamedBufferNonResidentNV(buffer); }
MUT_FORCE_INLINE void _mutMakeNamedBufferResidentNV(GLuint buffer, GLenum access) { mutGLAPI.mutMakeNamedBufferResidentNV(buffer, access); }
MUT_FORCE_INLINE void _mutMakeTextureHandleNonResidentARB(GLuint64 handle) { mutGLAPI.mutMakeTextureHandleNonResidentARB(handle); }
MUT_FORCE_INLINE void _mutMakeTextureHandleNonResidentNV(GLuint64 handle) { mutGLAPI.mutMakeTextureHandleNonResidentNV(handle); }
MUT_FORCE_INLINE void _mutMakeTextureHandleResidentARB(GLuint64 handle) { mutGLAPI.mutMakeTextureHandleResidentARB(handle); }
MUT_FORCE_INLINE void _mutMakeTextureHandleResidentNV(GLuint64 handle) { mutGLAPI.mutMakeTextureHandleResidentNV(handle); }
MUT_FORCE_INLINE void _mutMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { mutGLAPI.mutMap1xOES(target, u1, u2, stride, order, points); }
MUT_FORCE_INLINE void _mutMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { mutGLAPI.mutMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
MUT_FORCE_INLINE void *_mutMapBuffer(GLenum target, GLenum access) { return mutGLAPI.mutMapBuffer(target, access); }
MUT_FORCE_INLINE void *_mutMapBufferARB(GLenum target, GLenum access) { return mutGLAPI.mutMapBufferARB(target, access); }
MUT_FORCE_INLINE void *_mutMapBufferOES(GLenum target, GLenum access) { return mutGLAPI.mutMapBufferOES(target, access); }
MUT_FORCE_INLINE void *_mutMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return mutGLAPI.mutMapBufferRange(target, offset, length, access); }
MUT_FORCE_INLINE void *_mutMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return mutGLAPI.mutMapBufferRangeEXT(target, offset, length, access); }
MUT_FORCE_INLINE void _mutMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points) { mutGLAPI.mutMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points); }
MUT_FORCE_INLINE void _mutMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) { mutGLAPI.mutMapGrid1xOES(n, u1, u2); }
MUT_FORCE_INLINE void _mutMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { mutGLAPI.mutMapGrid2xOES(n, u1, u2, v1, v2); }
MUT_FORCE_INLINE void *_mutMapNamedBuffer(GLuint buffer, GLenum access) { return mutGLAPI.mutMapNamedBuffer(buffer, access); }
MUT_FORCE_INLINE void *_mutMapNamedBufferEXT(GLuint buffer, GLenum access) { return mutGLAPI.mutMapNamedBufferEXT(buffer, access); }
MUT_FORCE_INLINE void *_mutMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return mutGLAPI.mutMapNamedBufferRange(buffer, offset, length, access); }
MUT_FORCE_INLINE void *_mutMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return mutGLAPI.mutMapNamedBufferRangeEXT(buffer, offset, length, access); }
MUT_FORCE_INLINE void *_mutMapObjectBufferATI(GLuint buffer) { return mutGLAPI.mutMapObjectBufferATI(buffer); }
MUT_FORCE_INLINE void _mutMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutMapParameterfvNV(target, pname, params); }
MUT_FORCE_INLINE void _mutMapParameterivNV(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutMapParameterivNV(target, pname, params); }
MUT_FORCE_INLINE void *_mutMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout) { return mutGLAPI.mutMapTexture2DINTEL(texture, level, access, stride, layout); }
MUT_FORCE_INLINE void _mutMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) { mutGLAPI.mutMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points); }
MUT_FORCE_INLINE void _mutMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) { mutGLAPI.mutMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points); }
MUT_FORCE_INLINE void _mutMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) { mutGLAPI.mutMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
MUT_FORCE_INLINE void _mutMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) { mutGLAPI.mutMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
MUT_FORCE_INLINE void _mutMaterialxOES(GLenum face, GLenum pname, GLfixed param) { mutGLAPI.mutMaterialxOES(face, pname, param); }
MUT_FORCE_INLINE void _mutMaterialxvOES(GLenum face, GLenum pname, const GLfixed *param) { mutGLAPI.mutMaterialxvOES(face, pname, param); }
MUT_FORCE_INLINE void _mutMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { mutGLAPI.mutMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar); }
MUT_FORCE_INLINE void _mutMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutMatrixIndexPointerARB(size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutMatrixIndexubvARB(GLint size, const GLubyte *indices) { mutGLAPI.mutMatrixIndexubvARB(size, indices); }
MUT_FORCE_INLINE void _mutMatrixIndexuivARB(GLint size, const GLuint *indices) { mutGLAPI.mutMatrixIndexuivARB(size, indices); }
MUT_FORCE_INLINE void _mutMatrixIndexusvARB(GLint size, const GLushort *indices) { mutGLAPI.mutMatrixIndexusvARB(size, indices); }
MUT_FORCE_INLINE void _mutMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m) { mutGLAPI.mutMatrixLoad3x2fNV(matrixMode, m); }
MUT_FORCE_INLINE void _mutMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m) { mutGLAPI.mutMatrixLoad3x3fNV(matrixMode, m); }
MUT_FORCE_INLINE void _mutMatrixLoadIdentityEXT(GLenum mode) { mutGLAPI.mutMatrixLoadIdentityEXT(mode); }
MUT_FORCE_INLINE void _mutMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) { mutGLAPI.mutMatrixLoadTranspose3x3fNV(matrixMode, m); }
MUT_FORCE_INLINE void _mutMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m) { mutGLAPI.mutMatrixLoadTransposedEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m) { mutGLAPI.mutMatrixLoadTransposefEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixLoaddEXT(GLenum mode, const GLdouble *m) { mutGLAPI.mutMatrixLoaddEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixLoadfEXT(GLenum mode, const GLfloat *m) { mutGLAPI.mutMatrixLoadfEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m) { mutGLAPI.mutMatrixMult3x2fNV(matrixMode, m); }
MUT_FORCE_INLINE void _mutMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m) { mutGLAPI.mutMatrixMult3x3fNV(matrixMode, m); }
MUT_FORCE_INLINE void _mutMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m) { mutGLAPI.mutMatrixMultTranspose3x3fNV(matrixMode, m); }
MUT_FORCE_INLINE void _mutMatrixMultTransposedEXT(GLenum mode, const GLdouble *m) { mutGLAPI.mutMatrixMultTransposedEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixMultTransposefEXT(GLenum mode, const GLfloat *m) { mutGLAPI.mutMatrixMultTransposefEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixMultdEXT(GLenum mode, const GLdouble *m) { mutGLAPI.mutMatrixMultdEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixMultfEXT(GLenum mode, const GLfloat *m) { mutGLAPI.mutMatrixMultfEXT(mode, m); }
MUT_FORCE_INLINE void _mutMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { mutGLAPI.mutMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar); }
MUT_FORCE_INLINE void _mutMatrixPopEXT(GLenum mode) { mutGLAPI.mutMatrixPopEXT(mode); }
MUT_FORCE_INLINE void _mutMatrixPushEXT(GLenum mode) { mutGLAPI.mutMatrixPushEXT(mode); }
MUT_FORCE_INLINE void _mutMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutMatrixRotatedEXT(mode, angle, x, y, z); }
MUT_FORCE_INLINE void _mutMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutMatrixRotatefEXT(mode, angle, x, y, z); }
MUT_FORCE_INLINE void _mutMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutMatrixScaledEXT(mode, x, y, z); }
MUT_FORCE_INLINE void _mutMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutMatrixScalefEXT(mode, x, y, z); }
MUT_FORCE_INLINE void _mutMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutMatrixTranslatedEXT(mode, x, y, z); }
MUT_FORCE_INLINE void _mutMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutMatrixTranslatefEXT(mode, x, y, z); }
MUT_FORCE_INLINE void _mutMaxShaderCompilerThreadsARB(GLuint count) { mutGLAPI.mutMaxShaderCompilerThreadsARB(count); }
MUT_FORCE_INLINE void _mutMemoryBarrier(GLbitfield barriers) { mutGLAPI.mutMemoryBarrier(barriers); }
MUT_FORCE_INLINE void _mutMemoryBarrierByRegion(GLbitfield barriers) { mutGLAPI.mutMemoryBarrierByRegion(barriers); }
MUT_FORCE_INLINE void _mutMemoryBarrierEXT(GLbitfield barriers) { mutGLAPI.mutMemoryBarrierEXT(barriers); }
MUT_FORCE_INLINE void _mutMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params) { mutGLAPI.mutMemoryObjectParameterivEXT(memoryObject, pname, params); }
MUT_FORCE_INLINE void _mutMinSampleShading(GLfloat value) { mutGLAPI.mutMinSampleShading(value); }
MUT_FORCE_INLINE void _mutMinSampleShadingARB(GLfloat value) { mutGLAPI.mutMinSampleShadingARB(value); }
MUT_FORCE_INLINE void _mutMinSampleShadingOES(GLfloat value) { mutGLAPI.mutMinSampleShadingOES(value); }
MUT_FORCE_INLINE void _mutMinmax(GLenum target, GLenum internalformat, GLboolean sink) { mutGLAPI.mutMinmax(target, internalformat, sink); }
MUT_FORCE_INLINE void _mutMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) { mutGLAPI.mutMinmaxEXT(target, internalformat, sink); }
MUT_FORCE_INLINE void _mutMultMatrixxOES(const GLfixed *m) { mutGLAPI.mutMultMatrixxOES(m); }
MUT_FORCE_INLINE void _mutMultTransposeMatrixd(const GLdouble *m) { mutGLAPI.mutMultTransposeMatrixd(m); }
MUT_FORCE_INLINE void _mutMultTransposeMatrixdARB(const GLdouble *m) { mutGLAPI.mutMultTransposeMatrixdARB(m); }
MUT_FORCE_INLINE void _mutMultTransposeMatrixf(const GLfloat *m) { mutGLAPI.mutMultTransposeMatrixf(m); }
MUT_FORCE_INLINE void _mutMultTransposeMatrixfARB(const GLfloat *m) { mutGLAPI.mutMultTransposeMatrixfARB(m); }
MUT_FORCE_INLINE void _mutMultTransposeMatrixxOES(const GLfixed *m) { mutGLAPI.mutMultTransposeMatrixxOES(m); }
MUT_FORCE_INLINE void _mutMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) { mutGLAPI.mutMultiDrawArrays(mode, first, count, drawcount); }
MUT_FORCE_INLINE void _mutMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) { mutGLAPI.mutMultiDrawArraysEXT(mode, first, count, primcount); }
MUT_FORCE_INLINE void _mutMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) { mutGLAPI.mutMultiDrawArraysIndirect(mode, indirect, drawcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawArraysIndirectAMD(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride) { mutGLAPI.mutMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { mutGLAPI.mutMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
MUT_FORCE_INLINE void _mutMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { mutGLAPI.mutMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount); }
MUT_FORCE_INLINE void _mutMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { mutGLAPI.mutMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawArraysIndirectEXT(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) { mutGLAPI.mutMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) { mutGLAPI.mutMultiDrawElementArrayAPPLE(mode, first, count, primcount); }
MUT_FORCE_INLINE void _mutMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei drawcount) { mutGLAPI.mutMultiDrawElements(mode, count, type, indices, drawcount); }
MUT_FORCE_INLINE void _mutMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei drawcount, const GLint *basevertex) { mutGLAPI.mutMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
MUT_FORCE_INLINE void _mutMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex) { mutGLAPI.mutMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex); }
MUT_FORCE_INLINE void _mutMultiDrawElementsBaseVertexOES(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, const GLint *basevertex) { mutGLAPI.mutMultiDrawElementsBaseVertexOES(mode, count, type, indices, primcount, basevertex); }
MUT_FORCE_INLINE void _mutMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount) { mutGLAPI.mutMultiDrawElementsEXT(mode, count, type, indices, primcount); }
MUT_FORCE_INLINE void _mutMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) { mutGLAPI.mutMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride) { mutGLAPI.mutMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { mutGLAPI.mutMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
MUT_FORCE_INLINE void _mutMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { mutGLAPI.mutMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount); }
MUT_FORCE_INLINE void _mutMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { mutGLAPI.mutMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) { mutGLAPI.mutMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride); }
MUT_FORCE_INLINE void _mutMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) { mutGLAPI.mutMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount); }
MUT_FORCE_INLINE void _mutMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) { mutGLAPI.mutMultiModeDrawArraysIBM(mode, first, count, primcount, modestride); }
MUT_FORCE_INLINE void _mutMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const void *const *indices, GLsizei primcount, GLint modestride) { mutGLAPI.mutMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride); }
MUT_FORCE_INLINE void _mutMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { mutGLAPI.mutMultiTexBufferEXT(texunit, target, internalformat, buffer); }
MUT_FORCE_INLINE void _mutMultiTexCoord1bOES(GLenum texture, GLbyte s) { mutGLAPI.mutMultiTexCoord1bOES(texture, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1bvOES(GLenum texture, const GLbyte *coords) { mutGLAPI.mutMultiTexCoord1bvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoord1d(GLenum target, GLdouble s) { mutGLAPI.mutMultiTexCoord1d(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1dARB(GLenum target, GLdouble s) { mutGLAPI.mutMultiTexCoord1dARB(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1dv(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord1dv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1dvARB(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord1dvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1f(GLenum target, GLfloat s) { mutGLAPI.mutMultiTexCoord1f(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1fARB(GLenum target, GLfloat s) { mutGLAPI.mutMultiTexCoord1fARB(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1fv(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord1fv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1fvARB(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord1fvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1hNV(GLenum target, GLhalfNV s) { mutGLAPI.mutMultiTexCoord1hNV(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v) { mutGLAPI.mutMultiTexCoord1hvNV(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1i(GLenum target, GLint s) { mutGLAPI.mutMultiTexCoord1i(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1iARB(GLenum target, GLint s) { mutGLAPI.mutMultiTexCoord1iARB(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1iv(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord1iv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1ivARB(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord1ivARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1s(GLenum target, GLshort s) { mutGLAPI.mutMultiTexCoord1s(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1sARB(GLenum target, GLshort s) { mutGLAPI.mutMultiTexCoord1sARB(target, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1sv(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord1sv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1svARB(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord1svARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord1xOES(GLenum texture, GLfixed s) { mutGLAPI.mutMultiTexCoord1xOES(texture, s); }
MUT_FORCE_INLINE void _mutMultiTexCoord1xvOES(GLenum texture, const GLfixed *coords) { mutGLAPI.mutMultiTexCoord1xvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) { mutGLAPI.mutMultiTexCoord2bOES(texture, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2bvOES(GLenum texture, const GLbyte *coords) { mutGLAPI.mutMultiTexCoord2bvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) { mutGLAPI.mutMultiTexCoord2d(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) { mutGLAPI.mutMultiTexCoord2dARB(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2dv(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord2dv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2dvARB(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord2dvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) { mutGLAPI.mutMultiTexCoord2f(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) { mutGLAPI.mutMultiTexCoord2fARB(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2fv(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord2fv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2fvARB(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord2fvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) { mutGLAPI.mutMultiTexCoord2hNV(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v) { mutGLAPI.mutMultiTexCoord2hvNV(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2i(GLenum target, GLint s, GLint t) { mutGLAPI.mutMultiTexCoord2i(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2iARB(GLenum target, GLint s, GLint t) { mutGLAPI.mutMultiTexCoord2iARB(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2iv(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord2iv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2ivARB(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord2ivARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2s(GLenum target, GLshort s, GLshort t) { mutGLAPI.mutMultiTexCoord2s(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) { mutGLAPI.mutMultiTexCoord2sARB(target, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2sv(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord2sv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2svARB(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord2svARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) { mutGLAPI.mutMultiTexCoord2xOES(texture, s, t); }
MUT_FORCE_INLINE void _mutMultiTexCoord2xvOES(GLenum texture, const GLfixed *coords) { mutGLAPI.mutMultiTexCoord2xvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) { mutGLAPI.mutMultiTexCoord3bOES(texture, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3bvOES(GLenum texture, const GLbyte *coords) { mutGLAPI.mutMultiTexCoord3bvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) { mutGLAPI.mutMultiTexCoord3d(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) { mutGLAPI.mutMultiTexCoord3dARB(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3dv(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord3dv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3dvARB(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord3dvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) { mutGLAPI.mutMultiTexCoord3f(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) { mutGLAPI.mutMultiTexCoord3fARB(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3fv(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord3fv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3fvARB(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord3fvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { mutGLAPI.mutMultiTexCoord3hNV(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v) { mutGLAPI.mutMultiTexCoord3hvNV(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) { mutGLAPI.mutMultiTexCoord3i(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) { mutGLAPI.mutMultiTexCoord3iARB(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3iv(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord3iv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3ivARB(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord3ivARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) { mutGLAPI.mutMultiTexCoord3s(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) { mutGLAPI.mutMultiTexCoord3sARB(target, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3sv(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord3sv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3svARB(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord3svARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) { mutGLAPI.mutMultiTexCoord3xOES(texture, s, t, r); }
MUT_FORCE_INLINE void _mutMultiTexCoord3xvOES(GLenum texture, const GLfixed *coords) { mutGLAPI.mutMultiTexCoord3xvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { mutGLAPI.mutMultiTexCoord4bOES(texture, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4bvOES(GLenum texture, const GLbyte *coords) { mutGLAPI.mutMultiTexCoord4bvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { mutGLAPI.mutMultiTexCoord4d(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { mutGLAPI.mutMultiTexCoord4dARB(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4dv(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord4dv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4dvARB(GLenum target, const GLdouble *v) { mutGLAPI.mutMultiTexCoord4dvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { mutGLAPI.mutMultiTexCoord4f(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { mutGLAPI.mutMultiTexCoord4fARB(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4fv(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord4fv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4fvARB(GLenum target, const GLfloat *v) { mutGLAPI.mutMultiTexCoord4fvARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { mutGLAPI.mutMultiTexCoord4hNV(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v) { mutGLAPI.mutMultiTexCoord4hvNV(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) { mutGLAPI.mutMultiTexCoord4i(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) { mutGLAPI.mutMultiTexCoord4iARB(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4iv(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord4iv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4ivARB(GLenum target, const GLint *v) { mutGLAPI.mutMultiTexCoord4ivARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { mutGLAPI.mutMultiTexCoord4s(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { mutGLAPI.mutMultiTexCoord4sARB(target, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4sv(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord4sv(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4svARB(GLenum target, const GLshort *v) { mutGLAPI.mutMultiTexCoord4svARB(target, v); }
MUT_FORCE_INLINE void _mutMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { mutGLAPI.mutMultiTexCoord4xOES(texture, s, t, r, q); }
MUT_FORCE_INLINE void _mutMultiTexCoord4xvOES(GLenum texture, const GLfixed *coords) { mutGLAPI.mutMultiTexCoord4xvOES(texture, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) { mutGLAPI.mutMultiTexCoordP1ui(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) { mutGLAPI.mutMultiTexCoordP1uiv(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) { mutGLAPI.mutMultiTexCoordP2ui(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) { mutGLAPI.mutMultiTexCoordP2uiv(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) { mutGLAPI.mutMultiTexCoordP3ui(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) { mutGLAPI.mutMultiTexCoordP3uiv(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) { mutGLAPI.mutMultiTexCoordP4ui(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) { mutGLAPI.mutMultiTexCoordP4uiv(texture, type, coords); }
MUT_FORCE_INLINE void _mutMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutMultiTexCoordPointerEXT(texunit, size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { mutGLAPI.mutMultiTexEnvfEXT(texunit, target, pname, param); }
MUT_FORCE_INLINE void _mutMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutMultiTexEnvfvEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { mutGLAPI.mutMultiTexEnviEXT(texunit, target, pname, param); }
MUT_FORCE_INLINE void _mutMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutMultiTexEnvivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { mutGLAPI.mutMultiTexGendEXT(texunit, coord, pname, param); }
MUT_FORCE_INLINE void _mutMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) { mutGLAPI.mutMultiTexGendvEXT(texunit, coord, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { mutGLAPI.mutMultiTexGenfEXT(texunit, coord, pname, param); }
MUT_FORCE_INLINE void _mutMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) { mutGLAPI.mutMultiTexGenfvEXT(texunit, coord, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) { mutGLAPI.mutMultiTexGeniEXT(texunit, coord, pname, param); }
MUT_FORCE_INLINE void _mutMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) { mutGLAPI.mutMultiTexGenivEXT(texunit, coord, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutMultiTexParameterIivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) { mutGLAPI.mutMultiTexParameterIuivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { mutGLAPI.mutMultiTexParameterfEXT(texunit, target, pname, param); }
MUT_FORCE_INLINE void _mutMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutMultiTexParameterfvEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { mutGLAPI.mutMultiTexParameteriEXT(texunit, target, pname, param); }
MUT_FORCE_INLINE void _mutMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutMultiTexParameterivEXT(texunit, target, pname, params); }
MUT_FORCE_INLINE void _mutMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) { mutGLAPI.mutMultiTexRenderbufferEXT(texunit, target, renderbuffer); }
MUT_FORCE_INLINE void _mutMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels); }
MUT_FORCE_INLINE void _mutMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); }
MUT_FORCE_INLINE void _mutMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
MUT_FORCE_INLINE void _mutMulticastBarrierNV(void) { mutGLAPI.mutMulticastBarrierNV(); }
MUT_FORCE_INLINE void _mutMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { mutGLAPI.mutMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
MUT_FORCE_INLINE void _mutMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data) { mutGLAPI.mutMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data); }
MUT_FORCE_INLINE void _mutMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { mutGLAPI.mutMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); }
MUT_FORCE_INLINE void _mutMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { mutGLAPI.mutMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
MUT_FORCE_INLINE void _mutMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) { mutGLAPI.mutMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v); }
MUT_FORCE_INLINE void _mutMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 *params) { mutGLAPI.mutMulticastGetQueryObjecti64vNV(gpu, id, pname, params); }
MUT_FORCE_INLINE void _mutMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint *params) { mutGLAPI.mutMulticastGetQueryObjectivNV(gpu, id, pname, params); }
MUT_FORCE_INLINE void _mutMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params) { mutGLAPI.mutMulticastGetQueryObjectui64vNV(gpu, id, pname, params); }
MUT_FORCE_INLINE void _mutMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint *params) { mutGLAPI.mutMulticastGetQueryObjectuivNV(gpu, id, pname, params); }
MUT_FORCE_INLINE void _mutMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) { mutGLAPI.mutMulticastWaitSyncNV(signalGpu, waitGpuMask); }
MUT_FORCE_INLINE void _mutNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) { mutGLAPI.mutNamedBufferData(buffer, size, data, usage); }
MUT_FORCE_INLINE void _mutNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) { mutGLAPI.mutNamedBufferDataEXT(buffer, size, data, usage); }
MUT_FORCE_INLINE void _mutNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { mutGLAPI.mutNamedBufferPageCommitmentARB(buffer, offset, size, commit); }
MUT_FORCE_INLINE void _mutNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { mutGLAPI.mutNamedBufferPageCommitmentEXT(buffer, offset, size, commit); }
MUT_FORCE_INLINE void _mutNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) { mutGLAPI.mutNamedBufferStorage(buffer, size, data, flags); }
MUT_FORCE_INLINE void _mutNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) { mutGLAPI.mutNamedBufferStorageEXT(buffer, size, data, flags); }
MUT_FORCE_INLINE void _mutNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { mutGLAPI.mutNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags); }
MUT_FORCE_INLINE void _mutNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { mutGLAPI.mutNamedBufferStorageMemEXT(buffer, size, memory, offset); }
MUT_FORCE_INLINE void _mutNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) { mutGLAPI.mutNamedBufferSubData(buffer, offset, size, data); }
MUT_FORCE_INLINE void _mutNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) { mutGLAPI.mutNamedBufferSubDataEXT(buffer, offset, size, data); }
MUT_FORCE_INLINE void _mutNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { mutGLAPI.mutNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size); }
MUT_FORCE_INLINE void _mutNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) { mutGLAPI.mutNamedFramebufferDrawBuffer(framebuffer, buf); }
MUT_FORCE_INLINE void _mutNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs) { mutGLAPI.mutNamedFramebufferDrawBuffers(framebuffer, n, bufs); }
MUT_FORCE_INLINE void _mutNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) { mutGLAPI.mutNamedFramebufferParameteri(framebuffer, pname, param); }
MUT_FORCE_INLINE void _mutNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) { mutGLAPI.mutNamedFramebufferParameteriEXT(framebuffer, pname, param); }
MUT_FORCE_INLINE void _mutNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) { mutGLAPI.mutNamedFramebufferReadBuffer(framebuffer, src); }
MUT_FORCE_INLINE void _mutNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { mutGLAPI.mutNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
MUT_FORCE_INLINE void _mutNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { mutGLAPI.mutNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer); }
MUT_FORCE_INLINE void _mutNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) { mutGLAPI.mutNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v); }
MUT_FORCE_INLINE void _mutNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v) { mutGLAPI.mutNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v); }
MUT_FORCE_INLINE void _mutNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values) { mutGLAPI.mutNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values); }
MUT_FORCE_INLINE void _mutNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { mutGLAPI.mutNamedFramebufferTexture(framebuffer, attachment, texture, level); }
MUT_FORCE_INLINE void _mutNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { mutGLAPI.mutNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level); }
MUT_FORCE_INLINE void _mutNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { mutGLAPI.mutNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level); }
MUT_FORCE_INLINE void _mutNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { mutGLAPI.mutNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset); }
MUT_FORCE_INLINE void _mutNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { mutGLAPI.mutNamedFramebufferTextureEXT(framebuffer, attachment, texture, level); }
MUT_FORCE_INLINE void _mutNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { mutGLAPI.mutNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face); }
MUT_FORCE_INLINE void _mutNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { mutGLAPI.mutNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
MUT_FORCE_INLINE void _mutNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { mutGLAPI.mutNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params) { mutGLAPI.mutNamedProgramLocalParameter4dvEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params) { mutGLAPI.mutNamedProgramLocalParameter4fvEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { mutGLAPI.mutNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params) { mutGLAPI.mutNamedProgramLocalParameterI4ivEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { mutGLAPI.mutNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params) { mutGLAPI.mutNamedProgramLocalParameterI4uivEXT(program, target, index, params); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) { mutGLAPI.mutNamedProgramLocalParameters4fvEXT(program, target, index, count, params); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) { mutGLAPI.mutNamedProgramLocalParametersI4ivEXT(program, target, index, count, params); }
MUT_FORCE_INLINE void _mutNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) { mutGLAPI.mutNamedProgramLocalParametersI4uivEXT(program, target, index, count, params); }
MUT_FORCE_INLINE void _mutNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string) { mutGLAPI.mutNamedProgramStringEXT(program, target, format, len, string); }
MUT_FORCE_INLINE void _mutNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutNamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
MUT_FORCE_INLINE void _mutNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height); }
MUT_FORCE_INLINE void _mutNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) { mutGLAPI.mutNamedStringARB(type, namelen, name, stringlen, string); }
MUT_FORCE_INLINE GLuint _mutNewBufferRegion(GLenum region) { return mutGLAPI.mutNewBufferRegion(region); }
MUT_FORCE_INLINE GLuint _mutNewObjectBufferATI(GLsizei size, const void *pointer, GLenum usage) { return mutGLAPI.mutNewObjectBufferATI(size, pointer, usage); }
MUT_FORCE_INLINE void _mutNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutNormal3fVertex3fSUN(nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v) { mutGLAPI.mutNormal3fVertex3fvSUN(n, v); }
MUT_FORCE_INLINE void _mutNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { mutGLAPI.mutNormal3hNV(nx, ny, nz); }
MUT_FORCE_INLINE void _mutNormal3hvNV(const GLhalfNV *v) { mutGLAPI.mutNormal3hvNV(v); }
MUT_FORCE_INLINE void _mutNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) { mutGLAPI.mutNormal3xOES(nx, ny, nz); }
MUT_FORCE_INLINE void _mutNormal3xvOES(const GLfixed *coords) { mutGLAPI.mutNormal3xvOES(coords); }
MUT_FORCE_INLINE void _mutNormalFormatNV(GLenum type, GLsizei stride) { mutGLAPI.mutNormalFormatNV(type, stride); }
MUT_FORCE_INLINE void _mutNormalP3ui(GLenum type, GLuint coords) { mutGLAPI.mutNormalP3ui(type, coords); }
MUT_FORCE_INLINE void _mutNormalP3uiv(GLenum type, const GLuint *coords) { mutGLAPI.mutNormalP3uiv(type, coords); }
MUT_FORCE_INLINE void _mutNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer) { mutGLAPI.mutNormalPointerEXT(type, stride, count, pointer); }
MUT_FORCE_INLINE void _mutNormalPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride) { mutGLAPI.mutNormalPointerListIBM(type, stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutNormalPointervINTEL(GLenum type, const void **pointer) { mutGLAPI.mutNormalPointervINTEL(type, pointer); }
MUT_FORCE_INLINE void _mutNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { mutGLAPI.mutNormalStream3bATI(stream, nx, ny, nz); }
MUT_FORCE_INLINE void _mutNormalStream3bvATI(GLenum stream, const GLbyte *coords) { mutGLAPI.mutNormalStream3bvATI(stream, coords); }
MUT_FORCE_INLINE void _mutNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { mutGLAPI.mutNormalStream3dATI(stream, nx, ny, nz); }
MUT_FORCE_INLINE void _mutNormalStream3dvATI(GLenum stream, const GLdouble *coords) { mutGLAPI.mutNormalStream3dvATI(stream, coords); }
MUT_FORCE_INLINE void _mutNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { mutGLAPI.mutNormalStream3fATI(stream, nx, ny, nz); }
MUT_FORCE_INLINE void _mutNormalStream3fvATI(GLenum stream, const GLfloat *coords) { mutGLAPI.mutNormalStream3fvATI(stream, coords); }
MUT_FORCE_INLINE void _mutNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) { mutGLAPI.mutNormalStream3iATI(stream, nx, ny, nz); }
MUT_FORCE_INLINE void _mutNormalStream3ivATI(GLenum stream, const GLint *coords) { mutGLAPI.mutNormalStream3ivATI(stream, coords); }
MUT_FORCE_INLINE void _mutNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) { mutGLAPI.mutNormalStream3sATI(stream, nx, ny, nz); }
MUT_FORCE_INLINE void _mutNormalStream3svATI(GLenum stream, const GLshort *coords) { mutGLAPI.mutNormalStream3svATI(stream, coords); }
MUT_FORCE_INLINE void _mutObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) { mutGLAPI.mutObjectLabel(identifier, name, length, label); }
MUT_FORCE_INLINE void _mutObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) { mutGLAPI.mutObjectLabelKHR(identifier, name, length, label); }
MUT_FORCE_INLINE void _mutObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) { mutGLAPI.mutObjectPtrLabel(ptr, length, label); }
MUT_FORCE_INLINE void _mutObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label) { mutGLAPI.mutObjectPtrLabelKHR(ptr, length, label); }
MUT_FORCE_INLINE GLenum _mutObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return mutGLAPI.mutObjectPurgeableAPPLE(objectType, name, option); }
MUT_FORCE_INLINE GLenum _mutObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return mutGLAPI.mutObjectUnpurgeableAPPLE(objectType, name, option); }
MUT_FORCE_INLINE void _mutOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { mutGLAPI.mutOrthofOES(l, r, b, t, n, f); }
MUT_FORCE_INLINE void _mutOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { mutGLAPI.mutOrthoxOES(l, r, b, t, n, f); }
MUT_FORCE_INLINE void _mutPNTrianglesfATI(GLenum pname, GLfloat param) { mutGLAPI.mutPNTrianglesfATI(pname, param); }
MUT_FORCE_INLINE void _mutPNTrianglesiATI(GLenum pname, GLint param) { mutGLAPI.mutPNTrianglesiATI(pname, param); }
MUT_FORCE_INLINE void _mutPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) { mutGLAPI.mutPassTexCoordATI(dst, coord, swizzle); }
MUT_FORCE_INLINE void _mutPassThroughxOES(GLfixed token) { mutGLAPI.mutPassThroughxOES(token); }
MUT_FORCE_INLINE void _mutPatchParameterfv(GLenum pname, const GLfloat *values) { mutGLAPI.mutPatchParameterfv(pname, values); }
MUT_FORCE_INLINE void _mutPatchParameteri(GLenum pname, GLint value) { mutGLAPI.mutPatchParameteri(pname, value); }
MUT_FORCE_INLINE void _mutPatchParameteriEXT(GLenum pname, GLint value) { mutGLAPI.mutPatchParameteriEXT(pname, value); }
MUT_FORCE_INLINE void _mutPatchParameteriOES(GLenum pname, GLint value) { mutGLAPI.mutPatchParameteriOES(pname, value); }
MUT_FORCE_INLINE void _mutPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) { mutGLAPI.mutPathColorGenNV(color, genMode, colorFormat, coeffs); }
MUT_FORCE_INLINE void _mutPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) { mutGLAPI.mutPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords); }
MUT_FORCE_INLINE void _mutPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords) { mutGLAPI.mutPathCoordsNV(path, numCoords, coordType, coords); }
MUT_FORCE_INLINE void _mutPathCoverDepthFuncNV(GLenum func) { mutGLAPI.mutPathCoverDepthFuncNV(func); }
MUT_FORCE_INLINE void _mutPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray) { mutGLAPI.mutPathDashArrayNV(path, dashCount, dashArray); }
MUT_FORCE_INLINE void _mutPathFogGenNV(GLenum genMode) { mutGLAPI.mutPathFogGenNV(genMode); }
MUT_FORCE_INLINE GLenum _mutPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return mutGLAPI.mutPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
MUT_FORCE_INLINE GLenum _mutPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { return mutGLAPI.mutPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); }
MUT_FORCE_INLINE void _mutPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { mutGLAPI.mutPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); }
MUT_FORCE_INLINE void _mutPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { mutGLAPI.mutPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); }
MUT_FORCE_INLINE GLenum _mutPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return mutGLAPI.mutPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
MUT_FORCE_INLINE void _mutPathParameterfNV(GLuint path, GLenum pname, GLfloat value) { mutGLAPI.mutPathParameterfNV(path, pname, value); }
MUT_FORCE_INLINE void _mutPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value) { mutGLAPI.mutPathParameterfvNV(path, pname, value); }
MUT_FORCE_INLINE void _mutPathParameteriNV(GLuint path, GLenum pname, GLint value) { mutGLAPI.mutPathParameteriNV(path, pname, value); }
MUT_FORCE_INLINE void _mutPathParameterivNV(GLuint path, GLenum pname, const GLint *value) { mutGLAPI.mutPathParameterivNV(path, pname, value); }
MUT_FORCE_INLINE void _mutPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) { mutGLAPI.mutPathStencilDepthOffsetNV(factor, units); }
MUT_FORCE_INLINE void _mutPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) { mutGLAPI.mutPathStencilFuncNV(func, ref, mask); }
MUT_FORCE_INLINE void _mutPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString) { mutGLAPI.mutPathStringNV(path, format, length, pathString); }
MUT_FORCE_INLINE void _mutPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords) { mutGLAPI.mutPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); }
MUT_FORCE_INLINE void _mutPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords) { mutGLAPI.mutPathSubCoordsNV(path, coordStart, numCoords, coordType, coords); }
MUT_FORCE_INLINE void _mutPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) { mutGLAPI.mutPathTexGenNV(texCoordSet, genMode, components, coeffs); }
MUT_FORCE_INLINE void _mutPauseTransformFeedback(void) { mutGLAPI.mutPauseTransformFeedback(); }
MUT_FORCE_INLINE void _mutPauseTransformFeedbackNV(void) { mutGLAPI.mutPauseTransformFeedbackNV(); }
MUT_FORCE_INLINE void _mutPixelDataRangeNV(GLenum target, GLsizei length, const void *pointer) { mutGLAPI.mutPixelDataRangeNV(target, length, pointer); }
MUT_FORCE_INLINE void _mutPixelMapx(GLenum map, GLint size, const GLfixed *values) { mutGLAPI.mutPixelMapx(map, size, values); }
MUT_FORCE_INLINE void _mutPixelStoref(GLenum pname, GLfloat param) { mutGLAPI.mutPixelStoref(pname, param); }
MUT_FORCE_INLINE void _mutPixelStorei(GLenum pname, GLint param) { mutGLAPI.mutPixelStorei(pname, param); }
MUT_FORCE_INLINE void _mutPixelStorex(GLenum pname, GLfixed param) { mutGLAPI.mutPixelStorex(pname, param); }
MUT_FORCE_INLINE void _mutPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) { mutGLAPI.mutPixelTexGenParameterfSGIS(pname, param); }
MUT_FORCE_INLINE void _mutPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params) { mutGLAPI.mutPixelTexGenParameterfvSGIS(pname, params); }
MUT_FORCE_INLINE void _mutPixelTexGenParameteriSGIS(GLenum pname, GLint param) { mutGLAPI.mutPixelTexGenParameteriSGIS(pname, param); }
MUT_FORCE_INLINE void _mutPixelTexGenParameterivSGIS(GLenum pname, const GLint *params) { mutGLAPI.mutPixelTexGenParameterivSGIS(pname, params); }
MUT_FORCE_INLINE void _mutPixelTexGenSGIX(GLenum mode) { mutGLAPI.mutPixelTexGenSGIX(mode); }
MUT_FORCE_INLINE void _mutPixelTransferxOES(GLenum pname, GLfixed param) { mutGLAPI.mutPixelTransferxOES(pname, param); }
MUT_FORCE_INLINE void _mutPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) { mutGLAPI.mutPixelTransformParameterfEXT(target, pname, param); }
MUT_FORCE_INLINE void _mutPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutPixelTransformParameterfvEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) { mutGLAPI.mutPixelTransformParameteriEXT(target, pname, param); }
MUT_FORCE_INLINE void _mutPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutPixelTransformParameterivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) { mutGLAPI.mutPixelZoomxOES(xfactor, yfactor); }
MUT_FORCE_INLINE GLboolean _mutPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) { return mutGLAPI.mutPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); }
MUT_FORCE_INLINE void _mutPointParameterf(GLenum pname, GLfloat param) { mutGLAPI.mutPointParameterf(pname, param); }
MUT_FORCE_INLINE void _mutPointParameterfARB(GLenum pname, GLfloat param) { mutGLAPI.mutPointParameterfARB(pname, param); }
MUT_FORCE_INLINE void _mutPointParameterfEXT(GLenum pname, GLfloat param) { mutGLAPI.mutPointParameterfEXT(pname, param); }
MUT_FORCE_INLINE void _mutPointParameterfSGIS(GLenum pname, GLfloat param) { mutGLAPI.mutPointParameterfSGIS(pname, param); }
MUT_FORCE_INLINE void _mutPointParameterfv(GLenum pname, const GLfloat *params) { mutGLAPI.mutPointParameterfv(pname, params); }
MUT_FORCE_INLINE void _mutPointParameterfvARB(GLenum pname, const GLfloat *params) { mutGLAPI.mutPointParameterfvARB(pname, params); }
MUT_FORCE_INLINE void _mutPointParameterfvEXT(GLenum pname, const GLfloat *params) { mutGLAPI.mutPointParameterfvEXT(pname, params); }
MUT_FORCE_INLINE void _mutPointParameterfvSGIS(GLenum pname, const GLfloat *params) { mutGLAPI.mutPointParameterfvSGIS(pname, params); }
MUT_FORCE_INLINE void _mutPointParameteri(GLenum pname, GLint param) { mutGLAPI.mutPointParameteri(pname, param); }
MUT_FORCE_INLINE void _mutPointParameteriNV(GLenum pname, GLint param) { mutGLAPI.mutPointParameteriNV(pname, param); }
MUT_FORCE_INLINE void _mutPointParameteriv(GLenum pname, const GLint *params) { mutGLAPI.mutPointParameteriv(pname, params); }
MUT_FORCE_INLINE void _mutPointParameterivNV(GLenum pname, const GLint *params) { mutGLAPI.mutPointParameterivNV(pname, params); }
MUT_FORCE_INLINE void _mutPointParameterxvOES(GLenum pname, const GLfixed *params) { mutGLAPI.mutPointParameterxvOES(pname, params); }
MUT_FORCE_INLINE void _mutPointSize(GLfloat size) { mutGLAPI.mutPointSize(size); }
MUT_FORCE_INLINE void _mutPointSizexOES(GLfixed size) { mutGLAPI.mutPointSizexOES(size); }
MUT_FORCE_INLINE GLint _mutPollAsyncSGIX(GLuint *markerp) { return mutGLAPI.mutPollAsyncSGIX(markerp); }
MUT_FORCE_INLINE GLint _mutPollInstrumentsSGIX(GLint *marker_p) { return mutGLAPI.mutPollInstrumentsSGIX(marker_p); }
MUT_FORCE_INLINE void _mutPolygonMode(GLenum face, GLenum mode) { mutGLAPI.mutPolygonMode(face, mode); }
MUT_FORCE_INLINE void _mutPolygonModeNV(GLenum face, GLenum mode) { mutGLAPI.mutPolygonModeNV(face, mode); }
MUT_FORCE_INLINE void _mutPolygonOffset(GLfloat factor, GLfloat units) { mutGLAPI.mutPolygonOffset(factor, units); }
MUT_FORCE_INLINE void _mutPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) { mutGLAPI.mutPolygonOffsetClampEXT(factor, units, clamp); }
MUT_FORCE_INLINE void _mutPolygonOffsetEXT(GLfloat factor, GLfloat bias) { mutGLAPI.mutPolygonOffsetEXT(factor, bias); }
MUT_FORCE_INLINE void _mutPolygonOffsetxOES(GLfixed factor, GLfixed units) { mutGLAPI.mutPolygonOffsetxOES(factor, units); }
MUT_FORCE_INLINE void _mutPopDebugGroup(void) { mutGLAPI.mutPopDebugGroup(); }
MUT_FORCE_INLINE void _mutPopDebugGroupKHR(void) { mutGLAPI.mutPopDebugGroupKHR(); }
MUT_FORCE_INLINE void _mutPopGroupMarkerEXT(void) { mutGLAPI.mutPopGroupMarkerEXT(); }
MUT_FORCE_INLINE void _mutPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { mutGLAPI.mutPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); }
MUT_FORCE_INLINE void _mutPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { mutGLAPI.mutPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); }
MUT_FORCE_INLINE void _mutPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { mutGLAPI.mutPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
MUT_FORCE_INLINE void _mutPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { mutGLAPI.mutPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
MUT_FORCE_INLINE void _mutPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { mutGLAPI.mutPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
MUT_FORCE_INLINE void _mutPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { mutGLAPI.mutPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
MUT_FORCE_INLINE void _mutPrimitiveRestartIndex(GLuint index) { mutGLAPI.mutPrimitiveRestartIndex(index); }
MUT_FORCE_INLINE void _mutPrimitiveRestartIndexNV(GLuint index) { mutGLAPI.mutPrimitiveRestartIndexNV(index); }
MUT_FORCE_INLINE void _mutPrimitiveRestartNV(void) { mutGLAPI.mutPrimitiveRestartNV(); }
MUT_FORCE_INLINE void _mutPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities) { mutGLAPI.mutPrioritizeTexturesEXT(n, textures, priorities); }
MUT_FORCE_INLINE void _mutPrioritizeTexturesxOES(GLsizei n, const GLuint *textures, const GLfixed *priorities) { mutGLAPI.mutPrioritizeTexturesxOES(n, textures, priorities); }
MUT_FORCE_INLINE void _mutProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) { mutGLAPI.mutProgramBinary(program, binaryFormat, binary, length); }
MUT_FORCE_INLINE void _mutProgramBinaryOES(GLuint program, GLenum binaryFormat, const void *binary, GLint length) { mutGLAPI.mutProgramBinaryOES(program, binaryFormat, binary, length); }
MUT_FORCE_INLINE void _mutProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params) { mutGLAPI.mutProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params); }
MUT_FORCE_INLINE void _mutProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params) { mutGLAPI.mutProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params); }
MUT_FORCE_INLINE void _mutProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params) { mutGLAPI.mutProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params); }
MUT_FORCE_INLINE void _mutProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutProgramEnvParameter4dARB(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) { mutGLAPI.mutProgramEnvParameter4dvARB(target, index, params); }
MUT_FORCE_INLINE void _mutProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutProgramEnvParameter4fARB(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) { mutGLAPI.mutProgramEnvParameter4fvARB(target, index, params); }
MUT_FORCE_INLINE void _mutProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { mutGLAPI.mutProgramEnvParameterI4iNV(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params) { mutGLAPI.mutProgramEnvParameterI4ivNV(target, index, params); }
MUT_FORCE_INLINE void _mutProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { mutGLAPI.mutProgramEnvParameterI4uiNV(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) { mutGLAPI.mutProgramEnvParameterI4uivNV(target, index, params); }
MUT_FORCE_INLINE void _mutProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) { mutGLAPI.mutProgramEnvParameters4fvEXT(target, index, count, params); }
MUT_FORCE_INLINE void _mutProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) { mutGLAPI.mutProgramEnvParametersI4ivNV(target, index, count, params); }
MUT_FORCE_INLINE void _mutProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) { mutGLAPI.mutProgramEnvParametersI4uivNV(target, index, count, params); }
MUT_FORCE_INLINE void _mutProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutProgramLocalParameter4dARB(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) { mutGLAPI.mutProgramLocalParameter4dvARB(target, index, params); }
MUT_FORCE_INLINE void _mutProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutProgramLocalParameter4fARB(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) { mutGLAPI.mutProgramLocalParameter4fvARB(target, index, params); }
MUT_FORCE_INLINE void _mutProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { mutGLAPI.mutProgramLocalParameterI4iNV(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params) { mutGLAPI.mutProgramLocalParameterI4ivNV(target, index, params); }
MUT_FORCE_INLINE void _mutProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { mutGLAPI.mutProgramLocalParameterI4uiNV(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) { mutGLAPI.mutProgramLocalParameterI4uivNV(target, index, params); }
MUT_FORCE_INLINE void _mutProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) { mutGLAPI.mutProgramLocalParameters4fvEXT(target, index, count, params); }
MUT_FORCE_INLINE void _mutProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) { mutGLAPI.mutProgramLocalParametersI4ivNV(target, index, count, params); }
MUT_FORCE_INLINE void _mutProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) { mutGLAPI.mutProgramLocalParametersI4uivNV(target, index, count, params); }
MUT_FORCE_INLINE void _mutProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutProgramNamedParameter4dNV(id, len, name, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) { mutGLAPI.mutProgramNamedParameter4dvNV(id, len, name, v); }
MUT_FORCE_INLINE void _mutProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutProgramNamedParameter4fNV(id, len, name, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) { mutGLAPI.mutProgramNamedParameter4fvNV(id, len, name, v); }
MUT_FORCE_INLINE void _mutProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutProgramParameter4dNV(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v) { mutGLAPI.mutProgramParameter4dvNV(target, index, v); }
MUT_FORCE_INLINE void _mutProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutProgramParameter4fNV(target, index, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v) { mutGLAPI.mutProgramParameter4fvNV(target, index, v); }
MUT_FORCE_INLINE void _mutProgramParameteri(GLuint program, GLenum pname, GLint value) { mutGLAPI.mutProgramParameteri(program, pname, value); }
MUT_FORCE_INLINE void _mutProgramParameteriARB(GLuint program, GLenum pname, GLint value) { mutGLAPI.mutProgramParameteriARB(program, pname, value); }
MUT_FORCE_INLINE void _mutProgramParameteriEXT(GLuint program, GLenum pname, GLint value) { mutGLAPI.mutProgramParameteriEXT(program, pname, value); }
MUT_FORCE_INLINE void _mutProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v) { mutGLAPI.mutProgramParameters4dvNV(target, index, count, v); }
MUT_FORCE_INLINE void _mutProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v) { mutGLAPI.mutProgramParameters4fvNV(target, index, count, v); }
MUT_FORCE_INLINE void _mutProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs) { mutGLAPI.mutProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs); }
MUT_FORCE_INLINE void _mutProgramStringARB(GLenum target, GLenum format, GLsizei len, const void *string) { mutGLAPI.mutProgramStringARB(target, format, len, string); }
MUT_FORCE_INLINE void _mutProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params) { mutGLAPI.mutProgramSubroutineParametersuivNV(target, count, params); }
MUT_FORCE_INLINE void _mutProgramUniform1d(GLuint program, GLint location, GLdouble v0) { mutGLAPI.mutProgramUniform1d(program, location, v0); }
MUT_FORCE_INLINE void _mutProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) { mutGLAPI.mutProgramUniform1dEXT(program, location, x); }
MUT_FORCE_INLINE void _mutProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform1dv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform1dvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1f(GLuint program, GLint location, GLfloat v0) { mutGLAPI.mutProgramUniform1f(program, location, v0); }
MUT_FORCE_INLINE void _mutProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) { mutGLAPI.mutProgramUniform1fEXT(program, location, v0); }
MUT_FORCE_INLINE void _mutProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform1fv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform1fvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1i(GLuint program, GLint location, GLint v0) { mutGLAPI.mutProgramUniform1i(program, location, v0); }
MUT_FORCE_INLINE void _mutProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) { mutGLAPI.mutProgramUniform1i64ARB(program, location, x); }
MUT_FORCE_INLINE void _mutProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) { mutGLAPI.mutProgramUniform1i64NV(program, location, x); }
MUT_FORCE_INLINE void _mutProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutProgramUniform1i64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutProgramUniform1i64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1iEXT(GLuint program, GLint location, GLint v0) { mutGLAPI.mutProgramUniform1iEXT(program, location, v0); }
MUT_FORCE_INLINE void _mutProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform1iv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform1ivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1ui(GLuint program, GLint location, GLuint v0) { mutGLAPI.mutProgramUniform1ui(program, location, v0); }
MUT_FORCE_INLINE void _mutProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) { mutGLAPI.mutProgramUniform1ui64ARB(program, location, x); }
MUT_FORCE_INLINE void _mutProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) { mutGLAPI.mutProgramUniform1ui64NV(program, location, x); }
MUT_FORCE_INLINE void _mutProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutProgramUniform1ui64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutProgramUniform1ui64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) { mutGLAPI.mutProgramUniform1uiEXT(program, location, v0); }
MUT_FORCE_INLINE void _mutProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform1uiv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform1uivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) { mutGLAPI.mutProgramUniform2d(program, location, v0, v1); }
MUT_FORCE_INLINE void _mutProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) { mutGLAPI.mutProgramUniform2dEXT(program, location, x, y); }
MUT_FORCE_INLINE void _mutProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform2dv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform2dvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) { mutGLAPI.mutProgramUniform2f(program, location, v0, v1); }
MUT_FORCE_INLINE void _mutProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) { mutGLAPI.mutProgramUniform2fEXT(program, location, v0, v1); }
MUT_FORCE_INLINE void _mutProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform2fv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform2fvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) { mutGLAPI.mutProgramUniform2i(program, location, v0, v1); }
MUT_FORCE_INLINE void _mutProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) { mutGLAPI.mutProgramUniform2i64ARB(program, location, x, y); }
MUT_FORCE_INLINE void _mutProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { mutGLAPI.mutProgramUniform2i64NV(program, location, x, y); }
MUT_FORCE_INLINE void _mutProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutProgramUniform2i64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutProgramUniform2i64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) { mutGLAPI.mutProgramUniform2iEXT(program, location, v0, v1); }
MUT_FORCE_INLINE void _mutProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform2iv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform2ivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) { mutGLAPI.mutProgramUniform2ui(program, location, v0, v1); }
MUT_FORCE_INLINE void _mutProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) { mutGLAPI.mutProgramUniform2ui64ARB(program, location, x, y); }
MUT_FORCE_INLINE void _mutProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { mutGLAPI.mutProgramUniform2ui64NV(program, location, x, y); }
MUT_FORCE_INLINE void _mutProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutProgramUniform2ui64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutProgramUniform2ui64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) { mutGLAPI.mutProgramUniform2uiEXT(program, location, v0, v1); }
MUT_FORCE_INLINE void _mutProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform2uiv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform2uivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { mutGLAPI.mutProgramUniform3d(program, location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutProgramUniform3dEXT(program, location, x, y, z); }
MUT_FORCE_INLINE void _mutProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform3dv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform3dvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { mutGLAPI.mutProgramUniform3f(program, location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { mutGLAPI.mutProgramUniform3fEXT(program, location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform3fv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform3fvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { mutGLAPI.mutProgramUniform3i(program, location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { mutGLAPI.mutProgramUniform3i64ARB(program, location, x, y, z); }
MUT_FORCE_INLINE void _mutProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { mutGLAPI.mutProgramUniform3i64NV(program, location, x, y, z); }
MUT_FORCE_INLINE void _mutProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutProgramUniform3i64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutProgramUniform3i64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { mutGLAPI.mutProgramUniform3iEXT(program, location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform3iv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform3ivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { mutGLAPI.mutProgramUniform3ui(program, location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { mutGLAPI.mutProgramUniform3ui64ARB(program, location, x, y, z); }
MUT_FORCE_INLINE void _mutProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { mutGLAPI.mutProgramUniform3ui64NV(program, location, x, y, z); }
MUT_FORCE_INLINE void _mutProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutProgramUniform3ui64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutProgramUniform3ui64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { mutGLAPI.mutProgramUniform3uiEXT(program, location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform3uiv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform3uivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { mutGLAPI.mutProgramUniform4d(program, location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutProgramUniform4dEXT(program, location, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform4dv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutProgramUniform4dvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { mutGLAPI.mutProgramUniform4f(program, location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { mutGLAPI.mutProgramUniform4fEXT(program, location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform4fv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutProgramUniform4fvEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { mutGLAPI.mutProgramUniform4i(program, location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { mutGLAPI.mutProgramUniform4i64ARB(program, location, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { mutGLAPI.mutProgramUniform4i64NV(program, location, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutProgramUniform4i64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutProgramUniform4i64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { mutGLAPI.mutProgramUniform4iEXT(program, location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform4iv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutProgramUniform4ivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { mutGLAPI.mutProgramUniform4ui(program, location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { mutGLAPI.mutProgramUniform4ui64ARB(program, location, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { mutGLAPI.mutProgramUniform4ui64NV(program, location, x, y, z, w); }
MUT_FORCE_INLINE void _mutProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutProgramUniform4ui64vARB(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutProgramUniform4ui64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { mutGLAPI.mutProgramUniform4uiEXT(program, location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform4uiv(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutProgramUniform4uivEXT(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) { mutGLAPI.mutProgramUniformHandleui64ARB(program, location, value); }
MUT_FORCE_INLINE void _mutProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) { mutGLAPI.mutProgramUniformHandleui64IMG(program, location, value); }
MUT_FORCE_INLINE void _mutProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) { mutGLAPI.mutProgramUniformHandleui64NV(program, location, value); }
MUT_FORCE_INLINE void _mutProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values) { mutGLAPI.mutProgramUniformHandleui64vARB(program, location, count, values); }
MUT_FORCE_INLINE void _mutProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 *values) { mutGLAPI.mutProgramUniformHandleui64vIMG(program, location, count, values); }
MUT_FORCE_INLINE void _mutProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values) { mutGLAPI.mutProgramUniformHandleui64vNV(program, location, count, values); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix2dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix2dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix2fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix2fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix2x3dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix2x4dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix3dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix3dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix3fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix3fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix3x2dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix3x4dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix4dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix4dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix4fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix4fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix4x2dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix4x3dv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value); }
MUT_FORCE_INLINE void _mutProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) { mutGLAPI.mutProgramUniformui64NV(program, location, value); }
MUT_FORCE_INLINE void _mutProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutProgramUniformui64vNV(program, location, count, value); }
MUT_FORCE_INLINE void _mutProgramVertexLimitNV(GLenum target, GLint limit) { mutGLAPI.mutProgramVertexLimitNV(target, limit); }
MUT_FORCE_INLINE void _mutProvokingVertex(GLenum mode) { mutGLAPI.mutProvokingVertex(mode); }
MUT_FORCE_INLINE void _mutProvokingVertexEXT(GLenum mode) { mutGLAPI.mutProvokingVertexEXT(mode); }
MUT_FORCE_INLINE void _mutPushClientAttribDefaultEXT(GLbitfield mask) { mutGLAPI.mutPushClientAttribDefaultEXT(mask); }
MUT_FORCE_INLINE void _mutPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) { mutGLAPI.mutPushDebugGroup(source, id, length, message); }
MUT_FORCE_INLINE void _mutPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar *message) { mutGLAPI.mutPushDebugGroupKHR(source, id, length, message); }
MUT_FORCE_INLINE void _mutPushGroupMarkerEXT(GLsizei length, const GLchar *marker) { mutGLAPI.mutPushGroupMarkerEXT(length, marker); }
MUT_FORCE_INLINE void _mutQueryCounter(GLuint id, GLenum target) { mutGLAPI.mutQueryCounter(id, target); }
MUT_FORCE_INLINE void _mutQueryCounterEXT(GLuint id, GLenum target) { mutGLAPI.mutQueryCounterEXT(id, target); }
MUT_FORCE_INLINE GLbitfield _mutQueryMatrixxOES(GLfixed *mantissa, GLint *exponent) { return mutGLAPI.mutQueryMatrixxOES(mantissa, exponent); }
MUT_FORCE_INLINE void _mutQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) { mutGLAPI.mutQueryObjectParameteruiAMD(target, id, pname, param); }
MUT_FORCE_INLINE void _mutRasterPos2xOES(GLfixed x, GLfixed y) { mutGLAPI.mutRasterPos2xOES(x, y); }
MUT_FORCE_INLINE void _mutRasterPos2xvOES(const GLfixed *coords) { mutGLAPI.mutRasterPos2xvOES(coords); }
MUT_FORCE_INLINE void _mutRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) { mutGLAPI.mutRasterPos3xOES(x, y, z); }
MUT_FORCE_INLINE void _mutRasterPos3xvOES(const GLfixed *coords) { mutGLAPI.mutRasterPos3xvOES(coords); }
MUT_FORCE_INLINE void _mutRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) { mutGLAPI.mutRasterPos4xOES(x, y, z, w); }
MUT_FORCE_INLINE void _mutRasterPos4xvOES(const GLfixed *coords) { mutGLAPI.mutRasterPos4xvOES(coords); }
MUT_FORCE_INLINE void _mutRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) { mutGLAPI.mutRasterSamplesEXT(samples, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutReadBuffer(GLenum src) { mutGLAPI.mutReadBuffer(src); }
MUT_FORCE_INLINE void _mutReadBufferIndexedEXT(GLenum src, GLint index) { mutGLAPI.mutReadBufferIndexedEXT(src, index); }
MUT_FORCE_INLINE void _mutReadBufferNV(GLenum mode) { mutGLAPI.mutReadBufferNV(mode); }
MUT_FORCE_INLINE void _mutReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutReadBufferRegion(region, x, y, width, height); }
MUT_FORCE_INLINE void _mutReadInstrumentsSGIX(GLint marker) { mutGLAPI.mutReadInstrumentsSGIX(marker); }
MUT_FORCE_INLINE void _mutReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) { mutGLAPI.mutReadPixels(x, y, width, height, format, type, pixels); }
MUT_FORCE_INLINE void _mutReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { mutGLAPI.mutReadnPixels(x, y, width, height, format, type, bufSize, data); }
MUT_FORCE_INLINE void _mutReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { mutGLAPI.mutReadnPixelsARB(x, y, width, height, format, type, bufSize, data); }
MUT_FORCE_INLINE void _mutReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { mutGLAPI.mutReadnPixelsEXT(x, y, width, height, format, type, bufSize, data); }
MUT_FORCE_INLINE void _mutReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) { mutGLAPI.mutReadnPixelsKHR(x, y, width, height, format, type, bufSize, data); }
MUT_FORCE_INLINE void _mutRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { mutGLAPI.mutRectxOES(x1, y1, x2, y2); }
MUT_FORCE_INLINE void _mutRectxvOES(const GLfixed *v1, const GLfixed *v2) { mutGLAPI.mutRectxvOES(v1, v2); }
MUT_FORCE_INLINE void _mutReferencePlaneSGIX(const GLdouble *equation) { mutGLAPI.mutReferencePlaneSGIX(equation); }
MUT_FORCE_INLINE GLboolean _mutReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) { return mutGLAPI.mutReleaseKeyedMutexWin32EXT(memory, key); }
MUT_FORCE_INLINE void _mutReleaseShaderCompiler(void) { mutGLAPI.mutReleaseShaderCompiler(); }
MUT_FORCE_INLINE void _mutRenderGpuMaskNV(GLbitfield mask) { mutGLAPI.mutRenderGpuMaskNV(mask); }
MUT_FORCE_INLINE void _mutRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorage(target, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageEXT(target, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageMultisample(target, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height); }
MUT_FORCE_INLINE void _mutReplacementCodePointerSUN(GLenum type, GLsizei stride, const void **pointer) { mutGLAPI.mutReplacementCodePointerSUN(type, stride, pointer); }
MUT_FORCE_INLINE void _mutReplacementCodeubSUN(GLubyte code) { mutGLAPI.mutReplacementCodeubSUN(code); }
MUT_FORCE_INLINE void _mutReplacementCodeubvSUN(const GLubyte *code) { mutGLAPI.mutReplacementCodeubvSUN(code); }
MUT_FORCE_INLINE void _mutReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiColor3fVertex3fvSUN(rc, c, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuiSUN(GLuint code) { mutGLAPI.mutReplacementCodeuiSUN(code); }
MUT_FORCE_INLINE void _mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutReplacementCodeuiVertex3fSUN(rc, x, y, z); }
MUT_FORCE_INLINE void _mutReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v) { mutGLAPI.mutReplacementCodeuiVertex3fvSUN(rc, v); }
MUT_FORCE_INLINE void _mutReplacementCodeuivSUN(const GLuint *code) { mutGLAPI.mutReplacementCodeuivSUN(code); }
MUT_FORCE_INLINE void _mutReplacementCodeusSUN(GLushort code) { mutGLAPI.mutReplacementCodeusSUN(code); }
MUT_FORCE_INLINE void _mutReplacementCodeusvSUN(const GLushort *code) { mutGLAPI.mutReplacementCodeusvSUN(code); }
MUT_FORCE_INLINE void _mutRequestResidentProgramsNV(GLsizei n, const GLuint *programs) { mutGLAPI.mutRequestResidentProgramsNV(n, programs); }
MUT_FORCE_INLINE void _mutResetHistogram(GLenum target) { mutGLAPI.mutResetHistogram(target); }
MUT_FORCE_INLINE void _mutResetHistogramEXT(GLenum target) { mutGLAPI.mutResetHistogramEXT(target); }
MUT_FORCE_INLINE void _mutResetMinmax(GLenum target) { mutGLAPI.mutResetMinmax(target); }
MUT_FORCE_INLINE void _mutResetMinmaxEXT(GLenum target) { mutGLAPI.mutResetMinmaxEXT(target); }
MUT_FORCE_INLINE void _mutResizeBuffersMESA(void) { mutGLAPI.mutResizeBuffersMESA(); }
MUT_FORCE_INLINE void _mutResolveDepthValuesNV(void) { mutGLAPI.mutResolveDepthValuesNV(); }
MUT_FORCE_INLINE void _mutResolveMultisampleFramebufferAPPLE(void) { mutGLAPI.mutResolveMultisampleFramebufferAPPLE(); }
MUT_FORCE_INLINE void _mutResumeTransformFeedback(void) { mutGLAPI.mutResumeTransformFeedback(); }
MUT_FORCE_INLINE void _mutResumeTransformFeedbackNV(void) { mutGLAPI.mutResumeTransformFeedbackNV(); }
MUT_FORCE_INLINE void _mutRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { mutGLAPI.mutRotatexOES(angle, x, y, z); }
MUT_FORCE_INLINE void _mutSampleCoverage(GLfloat value, GLboolean invert) { mutGLAPI.mutSampleCoverage(value, invert); }
MUT_FORCE_INLINE void _mutSampleCoverageARB(GLfloat value, GLboolean invert) { mutGLAPI.mutSampleCoverageARB(value, invert); }
MUT_FORCE_INLINE void _mutSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) { mutGLAPI.mutSampleMapATI(dst, interp, swizzle); }
MUT_FORCE_INLINE void _mutSampleMaskEXT(GLclampf value, GLboolean invert) { mutGLAPI.mutSampleMaskEXT(value, invert); }
MUT_FORCE_INLINE void _mutSampleMaskIndexedNV(GLuint index, GLbitfield mask) { mutGLAPI.mutSampleMaskIndexedNV(index, mask); }
MUT_FORCE_INLINE void _mutSampleMaskSGIS(GLclampf value, GLboolean invert) { mutGLAPI.mutSampleMaskSGIS(value, invert); }
MUT_FORCE_INLINE void _mutSampleMaski(GLuint maskNumber, GLbitfield mask) { mutGLAPI.mutSampleMaski(maskNumber, mask); }
MUT_FORCE_INLINE void _mutSamplePatternEXT(GLenum pattern) { mutGLAPI.mutSamplePatternEXT(pattern); }
MUT_FORCE_INLINE void _mutSamplePatternSGIS(GLenum pattern) { mutGLAPI.mutSamplePatternSGIS(pattern); }
MUT_FORCE_INLINE void _mutSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param) { mutGLAPI.mutSamplerParameterIiv(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint *param) { mutGLAPI.mutSamplerParameterIivEXT(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint *param) { mutGLAPI.mutSamplerParameterIivOES(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param) { mutGLAPI.mutSamplerParameterIuiv(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint *param) { mutGLAPI.mutSamplerParameterIuivEXT(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint *param) { mutGLAPI.mutSamplerParameterIuivOES(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) { mutGLAPI.mutSamplerParameterf(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param) { mutGLAPI.mutSamplerParameterfv(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameteri(GLuint sampler, GLenum pname, GLint param) { mutGLAPI.mutSamplerParameteri(sampler, pname, param); }
MUT_FORCE_INLINE void _mutSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param) { mutGLAPI.mutSamplerParameteriv(sampler, pname, param); }
MUT_FORCE_INLINE void _mutScalexOES(GLfixed x, GLfixed y, GLfixed z) { mutGLAPI.mutScalexOES(x, y, z); }
MUT_FORCE_INLINE void _mutScissor(GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutScissor(x, y, width, height); }
MUT_FORCE_INLINE void _mutScissorArrayv(GLuint first, GLsizei count, const GLint *v) { mutGLAPI.mutScissorArrayv(first, count, v); }
MUT_FORCE_INLINE void _mutScissorArrayvNV(GLuint first, GLsizei count, const GLint *v) { mutGLAPI.mutScissorArrayvNV(first, count, v); }
MUT_FORCE_INLINE void _mutScissorArrayvOES(GLuint first, GLsizei count, const GLint *v) { mutGLAPI.mutScissorArrayvOES(first, count, v); }
MUT_FORCE_INLINE void _mutScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { mutGLAPI.mutScissorIndexed(index, left, bottom, width, height); }
MUT_FORCE_INLINE void _mutScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { mutGLAPI.mutScissorIndexedNV(index, left, bottom, width, height); }
MUT_FORCE_INLINE void _mutScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { mutGLAPI.mutScissorIndexedOES(index, left, bottom, width, height); }
MUT_FORCE_INLINE void _mutScissorIndexedv(GLuint index, const GLint *v) { mutGLAPI.mutScissorIndexedv(index, v); }
MUT_FORCE_INLINE void _mutScissorIndexedvNV(GLuint index, const GLint *v) { mutGLAPI.mutScissorIndexedvNV(index, v); }
MUT_FORCE_INLINE void _mutScissorIndexedvOES(GLuint index, const GLint *v) { mutGLAPI.mutScissorIndexedvOES(index, v); }
MUT_FORCE_INLINE void _mutSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) { mutGLAPI.mutSecondaryColor3b(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) { mutGLAPI.mutSecondaryColor3bEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3bv(const GLbyte *v) { mutGLAPI.mutSecondaryColor3bv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3bvEXT(const GLbyte *v) { mutGLAPI.mutSecondaryColor3bvEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) { mutGLAPI.mutSecondaryColor3d(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) { mutGLAPI.mutSecondaryColor3dEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3dv(const GLdouble *v) { mutGLAPI.mutSecondaryColor3dv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3dvEXT(const GLdouble *v) { mutGLAPI.mutSecondaryColor3dvEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) { mutGLAPI.mutSecondaryColor3f(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) { mutGLAPI.mutSecondaryColor3fEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3fv(const GLfloat *v) { mutGLAPI.mutSecondaryColor3fv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3fvEXT(const GLfloat *v) { mutGLAPI.mutSecondaryColor3fvEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { mutGLAPI.mutSecondaryColor3hNV(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3hvNV(const GLhalfNV *v) { mutGLAPI.mutSecondaryColor3hvNV(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3i(GLint red, GLint green, GLint blue) { mutGLAPI.mutSecondaryColor3i(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3iEXT(GLint red, GLint green, GLint blue) { mutGLAPI.mutSecondaryColor3iEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3iv(const GLint *v) { mutGLAPI.mutSecondaryColor3iv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3ivEXT(const GLint *v) { mutGLAPI.mutSecondaryColor3ivEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3s(GLshort red, GLshort green, GLshort blue) { mutGLAPI.mutSecondaryColor3s(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) { mutGLAPI.mutSecondaryColor3sEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3sv(const GLshort *v) { mutGLAPI.mutSecondaryColor3sv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3svEXT(const GLshort *v) { mutGLAPI.mutSecondaryColor3svEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) { mutGLAPI.mutSecondaryColor3ub(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) { mutGLAPI.mutSecondaryColor3ubEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3ubv(const GLubyte *v) { mutGLAPI.mutSecondaryColor3ubv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3ubvEXT(const GLubyte *v) { mutGLAPI.mutSecondaryColor3ubvEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) { mutGLAPI.mutSecondaryColor3ui(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) { mutGLAPI.mutSecondaryColor3uiEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3uiv(const GLuint *v) { mutGLAPI.mutSecondaryColor3uiv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3uivEXT(const GLuint *v) { mutGLAPI.mutSecondaryColor3uivEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3us(GLushort red, GLushort green, GLushort blue) { mutGLAPI.mutSecondaryColor3us(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) { mutGLAPI.mutSecondaryColor3usEXT(red, green, blue); }
MUT_FORCE_INLINE void _mutSecondaryColor3usv(const GLushort *v) { mutGLAPI.mutSecondaryColor3usv(v); }
MUT_FORCE_INLINE void _mutSecondaryColor3usvEXT(const GLushort *v) { mutGLAPI.mutSecondaryColor3usvEXT(v); }
MUT_FORCE_INLINE void _mutSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) { mutGLAPI.mutSecondaryColorFormatNV(size, type, stride); }
MUT_FORCE_INLINE void _mutSecondaryColorP3ui(GLenum type, GLuint color) { mutGLAPI.mutSecondaryColorP3ui(type, color); }
MUT_FORCE_INLINE void _mutSecondaryColorP3uiv(GLenum type, const GLuint *color) { mutGLAPI.mutSecondaryColorP3uiv(type, color); }
MUT_FORCE_INLINE void _mutSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutSecondaryColorPointer(size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutSecondaryColorPointerEXT(size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { mutGLAPI.mutSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) { mutGLAPI.mutSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList); }
MUT_FORCE_INLINE void _mutSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params) { mutGLAPI.mutSemaphoreParameterui64vEXT(semaphore, pname, params); }
MUT_FORCE_INLINE void _mutSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) { mutGLAPI.mutSeparableFilter2D(target, internalformat, width, height, format, type, row, column); }
MUT_FORCE_INLINE void _mutSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column) { mutGLAPI.mutSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column); }
MUT_FORCE_INLINE void _mutSetFenceAPPLE(GLuint fence) { mutGLAPI.mutSetFenceAPPLE(fence); }
MUT_FORCE_INLINE void _mutSetFenceNV(GLuint fence, GLenum condition) { mutGLAPI.mutSetFenceNV(fence, condition); }
MUT_FORCE_INLINE void _mutSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value) { mutGLAPI.mutSetFragmentShaderConstantATI(dst, value); }
MUT_FORCE_INLINE void _mutSetInvariantEXT(GLuint id, GLenum type, const void *addr) { mutGLAPI.mutSetInvariantEXT(id, type, addr); }
MUT_FORCE_INLINE void _mutSetLocalConstantEXT(GLuint id, GLenum type, const void *addr) { mutGLAPI.mutSetLocalConstantEXT(id, type, addr); }
MUT_FORCE_INLINE void _mutSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val) { mutGLAPI.mutSetMultisamplefvAMD(pname, index, val); }
MUT_FORCE_INLINE void _mutShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) { mutGLAPI.mutShaderBinary(count, shaders, binaryformat, binary, length); }
MUT_FORCE_INLINE void _mutShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) { mutGLAPI.mutShaderOp1EXT(op, res, arg1); }
MUT_FORCE_INLINE void _mutShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) { mutGLAPI.mutShaderOp2EXT(op, res, arg1, arg2); }
MUT_FORCE_INLINE void _mutShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { mutGLAPI.mutShaderOp3EXT(op, res, arg1, arg2, arg3); }
MUT_FORCE_INLINE void _mutShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length) { mutGLAPI.mutShaderSource(shader, count, string, length); }
MUT_FORCE_INLINE void _mutShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length) { mutGLAPI.mutShaderSourceARB(shaderObj, count, string, length); }
MUT_FORCE_INLINE void _mutShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { mutGLAPI.mutShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); }
MUT_FORCE_INLINE void _mutSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) { mutGLAPI.mutSharpenTexFuncSGIS(target, n, points); }
MUT_FORCE_INLINE void _mutSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts) { mutGLAPI.mutSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); }
MUT_FORCE_INLINE void _mutSignalVkFenceNV(GLuint64 vkFence) { mutGLAPI.mutSignalVkFenceNV(vkFence); }
MUT_FORCE_INLINE void _mutSignalVkSemaphoreNV(GLuint64 vkSemaphore) { mutGLAPI.mutSignalVkSemaphoreNV(vkSemaphore); }
MUT_FORCE_INLINE void _mutSpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue) { mutGLAPI.mutSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
MUT_FORCE_INLINE void _mutSpriteParameterfSGIX(GLenum pname, GLfloat param) { mutGLAPI.mutSpriteParameterfSGIX(pname, param); }
MUT_FORCE_INLINE void _mutSpriteParameterfvSGIX(GLenum pname, const GLfloat *params) { mutGLAPI.mutSpriteParameterfvSGIX(pname, params); }
MUT_FORCE_INLINE void _mutSpriteParameteriSGIX(GLenum pname, GLint param) { mutGLAPI.mutSpriteParameteriSGIX(pname, param); }
MUT_FORCE_INLINE void _mutSpriteParameterivSGIX(GLenum pname, const GLint *params) { mutGLAPI.mutSpriteParameterivSGIX(pname, params); }
MUT_FORCE_INLINE void _mutStartInstrumentsSGIX(void) { mutGLAPI.mutStartInstrumentsSGIX(); }
MUT_FORCE_INLINE void _mutStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) { mutGLAPI.mutStartTilingQCOM(x, y, width, height, preserveMask); }
MUT_FORCE_INLINE void _mutStateCaptureNV(GLuint state, GLenum mode) { mutGLAPI.mutStateCaptureNV(state, mode); }
MUT_FORCE_INLINE void _mutStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) { mutGLAPI.mutStencilClearTagEXT(stencilTagBits, stencilClearTag); }
MUT_FORCE_INLINE void _mutStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) { mutGLAPI.mutStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); }
MUT_FORCE_INLINE void _mutStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) { mutGLAPI.mutStencilFillPathNV(path, fillMode, mask); }
MUT_FORCE_INLINE void _mutStencilFunc(GLenum func, GLint ref, GLuint mask) { mutGLAPI.mutStencilFunc(func, ref, mask); }
MUT_FORCE_INLINE void _mutStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) { mutGLAPI.mutStencilFuncSeparate(face, func, ref, mask); }
MUT_FORCE_INLINE void _mutStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { mutGLAPI.mutStencilFuncSeparateATI(frontfunc, backfunc, ref, mask); }
MUT_FORCE_INLINE void _mutStencilMask(GLuint mask) { mutGLAPI.mutStencilMask(mask); }
MUT_FORCE_INLINE void _mutStencilMaskSeparate(GLenum face, GLuint mask) { mutGLAPI.mutStencilMaskSeparate(face, mask); }
MUT_FORCE_INLINE void _mutStencilOp(GLenum fail, GLenum zfail, GLenum zpass) { mutGLAPI.mutStencilOp(fail, zfail, zpass); }
MUT_FORCE_INLINE void _mutStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { mutGLAPI.mutStencilOpSeparate(face, sfail, dpfail, dppass); }
MUT_FORCE_INLINE void _mutStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { mutGLAPI.mutStencilOpSeparateATI(face, sfail, dpfail, dppass); }
MUT_FORCE_INLINE void _mutStencilOpValueAMD(GLenum face, GLuint value) { mutGLAPI.mutStencilOpValueAMD(face, value); }
MUT_FORCE_INLINE void _mutStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) { mutGLAPI.mutStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); }
MUT_FORCE_INLINE void _mutStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) { mutGLAPI.mutStencilStrokePathNV(path, reference, mask); }
MUT_FORCE_INLINE void _mutStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { mutGLAPI.mutStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); }
MUT_FORCE_INLINE void _mutStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { mutGLAPI.mutStencilThenCoverFillPathNV(path, fillMode, mask, coverMode); }
MUT_FORCE_INLINE void _mutStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) { mutGLAPI.mutStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); }
MUT_FORCE_INLINE void _mutStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) { mutGLAPI.mutStencilThenCoverStrokePathNV(path, reference, mask, coverMode); }
MUT_FORCE_INLINE void _mutStopInstrumentsSGIX(GLint marker) { mutGLAPI.mutStopInstrumentsSGIX(marker); }
MUT_FORCE_INLINE void _mutStringMarkerGREMEDY(GLsizei len, const void *string) { mutGLAPI.mutStringMarkerGREMEDY(len, string); }
MUT_FORCE_INLINE void _mutSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) { mutGLAPI.mutSubpixelPrecisionBiasNV(xbits, ybits); }
MUT_FORCE_INLINE void _mutSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { mutGLAPI.mutSwizzleEXT(res, in, outX, outY, outZ, outW); }
MUT_FORCE_INLINE void _mutSyncTextureINTEL(GLuint texture) { mutGLAPI.mutSyncTextureINTEL(texture); }
MUT_FORCE_INLINE void _mutTagSampleBufferSGIX(void) { mutGLAPI.mutTagSampleBufferSGIX(); }
MUT_FORCE_INLINE void _mutTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) { mutGLAPI.mutTangent3bEXT(tx, ty, tz); }
MUT_FORCE_INLINE void _mutTangent3bvEXT(const GLbyte *v) { mutGLAPI.mutTangent3bvEXT(v); }
MUT_FORCE_INLINE void _mutTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) { mutGLAPI.mutTangent3dEXT(tx, ty, tz); }
MUT_FORCE_INLINE void _mutTangent3dvEXT(const GLdouble *v) { mutGLAPI.mutTangent3dvEXT(v); }
MUT_FORCE_INLINE void _mutTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) { mutGLAPI.mutTangent3fEXT(tx, ty, tz); }
MUT_FORCE_INLINE void _mutTangent3fvEXT(const GLfloat *v) { mutGLAPI.mutTangent3fvEXT(v); }
MUT_FORCE_INLINE void _mutTangent3iEXT(GLint tx, GLint ty, GLint tz) { mutGLAPI.mutTangent3iEXT(tx, ty, tz); }
MUT_FORCE_INLINE void _mutTangent3ivEXT(const GLint *v) { mutGLAPI.mutTangent3ivEXT(v); }
MUT_FORCE_INLINE void _mutTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) { mutGLAPI.mutTangent3sEXT(tx, ty, tz); }
MUT_FORCE_INLINE void _mutTangent3svEXT(const GLshort *v) { mutGLAPI.mutTangent3svEXT(v); }
MUT_FORCE_INLINE void _mutTangentPointerEXT(GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutTangentPointerEXT(type, stride, pointer); }
MUT_FORCE_INLINE void _mutTbufferMask3DFX(GLuint mask) { mutGLAPI.mutTbufferMask3DFX(mask); }
MUT_FORCE_INLINE void _mutTessellationFactorAMD(GLfloat factor) { mutGLAPI.mutTessellationFactorAMD(factor); }
MUT_FORCE_INLINE void _mutTessellationModeAMD(GLenum mode) { mutGLAPI.mutTessellationModeAMD(mode); }
MUT_FORCE_INLINE GLboolean _mutTestFenceAPPLE(GLuint fence) { return mutGLAPI.mutTestFenceAPPLE(fence); }
MUT_FORCE_INLINE GLboolean _mutTestFenceNV(GLuint fence) { return mutGLAPI.mutTestFenceNV(fence); }
MUT_FORCE_INLINE GLboolean _mutTestObjectAPPLE(GLenum object, GLuint name) { return mutGLAPI.mutTestObjectAPPLE(object, name); }
MUT_FORCE_INLINE void _mutTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) { mutGLAPI.mutTexBuffer(target, internalformat, buffer); }
MUT_FORCE_INLINE void _mutTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) { mutGLAPI.mutTexBufferARB(target, internalformat, buffer); }
MUT_FORCE_INLINE void _mutTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) { mutGLAPI.mutTexBufferEXT(target, internalformat, buffer); }
MUT_FORCE_INLINE void _mutTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) { mutGLAPI.mutTexBufferOES(target, internalformat, buffer); }
MUT_FORCE_INLINE void _mutTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutTexBufferRange(target, internalformat, buffer, offset, size); }
MUT_FORCE_INLINE void _mutTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutTexBufferRangeEXT(target, internalformat, buffer, offset, size); }
MUT_FORCE_INLINE void _mutTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutTexBufferRangeOES(target, internalformat, buffer, offset, size); }
MUT_FORCE_INLINE void _mutTexBumpParameterfvATI(GLenum pname, const GLfloat *param) { mutGLAPI.mutTexBumpParameterfvATI(pname, param); }
MUT_FORCE_INLINE void _mutTexBumpParameterivATI(GLenum pname, const GLint *param) { mutGLAPI.mutTexBumpParameterivATI(pname, param); }
MUT_FORCE_INLINE void _mutTexCoord1bOES(GLbyte s) { mutGLAPI.mutTexCoord1bOES(s); }
MUT_FORCE_INLINE void _mutTexCoord1bvOES(const GLbyte *coords) { mutGLAPI.mutTexCoord1bvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoord1hNV(GLhalfNV s) { mutGLAPI.mutTexCoord1hNV(s); }
MUT_FORCE_INLINE void _mutTexCoord1hvNV(const GLhalfNV *v) { mutGLAPI.mutTexCoord1hvNV(v); }
MUT_FORCE_INLINE void _mutTexCoord1xOES(GLfixed s) { mutGLAPI.mutTexCoord1xOES(s); }
MUT_FORCE_INLINE void _mutTexCoord1xvOES(const GLfixed *coords) { mutGLAPI.mutTexCoord1xvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoord2bOES(GLbyte s, GLbyte t) { mutGLAPI.mutTexCoord2bOES(s, t); }
MUT_FORCE_INLINE void _mutTexCoord2bvOES(const GLbyte *coords) { mutGLAPI.mutTexCoord2bvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z); }
MUT_FORCE_INLINE void _mutTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v) { mutGLAPI.mutTexCoord2fColor3fVertex3fvSUN(tc, c, v); }
MUT_FORCE_INLINE void _mutTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v); }
MUT_FORCE_INLINE void _mutTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z); }
MUT_FORCE_INLINE void _mutTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v) { mutGLAPI.mutTexCoord2fColor4ubVertex3fvSUN(tc, c, v); }
MUT_FORCE_INLINE void _mutTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z); }
MUT_FORCE_INLINE void _mutTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutTexCoord2fNormal3fVertex3fvSUN(tc, n, v); }
MUT_FORCE_INLINE void _mutTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutTexCoord2fVertex3fSUN(s, t, x, y, z); }
MUT_FORCE_INLINE void _mutTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v) { mutGLAPI.mutTexCoord2fVertex3fvSUN(tc, v); }
MUT_FORCE_INLINE void _mutTexCoord2hNV(GLhalfNV s, GLhalfNV t) { mutGLAPI.mutTexCoord2hNV(s, t); }
MUT_FORCE_INLINE void _mutTexCoord2hvNV(const GLhalfNV *v) { mutGLAPI.mutTexCoord2hvNV(v); }
MUT_FORCE_INLINE void _mutTexCoord2xOES(GLfixed s, GLfixed t) { mutGLAPI.mutTexCoord2xOES(s, t); }
MUT_FORCE_INLINE void _mutTexCoord2xvOES(const GLfixed *coords) { mutGLAPI.mutTexCoord2xvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) { mutGLAPI.mutTexCoord3bOES(s, t, r); }
MUT_FORCE_INLINE void _mutTexCoord3bvOES(const GLbyte *coords) { mutGLAPI.mutTexCoord3bvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) { mutGLAPI.mutTexCoord3hNV(s, t, r); }
MUT_FORCE_INLINE void _mutTexCoord3hvNV(const GLhalfNV *v) { mutGLAPI.mutTexCoord3hvNV(v); }
MUT_FORCE_INLINE void _mutTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) { mutGLAPI.mutTexCoord3xOES(s, t, r); }
MUT_FORCE_INLINE void _mutTexCoord3xvOES(const GLfixed *coords) { mutGLAPI.mutTexCoord3xvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) { mutGLAPI.mutTexCoord4bOES(s, t, r, q); }
MUT_FORCE_INLINE void _mutTexCoord4bvOES(const GLbyte *coords) { mutGLAPI.mutTexCoord4bvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); }
MUT_FORCE_INLINE void _mutTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) { mutGLAPI.mutTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v); }
MUT_FORCE_INLINE void _mutTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w); }
MUT_FORCE_INLINE void _mutTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v) { mutGLAPI.mutTexCoord4fVertex4fvSUN(tc, v); }
MUT_FORCE_INLINE void _mutTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { mutGLAPI.mutTexCoord4hNV(s, t, r, q); }
MUT_FORCE_INLINE void _mutTexCoord4hvNV(const GLhalfNV *v) { mutGLAPI.mutTexCoord4hvNV(v); }
MUT_FORCE_INLINE void _mutTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) { mutGLAPI.mutTexCoord4xOES(s, t, r, q); }
MUT_FORCE_INLINE void _mutTexCoord4xvOES(const GLfixed *coords) { mutGLAPI.mutTexCoord4xvOES(coords); }
MUT_FORCE_INLINE void _mutTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) { mutGLAPI.mutTexCoordFormatNV(size, type, stride); }
MUT_FORCE_INLINE void _mutTexCoordP1ui(GLenum type, GLuint coords) { mutGLAPI.mutTexCoordP1ui(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordP1uiv(GLenum type, const GLuint *coords) { mutGLAPI.mutTexCoordP1uiv(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordP2ui(GLenum type, GLuint coords) { mutGLAPI.mutTexCoordP2ui(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordP2uiv(GLenum type, const GLuint *coords) { mutGLAPI.mutTexCoordP2uiv(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordP3ui(GLenum type, GLuint coords) { mutGLAPI.mutTexCoordP3ui(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordP3uiv(GLenum type, const GLuint *coords) { mutGLAPI.mutTexCoordP3uiv(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordP4ui(GLenum type, GLuint coords) { mutGLAPI.mutTexCoordP4ui(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordP4uiv(GLenum type, const GLuint *coords) { mutGLAPI.mutTexCoordP4uiv(type, coords); }
MUT_FORCE_INLINE void _mutTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) { mutGLAPI.mutTexCoordPointerEXT(size, type, stride, count, pointer); }
MUT_FORCE_INLINE void _mutTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { mutGLAPI.mutTexCoordPointerListIBM(size, type, stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutTexCoordPointervINTEL(GLint size, GLenum type, const void **pointer) { mutGLAPI.mutTexCoordPointervINTEL(size, type, pointer); }
MUT_FORCE_INLINE void _mutTexEnvxOES(GLenum target, GLenum pname, GLfixed param) { mutGLAPI.mutTexEnvxOES(target, pname, param); }
MUT_FORCE_INLINE void _mutTexEnvxvOES(GLenum target, GLenum pname, const GLfixed *params) { mutGLAPI.mutTexEnvxvOES(target, pname, params); }
MUT_FORCE_INLINE void _mutTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) { mutGLAPI.mutTexFilterFuncSGIS(target, filter, n, weights); }
MUT_FORCE_INLINE void _mutTexGenxOES(GLenum coord, GLenum pname, GLfixed param) { mutGLAPI.mutTexGenxOES(coord, pname, param); }
MUT_FORCE_INLINE void _mutTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params) { mutGLAPI.mutTexGenxvOES(coord, pname, params); }
MUT_FORCE_INLINE void _mutTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexImage1D(target, level, internalformat, width, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { mutGLAPI.mutTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { mutGLAPI.mutTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
MUT_FORCE_INLINE void _mutTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { mutGLAPI.mutTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { mutGLAPI.mutTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
MUT_FORCE_INLINE void _mutTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { mutGLAPI.mutTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
MUT_FORCE_INLINE void _mutTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { mutGLAPI.mutTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
MUT_FORCE_INLINE void _mutTexParameterIiv(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutTexParameterIiv(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutTexParameterIivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameterIivOES(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutTexParameterIivOES(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) { mutGLAPI.mutTexParameterIuiv(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params) { mutGLAPI.mutTexParameterIuivEXT(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameterIuivOES(GLenum target, GLenum pname, const GLuint *params) { mutGLAPI.mutTexParameterIuivOES(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameterf(GLenum target, GLenum pname, GLfloat param) { mutGLAPI.mutTexParameterf(target, pname, param); }
MUT_FORCE_INLINE void _mutTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutTexParameterfv(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameteri(GLenum target, GLenum pname, GLint param) { mutGLAPI.mutTexParameteri(target, pname, param); }
MUT_FORCE_INLINE void _mutTexParameteriv(GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutTexParameteriv(target, pname, params); }
MUT_FORCE_INLINE void _mutTexParameterxOES(GLenum target, GLenum pname, GLfixed param) { mutGLAPI.mutTexParameterxOES(target, pname, param); }
MUT_FORCE_INLINE void _mutTexParameterxvOES(GLenum target, GLenum pname, const GLfixed *params) { mutGLAPI.mutTexParameterxvOES(target, pname, params); }
MUT_FORCE_INLINE void _mutTexRenderbufferNV(GLenum target, GLuint renderbuffer) { mutGLAPI.mutTexRenderbufferNV(target, renderbuffer); }
MUT_FORCE_INLINE void _mutTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { mutGLAPI.mutTexStorage1D(target, levels, internalformat, width); }
MUT_FORCE_INLINE void _mutTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { mutGLAPI.mutTexStorage1DEXT(target, levels, internalformat, width); }
MUT_FORCE_INLINE void _mutTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutTexStorage2D(target, levels, internalformat, width, height); }
MUT_FORCE_INLINE void _mutTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutTexStorage2DEXT(target, levels, internalformat, width, height); }
MUT_FORCE_INLINE void _mutTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { mutGLAPI.mutTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { mutGLAPI.mutTexStorage3D(target, levels, internalformat, width, height, depth); }
MUT_FORCE_INLINE void _mutTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { mutGLAPI.mutTexStorage3DEXT(target, levels, internalformat, width, height, depth); }
MUT_FORCE_INLINE void _mutTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { mutGLAPI.mutTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { mutGLAPI.mutTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { mutGLAPI.mutTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset); }
MUT_FORCE_INLINE void _mutTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { mutGLAPI.mutTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset); }
MUT_FORCE_INLINE void _mutTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { mutGLAPI.mutTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
MUT_FORCE_INLINE void _mutTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { mutGLAPI.mutTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset); }
MUT_FORCE_INLINE void _mutTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { mutGLAPI.mutTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
MUT_FORCE_INLINE void _mutTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { mutGLAPI.mutTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags); }
MUT_FORCE_INLINE void _mutTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage1D(target, level, xoffset, width, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
MUT_FORCE_INLINE void _mutTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureBarrier(void) { mutGLAPI.mutTextureBarrier(); }
MUT_FORCE_INLINE void _mutTextureBarrierNV(void) { mutGLAPI.mutTextureBarrierNV(); }
MUT_FORCE_INLINE void _mutTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) { mutGLAPI.mutTextureBuffer(texture, internalformat, buffer); }
MUT_FORCE_INLINE void _mutTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { mutGLAPI.mutTextureBufferEXT(texture, target, internalformat, buffer); }
MUT_FORCE_INLINE void _mutTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutTextureBufferRange(texture, internalformat, buffer, offset, size); }
MUT_FORCE_INLINE void _mutTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size); }
MUT_FORCE_INLINE void _mutTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { mutGLAPI.mutTextureColorMaskSGIS(red, green, blue, alpha); }
MUT_FORCE_INLINE void _mutTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { mutGLAPI.mutTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
MUT_FORCE_INLINE void _mutTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { mutGLAPI.mutTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations); }
MUT_FORCE_INLINE void _mutTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { mutGLAPI.mutTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
MUT_FORCE_INLINE void _mutTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { mutGLAPI.mutTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); }
MUT_FORCE_INLINE void _mutTextureLightEXT(GLenum pname) { mutGLAPI.mutTextureLightEXT(pname); }
MUT_FORCE_INLINE void _mutTextureMaterialEXT(GLenum face, GLenum mode) { mutGLAPI.mutTextureMaterialEXT(face, mode); }
MUT_FORCE_INLINE void _mutTextureNormalEXT(GLenum mode) { mutGLAPI.mutTextureNormalEXT(mode); }
MUT_FORCE_INLINE void _mutTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { mutGLAPI.mutTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
MUT_FORCE_INLINE void _mutTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params) { mutGLAPI.mutTextureParameterIiv(texture, pname, params); }
MUT_FORCE_INLINE void _mutTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutTextureParameterIivEXT(texture, target, pname, params); }
MUT_FORCE_INLINE void _mutTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params) { mutGLAPI.mutTextureParameterIuiv(texture, pname, params); }
MUT_FORCE_INLINE void _mutTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params) { mutGLAPI.mutTextureParameterIuivEXT(texture, target, pname, params); }
MUT_FORCE_INLINE void _mutTextureParameterf(GLuint texture, GLenum pname, GLfloat param) { mutGLAPI.mutTextureParameterf(texture, pname, param); }
MUT_FORCE_INLINE void _mutTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) { mutGLAPI.mutTextureParameterfEXT(texture, target, pname, param); }
MUT_FORCE_INLINE void _mutTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param) { mutGLAPI.mutTextureParameterfv(texture, pname, param); }
MUT_FORCE_INLINE void _mutTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params) { mutGLAPI.mutTextureParameterfvEXT(texture, target, pname, params); }
MUT_FORCE_INLINE void _mutTextureParameteri(GLuint texture, GLenum pname, GLint param) { mutGLAPI.mutTextureParameteri(texture, pname, param); }
MUT_FORCE_INLINE void _mutTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) { mutGLAPI.mutTextureParameteriEXT(texture, target, pname, param); }
MUT_FORCE_INLINE void _mutTextureParameteriv(GLuint texture, GLenum pname, const GLint *param) { mutGLAPI.mutTextureParameteriv(texture, pname, param); }
MUT_FORCE_INLINE void _mutTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) { mutGLAPI.mutTextureParameterivEXT(texture, target, pname, params); }
MUT_FORCE_INLINE void _mutTextureRangeAPPLE(GLenum target, GLsizei length, const void *pointer) { mutGLAPI.mutTextureRangeAPPLE(target, length, pointer); }
MUT_FORCE_INLINE void _mutTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) { mutGLAPI.mutTextureRenderbufferEXT(texture, target, renderbuffer); }
MUT_FORCE_INLINE void _mutTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { mutGLAPI.mutTextureStorage1D(texture, levels, internalformat, width); }
MUT_FORCE_INLINE void _mutTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { mutGLAPI.mutTextureStorage1DEXT(texture, target, levels, internalformat, width); }
MUT_FORCE_INLINE void _mutTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutTextureStorage2D(texture, levels, internalformat, width, height); }
MUT_FORCE_INLINE void _mutTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { mutGLAPI.mutTextureStorage2DEXT(texture, target, levels, internalformat, width, height); }
MUT_FORCE_INLINE void _mutTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { mutGLAPI.mutTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { mutGLAPI.mutTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { mutGLAPI.mutTextureStorage3D(texture, levels, internalformat, width, height, depth); }
MUT_FORCE_INLINE void _mutTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { mutGLAPI.mutTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth); }
MUT_FORCE_INLINE void _mutTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { mutGLAPI.mutTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { mutGLAPI.mutTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); }
MUT_FORCE_INLINE void _mutTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { mutGLAPI.mutTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset); }
MUT_FORCE_INLINE void _mutTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { mutGLAPI.mutTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset); }
MUT_FORCE_INLINE void _mutTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { mutGLAPI.mutTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
MUT_FORCE_INLINE void _mutTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { mutGLAPI.mutTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset); }
MUT_FORCE_INLINE void _mutTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { mutGLAPI.mutTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
MUT_FORCE_INLINE void _mutTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { mutGLAPI.mutTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags); }
MUT_FORCE_INLINE void _mutTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) { mutGLAPI.mutTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
MUT_FORCE_INLINE void _mutTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { mutGLAPI.mutTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
MUT_FORCE_INLINE void _mutTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { mutGLAPI.mutTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
MUT_FORCE_INLINE void _mutTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { mutGLAPI.mutTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
MUT_FORCE_INLINE void _mutTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) { mutGLAPI.mutTrackMatrixNV(target, address, matrix, transform); }
MUT_FORCE_INLINE void _mutTransformFeedbackAttribsNV(GLsizei count, const GLint *attribs, GLenum bufferMode) { mutGLAPI.mutTransformFeedbackAttribsNV(count, attribs, bufferMode); }
MUT_FORCE_INLINE void _mutTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) { mutGLAPI.mutTransformFeedbackBufferBase(xfb, index, buffer); }
MUT_FORCE_INLINE void _mutTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { mutGLAPI.mutTransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
MUT_FORCE_INLINE void _mutTransformFeedbackStreamAttribsNV(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode) { mutGLAPI.mutTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode); }
MUT_FORCE_INLINE void _mutTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode) { mutGLAPI.mutTransformFeedbackVaryings(program, count, varyings, bufferMode); }
MUT_FORCE_INLINE void _mutTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode) { mutGLAPI.mutTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode); }
MUT_FORCE_INLINE void _mutTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode) { mutGLAPI.mutTransformFeedbackVaryingsNV(program, count, locations, bufferMode); }
MUT_FORCE_INLINE void _mutTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) { mutGLAPI.mutTransformPathNV(resultPath, srcPath, transformType, transformValues); }
MUT_FORCE_INLINE void _mutTranslatexOES(GLfixed x, GLfixed y, GLfixed z) { mutGLAPI.mutTranslatexOES(x, y, z); }
MUT_FORCE_INLINE void _mutUniform1d(GLint location, GLdouble x) { mutGLAPI.mutUniform1d(location, x); }
MUT_FORCE_INLINE void _mutUniform1dv(GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutUniform1dv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1f(GLint location, GLfloat v0) { mutGLAPI.mutUniform1f(location, v0); }
MUT_FORCE_INLINE void _mutUniform1fARB(GLint location, GLfloat v0) { mutGLAPI.mutUniform1fARB(location, v0); }
MUT_FORCE_INLINE void _mutUniform1fv(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform1fv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1fvARB(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform1fvARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1i(GLint location, GLint v0) { mutGLAPI.mutUniform1i(location, v0); }
MUT_FORCE_INLINE void _mutUniform1i64ARB(GLint location, GLint64 x) { mutGLAPI.mutUniform1i64ARB(location, x); }
MUT_FORCE_INLINE void _mutUniform1i64NV(GLint location, GLint64EXT x) { mutGLAPI.mutUniform1i64NV(location, x); }
MUT_FORCE_INLINE void _mutUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutUniform1i64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutUniform1i64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1iARB(GLint location, GLint v0) { mutGLAPI.mutUniform1iARB(location, v0); }
MUT_FORCE_INLINE void _mutUniform1iv(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform1iv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1ivARB(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform1ivARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1ui(GLint location, GLuint v0) { mutGLAPI.mutUniform1ui(location, v0); }
MUT_FORCE_INLINE void _mutUniform1ui64ARB(GLint location, GLuint64 x) { mutGLAPI.mutUniform1ui64ARB(location, x); }
MUT_FORCE_INLINE void _mutUniform1ui64NV(GLint location, GLuint64EXT x) { mutGLAPI.mutUniform1ui64NV(location, x); }
MUT_FORCE_INLINE void _mutUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutUniform1ui64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutUniform1ui64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1uiEXT(GLint location, GLuint v0) { mutGLAPI.mutUniform1uiEXT(location, v0); }
MUT_FORCE_INLINE void _mutUniform1uiv(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform1uiv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform1uivEXT(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform1uivEXT(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2d(GLint location, GLdouble x, GLdouble y) { mutGLAPI.mutUniform2d(location, x, y); }
MUT_FORCE_INLINE void _mutUniform2dv(GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutUniform2dv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2f(GLint location, GLfloat v0, GLfloat v1) { mutGLAPI.mutUniform2f(location, v0, v1); }
MUT_FORCE_INLINE void _mutUniform2fARB(GLint location, GLfloat v0, GLfloat v1) { mutGLAPI.mutUniform2fARB(location, v0, v1); }
MUT_FORCE_INLINE void _mutUniform2fv(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform2fv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2fvARB(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform2fvARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2i(GLint location, GLint v0, GLint v1) { mutGLAPI.mutUniform2i(location, v0, v1); }
MUT_FORCE_INLINE void _mutUniform2i64ARB(GLint location, GLint64 x, GLint64 y) { mutGLAPI.mutUniform2i64ARB(location, x, y); }
MUT_FORCE_INLINE void _mutUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) { mutGLAPI.mutUniform2i64NV(location, x, y); }
MUT_FORCE_INLINE void _mutUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutUniform2i64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutUniform2i64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2iARB(GLint location, GLint v0, GLint v1) { mutGLAPI.mutUniform2iARB(location, v0, v1); }
MUT_FORCE_INLINE void _mutUniform2iv(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform2iv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2ivARB(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform2ivARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2ui(GLint location, GLuint v0, GLuint v1) { mutGLAPI.mutUniform2ui(location, v0, v1); }
MUT_FORCE_INLINE void _mutUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) { mutGLAPI.mutUniform2ui64ARB(location, x, y); }
MUT_FORCE_INLINE void _mutUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) { mutGLAPI.mutUniform2ui64NV(location, x, y); }
MUT_FORCE_INLINE void _mutUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutUniform2ui64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutUniform2ui64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2uiEXT(GLint location, GLuint v0, GLuint v1) { mutGLAPI.mutUniform2uiEXT(location, v0, v1); }
MUT_FORCE_INLINE void _mutUniform2uiv(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform2uiv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform2uivEXT(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform2uivEXT(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutUniform3d(location, x, y, z); }
MUT_FORCE_INLINE void _mutUniform3dv(GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutUniform3dv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { mutGLAPI.mutUniform3f(location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { mutGLAPI.mutUniform3fARB(location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutUniform3fv(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform3fv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3fvARB(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform3fvARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { mutGLAPI.mutUniform3i(location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) { mutGLAPI.mutUniform3i64ARB(location, x, y, z); }
MUT_FORCE_INLINE void _mutUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { mutGLAPI.mutUniform3i64NV(location, x, y, z); }
MUT_FORCE_INLINE void _mutUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutUniform3i64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutUniform3i64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) { mutGLAPI.mutUniform3iARB(location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutUniform3iv(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform3iv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3ivARB(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform3ivARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) { mutGLAPI.mutUniform3ui(location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { mutGLAPI.mutUniform3ui64ARB(location, x, y, z); }
MUT_FORCE_INLINE void _mutUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { mutGLAPI.mutUniform3ui64NV(location, x, y, z); }
MUT_FORCE_INLINE void _mutUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutUniform3ui64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutUniform3ui64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) { mutGLAPI.mutUniform3uiEXT(location, v0, v1, v2); }
MUT_FORCE_INLINE void _mutUniform3uiv(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform3uiv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform3uivEXT(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform3uivEXT(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutUniform4d(location, x, y, z, w); }
MUT_FORCE_INLINE void _mutUniform4dv(GLint location, GLsizei count, const GLdouble *value) { mutGLAPI.mutUniform4dv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { mutGLAPI.mutUniform4f(location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { mutGLAPI.mutUniform4fARB(location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutUniform4fv(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform4fv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4fvARB(GLint location, GLsizei count, const GLfloat *value) { mutGLAPI.mutUniform4fvARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { mutGLAPI.mutUniform4i(location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { mutGLAPI.mutUniform4i64ARB(location, x, y, z, w); }
MUT_FORCE_INLINE void _mutUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { mutGLAPI.mutUniform4i64NV(location, x, y, z, w); }
MUT_FORCE_INLINE void _mutUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value) { mutGLAPI.mutUniform4i64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value) { mutGLAPI.mutUniform4i64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { mutGLAPI.mutUniform4iARB(location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutUniform4iv(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform4iv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4ivARB(GLint location, GLsizei count, const GLint *value) { mutGLAPI.mutUniform4ivARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { mutGLAPI.mutUniform4ui(location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { mutGLAPI.mutUniform4ui64ARB(location, x, y, z, w); }
MUT_FORCE_INLINE void _mutUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { mutGLAPI.mutUniform4ui64NV(location, x, y, z, w); }
MUT_FORCE_INLINE void _mutUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutUniform4ui64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutUniform4ui64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { mutGLAPI.mutUniform4uiEXT(location, v0, v1, v2, v3); }
MUT_FORCE_INLINE void _mutUniform4uiv(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform4uiv(location, count, value); }
MUT_FORCE_INLINE void _mutUniform4uivEXT(GLint location, GLsizei count, const GLuint *value) { mutGLAPI.mutUniform4uivEXT(location, count, value); }
MUT_FORCE_INLINE void _mutUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { mutGLAPI.mutUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
MUT_FORCE_INLINE void _mutUniformBufferEXT(GLuint program, GLint location, GLuint buffer) { mutGLAPI.mutUniformBufferEXT(program, location, buffer); }
MUT_FORCE_INLINE void _mutUniformHandleui64ARB(GLint location, GLuint64 value) { mutGLAPI.mutUniformHandleui64ARB(location, value); }
MUT_FORCE_INLINE void _mutUniformHandleui64IMG(GLint location, GLuint64 value) { mutGLAPI.mutUniformHandleui64IMG(location, value); }
MUT_FORCE_INLINE void _mutUniformHandleui64NV(GLint location, GLuint64 value) { mutGLAPI.mutUniformHandleui64NV(location, value); }
MUT_FORCE_INLINE void _mutUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutUniformHandleui64vARB(location, count, value); }
MUT_FORCE_INLINE void _mutUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutUniformHandleui64vIMG(location, count, value); }
MUT_FORCE_INLINE void _mutUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value) { mutGLAPI.mutUniformHandleui64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix2dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix2fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix2fvARB(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix2x3dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix2x3fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix2x3fvNV(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix2x4dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix2x4fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix2x4fvNV(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix3dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix3fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix3fvARB(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix3x2dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix3x2fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix3x2fvNV(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix3x4dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix3x4fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix3x4fvNV(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix4dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix4fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix4fvARB(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix4x2dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix4x2fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix4x2fvNV(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) { mutGLAPI.mutUniformMatrix4x3dv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix4x3fv(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) { mutGLAPI.mutUniformMatrix4x3fvNV(location, count, transpose, value); }
MUT_FORCE_INLINE void _mutUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices) { mutGLAPI.mutUniformSubroutinesuiv(shadertype, count, indices); }
MUT_FORCE_INLINE void _mutUniformui64NV(GLint location, GLuint64EXT value) { mutGLAPI.mutUniformui64NV(location, value); }
MUT_FORCE_INLINE void _mutUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) { mutGLAPI.mutUniformui64vNV(location, count, value); }
MUT_FORCE_INLINE void _mutUnlockArraysEXT(void) { mutGLAPI.mutUnlockArraysEXT(); }
MUT_FORCE_INLINE GLboolean _mutUnmapBuffer(GLenum target) { return mutGLAPI.mutUnmapBuffer(target); }
MUT_FORCE_INLINE GLboolean _mutUnmapBufferARB(GLenum target) { return mutGLAPI.mutUnmapBufferARB(target); }
MUT_FORCE_INLINE GLboolean _mutUnmapBufferOES(GLenum target) { return mutGLAPI.mutUnmapBufferOES(target); }
MUT_FORCE_INLINE GLboolean _mutUnmapNamedBuffer(GLuint buffer) { return mutGLAPI.mutUnmapNamedBuffer(buffer); }
MUT_FORCE_INLINE GLboolean _mutUnmapNamedBufferEXT(GLuint buffer) { return mutGLAPI.mutUnmapNamedBufferEXT(buffer); }
MUT_FORCE_INLINE void _mutUnmapObjectBufferATI(GLuint buffer) { mutGLAPI.mutUnmapObjectBufferATI(buffer); }
MUT_FORCE_INLINE void _mutUnmapTexture2DINTEL(GLuint texture, GLint level) { mutGLAPI.mutUnmapTexture2DINTEL(texture, level); }
MUT_FORCE_INLINE void _mutUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve) { mutGLAPI.mutUpdateObjectBufferATI(buffer, offset, size, pointer, preserve); }
MUT_FORCE_INLINE void _mutUseProgram(GLuint program) { mutGLAPI.mutUseProgram(program); }
MUT_FORCE_INLINE void _mutUseProgramObjectARB(GLhandleARB programObj) { mutGLAPI.mutUseProgramObjectARB(programObj); }
MUT_FORCE_INLINE void _mutUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) { mutGLAPI.mutUseProgramStages(pipeline, stages, program); }
MUT_FORCE_INLINE void _mutUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) { mutGLAPI.mutUseProgramStagesEXT(pipeline, stages, program); }
MUT_FORCE_INLINE void _mutUseShaderProgramEXT(GLenum type, GLuint program) { mutGLAPI.mutUseShaderProgramEXT(type, program); }
MUT_FORCE_INLINE void _mutVDPAUFiniNV(void) { mutGLAPI.mutVDPAUFiniNV(); }
MUT_FORCE_INLINE void _mutVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) { mutGLAPI.mutVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values); }
MUT_FORCE_INLINE void _mutVDPAUInitNV(const void *vdpDevice, const void *getProcAddress) { mutGLAPI.mutVDPAUInitNV(vdpDevice, getProcAddress); }
MUT_FORCE_INLINE GLboolean _mutVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) { return mutGLAPI.mutVDPAUIsSurfaceNV(surface); }
MUT_FORCE_INLINE void _mutVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) { mutGLAPI.mutVDPAUMapSurfacesNV(numSurfaces, surfaces); }
MUT_FORCE_INLINE GLvdpauSurfaceNV _mutVDPAURegisterOutputSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) { return mutGLAPI.mutVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
MUT_FORCE_INLINE GLvdpauSurfaceNV _mutVDPAURegisterVideoSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) { return mutGLAPI.mutVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
MUT_FORCE_INLINE void _mutVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) { mutGLAPI.mutVDPAUSurfaceAccessNV(surface, access); }
MUT_FORCE_INLINE void _mutVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces) { mutGLAPI.mutVDPAUUnmapSurfacesNV(numSurface, surfaces); }
MUT_FORCE_INLINE void _mutVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) { mutGLAPI.mutVDPAUUnregisterSurfaceNV(surface); }
MUT_FORCE_INLINE void _mutValidateProgram(GLuint program) { mutGLAPI.mutValidateProgram(program); }
MUT_FORCE_INLINE void _mutValidateProgramARB(GLhandleARB programObj) { mutGLAPI.mutValidateProgramARB(programObj); }
MUT_FORCE_INLINE void _mutValidateProgramPipeline(GLuint pipeline) { mutGLAPI.mutValidateProgramPipeline(pipeline); }
MUT_FORCE_INLINE void _mutValidateProgramPipelineEXT(GLuint pipeline) { mutGLAPI.mutValidateProgramPipelineEXT(pipeline); }
MUT_FORCE_INLINE void _mutVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { mutGLAPI.mutVariantArrayObjectATI(id, type, stride, buffer, offset); }
MUT_FORCE_INLINE void _mutVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void *addr) { mutGLAPI.mutVariantPointerEXT(id, type, stride, addr); }
MUT_FORCE_INLINE void _mutVariantbvEXT(GLuint id, const GLbyte *addr) { mutGLAPI.mutVariantbvEXT(id, addr); }
MUT_FORCE_INLINE void _mutVariantdvEXT(GLuint id, const GLdouble *addr) { mutGLAPI.mutVariantdvEXT(id, addr); }
MUT_FORCE_INLINE void _mutVariantfvEXT(GLuint id, const GLfloat *addr) { mutGLAPI.mutVariantfvEXT(id, addr); }
MUT_FORCE_INLINE void _mutVariantivEXT(GLuint id, const GLint *addr) { mutGLAPI.mutVariantivEXT(id, addr); }
MUT_FORCE_INLINE void _mutVariantsvEXT(GLuint id, const GLshort *addr) { mutGLAPI.mutVariantsvEXT(id, addr); }
MUT_FORCE_INLINE void _mutVariantubvEXT(GLuint id, const GLubyte *addr) { mutGLAPI.mutVariantubvEXT(id, addr); }
MUT_FORCE_INLINE void _mutVariantuivEXT(GLuint id, const GLuint *addr) { mutGLAPI.mutVariantuivEXT(id, addr); }
MUT_FORCE_INLINE void _mutVariantusvEXT(GLuint id, const GLushort *addr) { mutGLAPI.mutVariantusvEXT(id, addr); }
MUT_FORCE_INLINE void _mutVertex2bOES(GLbyte x, GLbyte y) { mutGLAPI.mutVertex2bOES(x, y); }
MUT_FORCE_INLINE void _mutVertex2bvOES(const GLbyte *coords) { mutGLAPI.mutVertex2bvOES(coords); }
MUT_FORCE_INLINE void _mutVertex2hNV(GLhalfNV x, GLhalfNV y) { mutGLAPI.mutVertex2hNV(x, y); }
MUT_FORCE_INLINE void _mutVertex2hvNV(const GLhalfNV *v) { mutGLAPI.mutVertex2hvNV(v); }
MUT_FORCE_INLINE void _mutVertex2xOES(GLfixed x) { mutGLAPI.mutVertex2xOES(x); }
MUT_FORCE_INLINE void _mutVertex2xvOES(const GLfixed *coords) { mutGLAPI.mutVertex2xvOES(coords); }
MUT_FORCE_INLINE void _mutVertex3bOES(GLbyte x, GLbyte y, GLbyte z) { mutGLAPI.mutVertex3bOES(x, y, z); }
MUT_FORCE_INLINE void _mutVertex3bvOES(const GLbyte *coords) { mutGLAPI.mutVertex3bvOES(coords); }
MUT_FORCE_INLINE void _mutVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) { mutGLAPI.mutVertex3hNV(x, y, z); }
MUT_FORCE_INLINE void _mutVertex3hvNV(const GLhalfNV *v) { mutGLAPI.mutVertex3hvNV(v); }
MUT_FORCE_INLINE void _mutVertex3xOES(GLfixed x, GLfixed y) { mutGLAPI.mutVertex3xOES(x, y); }
MUT_FORCE_INLINE void _mutVertex3xvOES(const GLfixed *coords) { mutGLAPI.mutVertex3xvOES(coords); }
MUT_FORCE_INLINE void _mutVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) { mutGLAPI.mutVertex4bOES(x, y, z, w); }
MUT_FORCE_INLINE void _mutVertex4bvOES(const GLbyte *coords) { mutGLAPI.mutVertex4bvOES(coords); }
MUT_FORCE_INLINE void _mutVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { mutGLAPI.mutVertex4hNV(x, y, z, w); }
MUT_FORCE_INLINE void _mutVertex4hvNV(const GLhalfNV *v) { mutGLAPI.mutVertex4hvNV(v); }
MUT_FORCE_INLINE void _mutVertex4xOES(GLfixed x, GLfixed y, GLfixed z) { mutGLAPI.mutVertex4xOES(x, y, z); }
MUT_FORCE_INLINE void _mutVertex4xvOES(const GLfixed *coords) { mutGLAPI.mutVertex4xvOES(coords); }
MUT_FORCE_INLINE void _mutVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { mutGLAPI.mutVertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
MUT_FORCE_INLINE void _mutVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { mutGLAPI.mutVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { mutGLAPI.mutVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { mutGLAPI.mutVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { mutGLAPI.mutVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride); }
MUT_FORCE_INLINE void _mutVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) { mutGLAPI.mutVertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
MUT_FORCE_INLINE void _mutVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) { mutGLAPI.mutVertexArrayElementBuffer(vaobj, buffer); }
MUT_FORCE_INLINE void _mutVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayParameteriAPPLE(GLenum pname, GLint param) { mutGLAPI.mutVertexArrayParameteriAPPLE(pname, param); }
MUT_FORCE_INLINE void _mutVertexArrayRangeAPPLE(GLsizei length, void *pointer) { mutGLAPI.mutVertexArrayRangeAPPLE(length, pointer); }
MUT_FORCE_INLINE void _mutVertexArrayRangeNV(GLsizei length, const void *pointer) { mutGLAPI.mutVertexArrayRangeNV(length, pointer); }
MUT_FORCE_INLINE void _mutVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { mutGLAPI.mutVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) { mutGLAPI.mutVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { mutGLAPI.mutVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { mutGLAPI.mutVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { mutGLAPI.mutVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset); }
MUT_FORCE_INLINE void _mutVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) { mutGLAPI.mutVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor); }
MUT_FORCE_INLINE void _mutVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { mutGLAPI.mutVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
MUT_FORCE_INLINE void _mutVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) { mutGLAPI.mutVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
MUT_FORCE_INLINE void _mutVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { mutGLAPI.mutVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset); }
MUT_FORCE_INLINE void _mutVertexAttrib1d(GLuint index, GLdouble x) { mutGLAPI.mutVertexAttrib1d(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1dARB(GLuint index, GLdouble x) { mutGLAPI.mutVertexAttrib1dARB(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1dNV(GLuint index, GLdouble x) { mutGLAPI.mutVertexAttrib1dNV(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib1dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1dvARB(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib1dvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1dvNV(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib1dvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1f(GLuint index, GLfloat x) { mutGLAPI.mutVertexAttrib1f(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1fARB(GLuint index, GLfloat x) { mutGLAPI.mutVertexAttrib1fARB(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1fNV(GLuint index, GLfloat x) { mutGLAPI.mutVertexAttrib1fNV(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1fv(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib1fv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1fvARB(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib1fvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1fvNV(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib1fvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1hNV(GLuint index, GLhalfNV x) { mutGLAPI.mutVertexAttrib1hNV(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1hvNV(GLuint index, const GLhalfNV *v) { mutGLAPI.mutVertexAttrib1hvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1s(GLuint index, GLshort x) { mutGLAPI.mutVertexAttrib1s(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1sARB(GLuint index, GLshort x) { mutGLAPI.mutVertexAttrib1sARB(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1sNV(GLuint index, GLshort x) { mutGLAPI.mutVertexAttrib1sNV(index, x); }
MUT_FORCE_INLINE void _mutVertexAttrib1sv(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib1sv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1svARB(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib1svARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib1svNV(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib1svNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) { mutGLAPI.mutVertexAttrib2d(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) { mutGLAPI.mutVertexAttrib2dARB(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) { mutGLAPI.mutVertexAttrib2dNV(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib2dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2dvARB(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib2dvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2dvNV(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib2dvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) { mutGLAPI.mutVertexAttrib2f(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) { mutGLAPI.mutVertexAttrib2fARB(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) { mutGLAPI.mutVertexAttrib2fNV(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2fv(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib2fv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2fvARB(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib2fvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2fvNV(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib2fvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) { mutGLAPI.mutVertexAttrib2hNV(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2hvNV(GLuint index, const GLhalfNV *v) { mutGLAPI.mutVertexAttrib2hvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2s(GLuint index, GLshort x, GLshort y) { mutGLAPI.mutVertexAttrib2s(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) { mutGLAPI.mutVertexAttrib2sARB(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) { mutGLAPI.mutVertexAttrib2sNV(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttrib2sv(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib2sv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2svARB(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib2svARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib2svNV(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib2svNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutVertexAttrib3d(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutVertexAttrib3dARB(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutVertexAttrib3dNV(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib3dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3dvARB(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib3dvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3dvNV(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib3dvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutVertexAttrib3f(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutVertexAttrib3fARB(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutVertexAttrib3fNV(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3fv(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib3fv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3fvARB(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib3fvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3fvNV(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib3fvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { mutGLAPI.mutVertexAttrib3hNV(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3hvNV(GLuint index, const GLhalfNV *v) { mutGLAPI.mutVertexAttrib3hvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) { mutGLAPI.mutVertexAttrib3s(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) { mutGLAPI.mutVertexAttrib3sARB(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) { mutGLAPI.mutVertexAttrib3sNV(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttrib3sv(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib3sv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3svARB(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib3svARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib3svNV(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib3svNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4Nbv(GLuint index, const GLbyte *v) { mutGLAPI.mutVertexAttrib4Nbv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4NbvARB(GLuint index, const GLbyte *v) { mutGLAPI.mutVertexAttrib4NbvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4Niv(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttrib4Niv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4NivARB(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttrib4NivARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4Nsv(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib4Nsv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4NsvARB(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib4NsvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { mutGLAPI.mutVertexAttrib4Nub(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { mutGLAPI.mutVertexAttrib4NubARB(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4Nubv(GLuint index, const GLubyte *v) { mutGLAPI.mutVertexAttrib4Nubv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4NubvARB(GLuint index, const GLubyte *v) { mutGLAPI.mutVertexAttrib4NubvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4Nuiv(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttrib4Nuiv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4NuivARB(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttrib4NuivARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4Nusv(GLuint index, const GLushort *v) { mutGLAPI.mutVertexAttrib4Nusv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4NusvARB(GLuint index, const GLushort *v) { mutGLAPI.mutVertexAttrib4NusvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4bv(GLuint index, const GLbyte *v) { mutGLAPI.mutVertexAttrib4bv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4bvARB(GLuint index, const GLbyte *v) { mutGLAPI.mutVertexAttrib4bvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutVertexAttrib4d(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutVertexAttrib4dARB(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutVertexAttrib4dNV(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib4dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4dvARB(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib4dvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4dvNV(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttrib4dvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutVertexAttrib4f(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutVertexAttrib4fARB(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutVertexAttrib4fNV(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4fv(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib4fv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4fvARB(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib4fvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4fvNV(GLuint index, const GLfloat *v) { mutGLAPI.mutVertexAttrib4fvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { mutGLAPI.mutVertexAttrib4hNV(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4hvNV(GLuint index, const GLhalfNV *v) { mutGLAPI.mutVertexAttrib4hvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4iv(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttrib4iv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4ivARB(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttrib4ivARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { mutGLAPI.mutVertexAttrib4s(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { mutGLAPI.mutVertexAttrib4sARB(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { mutGLAPI.mutVertexAttrib4sNV(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4sv(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib4sv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4svARB(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib4svARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4svNV(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttrib4svNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { mutGLAPI.mutVertexAttrib4ubNV(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttrib4ubv(GLuint index, const GLubyte *v) { mutGLAPI.mutVertexAttrib4ubv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4ubvARB(GLuint index, const GLubyte *v) { mutGLAPI.mutVertexAttrib4ubvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4ubvNV(GLuint index, const GLubyte *v) { mutGLAPI.mutVertexAttrib4ubvNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4uiv(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttrib4uiv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4uivARB(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttrib4uivARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4usv(GLuint index, const GLushort *v) { mutGLAPI.mutVertexAttrib4usv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttrib4usvARB(GLuint index, const GLushort *v) { mutGLAPI.mutVertexAttrib4usvARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { mutGLAPI.mutVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset); }
MUT_FORCE_INLINE void _mutVertexAttribBinding(GLuint attribindex, GLuint bindingindex) { mutGLAPI.mutVertexAttribBinding(attribindex, bindingindex); }
MUT_FORCE_INLINE void _mutVertexAttribDivisor(GLuint index, GLuint divisor) { mutGLAPI.mutVertexAttribDivisor(index, divisor); }
MUT_FORCE_INLINE void _mutVertexAttribDivisorANGLE(GLuint index, GLuint divisor) { mutGLAPI.mutVertexAttribDivisorANGLE(index, divisor); }
MUT_FORCE_INLINE void _mutVertexAttribDivisorARB(GLuint index, GLuint divisor) { mutGLAPI.mutVertexAttribDivisorARB(index, divisor); }
MUT_FORCE_INLINE void _mutVertexAttribDivisorEXT(GLuint index, GLuint divisor) { mutGLAPI.mutVertexAttribDivisorEXT(index, divisor); }
MUT_FORCE_INLINE void _mutVertexAttribDivisorNV(GLuint index, GLuint divisor) { mutGLAPI.mutVertexAttribDivisorNV(index, divisor); }
MUT_FORCE_INLINE void _mutVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { mutGLAPI.mutVertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { mutGLAPI.mutVertexAttribFormatNV(index, size, type, normalized, stride); }
MUT_FORCE_INLINE void _mutVertexAttribI1i(GLuint index, GLint x) { mutGLAPI.mutVertexAttribI1i(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribI1iEXT(GLuint index, GLint x) { mutGLAPI.mutVertexAttribI1iEXT(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribI1iv(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI1iv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI1ivEXT(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI1ivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI1ui(GLuint index, GLuint x) { mutGLAPI.mutVertexAttribI1ui(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribI1uiEXT(GLuint index, GLuint x) { mutGLAPI.mutVertexAttribI1uiEXT(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribI1uiv(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI1uiv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI1uivEXT(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI1uivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI2i(GLuint index, GLint x, GLint y) { mutGLAPI.mutVertexAttribI2i(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribI2iEXT(GLuint index, GLint x, GLint y) { mutGLAPI.mutVertexAttribI2iEXT(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribI2iv(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI2iv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI2ivEXT(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI2ivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI2ui(GLuint index, GLuint x, GLuint y) { mutGLAPI.mutVertexAttribI2ui(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) { mutGLAPI.mutVertexAttribI2uiEXT(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribI2uiv(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI2uiv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI2uivEXT(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI2uivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) { mutGLAPI.mutVertexAttribI3i(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) { mutGLAPI.mutVertexAttribI3iEXT(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribI3iv(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI3iv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI3ivEXT(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI3ivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) { mutGLAPI.mutVertexAttribI3ui(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) { mutGLAPI.mutVertexAttribI3uiEXT(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribI3uiv(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI3uiv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI3uivEXT(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI3uivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4bv(GLuint index, const GLbyte *v) { mutGLAPI.mutVertexAttribI4bv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4bvEXT(GLuint index, const GLbyte *v) { mutGLAPI.mutVertexAttribI4bvEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) { mutGLAPI.mutVertexAttribI4i(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) { mutGLAPI.mutVertexAttribI4iEXT(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribI4iv(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI4iv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4ivEXT(GLuint index, const GLint *v) { mutGLAPI.mutVertexAttribI4ivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4sv(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttribI4sv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4svEXT(GLuint index, const GLshort *v) { mutGLAPI.mutVertexAttribI4svEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4ubv(GLuint index, const GLubyte *v) { mutGLAPI.mutVertexAttribI4ubv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4ubvEXT(GLuint index, const GLubyte *v) { mutGLAPI.mutVertexAttribI4ubvEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { mutGLAPI.mutVertexAttribI4ui(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { mutGLAPI.mutVertexAttribI4uiEXT(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribI4uiv(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI4uiv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4uivEXT(GLuint index, const GLuint *v) { mutGLAPI.mutVertexAttribI4uivEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4usv(GLuint index, const GLushort *v) { mutGLAPI.mutVertexAttribI4usv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribI4usvEXT(GLuint index, const GLushort *v) { mutGLAPI.mutVertexAttribI4usvEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { mutGLAPI.mutVertexAttribIFormat(attribindex, size, type, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { mutGLAPI.mutVertexAttribIFormatNV(index, size, type, stride); }
MUT_FORCE_INLINE void _mutVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexAttribIPointer(index, size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexAttribIPointerEXT(index, size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexAttribL1d(GLuint index, GLdouble x) { mutGLAPI.mutVertexAttribL1d(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribL1dEXT(GLuint index, GLdouble x) { mutGLAPI.mutVertexAttribL1dEXT(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribL1dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL1dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL1dvEXT(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL1dvEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL1i64NV(GLuint index, GLint64EXT x) { mutGLAPI.mutVertexAttribL1i64NV(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v) { mutGLAPI.mutVertexAttribL1i64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) { mutGLAPI.mutVertexAttribL1ui64ARB(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) { mutGLAPI.mutVertexAttribL1ui64NV(index, x); }
MUT_FORCE_INLINE void _mutVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v) { mutGLAPI.mutVertexAttribL1ui64vARB(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v) { mutGLAPI.mutVertexAttribL1ui64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) { mutGLAPI.mutVertexAttribL2d(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) { mutGLAPI.mutVertexAttribL2dEXT(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribL2dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL2dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL2dvEXT(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL2dvEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) { mutGLAPI.mutVertexAttribL2i64NV(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v) { mutGLAPI.mutVertexAttribL2i64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) { mutGLAPI.mutVertexAttribL2ui64NV(index, x, y); }
MUT_FORCE_INLINE void _mutVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v) { mutGLAPI.mutVertexAttribL2ui64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutVertexAttribL3d(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutVertexAttribL3dEXT(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribL3dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL3dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL3dvEXT(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL3dvEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { mutGLAPI.mutVertexAttribL3i64NV(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v) { mutGLAPI.mutVertexAttribL3i64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { mutGLAPI.mutVertexAttribL3ui64NV(index, x, y, z); }
MUT_FORCE_INLINE void _mutVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v) { mutGLAPI.mutVertexAttribL3ui64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutVertexAttribL4d(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutVertexAttribL4dEXT(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribL4dv(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL4dv(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL4dvEXT(GLuint index, const GLdouble *v) { mutGLAPI.mutVertexAttribL4dvEXT(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { mutGLAPI.mutVertexAttribL4i64NV(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v) { mutGLAPI.mutVertexAttribL4i64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { mutGLAPI.mutVertexAttribL4ui64NV(index, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v) { mutGLAPI.mutVertexAttribL4ui64vNV(index, v); }
MUT_FORCE_INLINE void _mutVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { mutGLAPI.mutVertexAttribLFormat(attribindex, size, type, relativeoffset); }
MUT_FORCE_INLINE void _mutVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { mutGLAPI.mutVertexAttribLFormatNV(index, size, type, stride); }
MUT_FORCE_INLINE void _mutVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexAttribLPointer(index, size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexAttribLPointerEXT(index, size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { mutGLAPI.mutVertexAttribP1ui(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { mutGLAPI.mutVertexAttribP1uiv(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { mutGLAPI.mutVertexAttribP2ui(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { mutGLAPI.mutVertexAttribP2uiv(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { mutGLAPI.mutVertexAttribP3ui(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { mutGLAPI.mutVertexAttribP3uiv(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { mutGLAPI.mutVertexAttribP4ui(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) { mutGLAPI.mutVertexAttribP4uiv(index, type, normalized, value); }
MUT_FORCE_INLINE void _mutVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) { mutGLAPI.mutVertexAttribParameteriAMD(index, pname, param); }
MUT_FORCE_INLINE void _mutVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexAttribPointer(index, size, type, normalized, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexAttribPointerARB(index, size, type, normalized, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexAttribPointerNV(index, fsize, type, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v) { mutGLAPI.mutVertexAttribs1dvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v) { mutGLAPI.mutVertexAttribs1fvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v) { mutGLAPI.mutVertexAttribs1hvNV(index, n, v); }
MUT_FORCE_INLINE void _mutVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v) { mutGLAPI.mutVertexAttribs1svNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v) { mutGLAPI.mutVertexAttribs2dvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v) { mutGLAPI.mutVertexAttribs2fvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v) { mutGLAPI.mutVertexAttribs2hvNV(index, n, v); }
MUT_FORCE_INLINE void _mutVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v) { mutGLAPI.mutVertexAttribs2svNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v) { mutGLAPI.mutVertexAttribs3dvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v) { mutGLAPI.mutVertexAttribs3fvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v) { mutGLAPI.mutVertexAttribs3hvNV(index, n, v); }
MUT_FORCE_INLINE void _mutVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v) { mutGLAPI.mutVertexAttribs3svNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v) { mutGLAPI.mutVertexAttribs4dvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v) { mutGLAPI.mutVertexAttribs4fvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v) { mutGLAPI.mutVertexAttribs4hvNV(index, n, v); }
MUT_FORCE_INLINE void _mutVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v) { mutGLAPI.mutVertexAttribs4svNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v) { mutGLAPI.mutVertexAttribs4ubvNV(index, count, v); }
MUT_FORCE_INLINE void _mutVertexBindingDivisor(GLuint bindingindex, GLuint divisor) { mutGLAPI.mutVertexBindingDivisor(bindingindex, divisor); }
MUT_FORCE_INLINE void _mutVertexBlendARB(GLint count) { mutGLAPI.mutVertexBlendARB(count); }
MUT_FORCE_INLINE void _mutVertexBlendEnvfATI(GLenum pname, GLfloat param) { mutGLAPI.mutVertexBlendEnvfATI(pname, param); }
MUT_FORCE_INLINE void _mutVertexBlendEnviATI(GLenum pname, GLint param) { mutGLAPI.mutVertexBlendEnviATI(pname, param); }
MUT_FORCE_INLINE void _mutVertexFormatNV(GLint size, GLenum type, GLsizei stride) { mutGLAPI.mutVertexFormatNV(size, type, stride); }
MUT_FORCE_INLINE void _mutVertexP2ui(GLenum type, GLuint value) { mutGLAPI.mutVertexP2ui(type, value); }
MUT_FORCE_INLINE void _mutVertexP2uiv(GLenum type, const GLuint *value) { mutGLAPI.mutVertexP2uiv(type, value); }
MUT_FORCE_INLINE void _mutVertexP3ui(GLenum type, GLuint value) { mutGLAPI.mutVertexP3ui(type, value); }
MUT_FORCE_INLINE void _mutVertexP3uiv(GLenum type, const GLuint *value) { mutGLAPI.mutVertexP3uiv(type, value); }
MUT_FORCE_INLINE void _mutVertexP4ui(GLenum type, GLuint value) { mutGLAPI.mutVertexP4ui(type, value); }
MUT_FORCE_INLINE void _mutVertexP4uiv(GLenum type, const GLuint *value) { mutGLAPI.mutVertexP4uiv(type, value); }
MUT_FORCE_INLINE void _mutVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer) { mutGLAPI.mutVertexPointerEXT(size, type, stride, count, pointer); }
MUT_FORCE_INLINE void _mutVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride) { mutGLAPI.mutVertexPointerListIBM(size, type, stride, pointer, ptrstride); }
MUT_FORCE_INLINE void _mutVertexPointervINTEL(GLint size, GLenum type, const void **pointer) { mutGLAPI.mutVertexPointervINTEL(size, type, pointer); }
MUT_FORCE_INLINE void _mutVertexStream1dATI(GLenum stream, GLdouble x) { mutGLAPI.mutVertexStream1dATI(stream, x); }
MUT_FORCE_INLINE void _mutVertexStream1dvATI(GLenum stream, const GLdouble *coords) { mutGLAPI.mutVertexStream1dvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream1fATI(GLenum stream, GLfloat x) { mutGLAPI.mutVertexStream1fATI(stream, x); }
MUT_FORCE_INLINE void _mutVertexStream1fvATI(GLenum stream, const GLfloat *coords) { mutGLAPI.mutVertexStream1fvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream1iATI(GLenum stream, GLint x) { mutGLAPI.mutVertexStream1iATI(stream, x); }
MUT_FORCE_INLINE void _mutVertexStream1ivATI(GLenum stream, const GLint *coords) { mutGLAPI.mutVertexStream1ivATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream1sATI(GLenum stream, GLshort x) { mutGLAPI.mutVertexStream1sATI(stream, x); }
MUT_FORCE_INLINE void _mutVertexStream1svATI(GLenum stream, const GLshort *coords) { mutGLAPI.mutVertexStream1svATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) { mutGLAPI.mutVertexStream2dATI(stream, x, y); }
MUT_FORCE_INLINE void _mutVertexStream2dvATI(GLenum stream, const GLdouble *coords) { mutGLAPI.mutVertexStream2dvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) { mutGLAPI.mutVertexStream2fATI(stream, x, y); }
MUT_FORCE_INLINE void _mutVertexStream2fvATI(GLenum stream, const GLfloat *coords) { mutGLAPI.mutVertexStream2fvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream2iATI(GLenum stream, GLint x, GLint y) { mutGLAPI.mutVertexStream2iATI(stream, x, y); }
MUT_FORCE_INLINE void _mutVertexStream2ivATI(GLenum stream, const GLint *coords) { mutGLAPI.mutVertexStream2ivATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream2sATI(GLenum stream, GLshort x, GLshort y) { mutGLAPI.mutVertexStream2sATI(stream, x, y); }
MUT_FORCE_INLINE void _mutVertexStream2svATI(GLenum stream, const GLshort *coords) { mutGLAPI.mutVertexStream2svATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutVertexStream3dATI(stream, x, y, z); }
MUT_FORCE_INLINE void _mutVertexStream3dvATI(GLenum stream, const GLdouble *coords) { mutGLAPI.mutVertexStream3dvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutVertexStream3fATI(stream, x, y, z); }
MUT_FORCE_INLINE void _mutVertexStream3fvATI(GLenum stream, const GLfloat *coords) { mutGLAPI.mutVertexStream3fvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) { mutGLAPI.mutVertexStream3iATI(stream, x, y, z); }
MUT_FORCE_INLINE void _mutVertexStream3ivATI(GLenum stream, const GLint *coords) { mutGLAPI.mutVertexStream3ivATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) { mutGLAPI.mutVertexStream3sATI(stream, x, y, z); }
MUT_FORCE_INLINE void _mutVertexStream3svATI(GLenum stream, const GLshort *coords) { mutGLAPI.mutVertexStream3svATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutVertexStream4dATI(stream, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexStream4dvATI(GLenum stream, const GLdouble *coords) { mutGLAPI.mutVertexStream4dvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutVertexStream4fATI(stream, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexStream4fvATI(GLenum stream, const GLfloat *coords) { mutGLAPI.mutVertexStream4fvATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) { mutGLAPI.mutVertexStream4iATI(stream, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexStream4ivATI(GLenum stream, const GLint *coords) { mutGLAPI.mutVertexStream4ivATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { mutGLAPI.mutVertexStream4sATI(stream, x, y, z, w); }
MUT_FORCE_INLINE void _mutVertexStream4svATI(GLenum stream, const GLshort *coords) { mutGLAPI.mutVertexStream4svATI(stream, coords); }
MUT_FORCE_INLINE void _mutVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutVertexWeightPointerEXT(size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutVertexWeightfEXT(GLfloat weight) { mutGLAPI.mutVertexWeightfEXT(weight); }
MUT_FORCE_INLINE void _mutVertexWeightfvEXT(const GLfloat *weight) { mutGLAPI.mutVertexWeightfvEXT(weight); }
MUT_FORCE_INLINE void _mutVertexWeighthNV(GLhalfNV weight) { mutGLAPI.mutVertexWeighthNV(weight); }
MUT_FORCE_INLINE void _mutVertexWeighthvNV(const GLhalfNV *weight) { mutGLAPI.mutVertexWeighthvNV(weight); }
MUT_FORCE_INLINE GLenum _mutVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) { return mutGLAPI.mutVideoCaptureNV(video_capture_slot, sequence_num, capture_time); }
MUT_FORCE_INLINE void _mutVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) { mutGLAPI.mutVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params); }
MUT_FORCE_INLINE void _mutVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) { mutGLAPI.mutVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params); }
MUT_FORCE_INLINE void _mutVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) { mutGLAPI.mutVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params); }
MUT_FORCE_INLINE void _mutViewport(GLint x, GLint y, GLsizei width, GLsizei height) { mutGLAPI.mutViewport(x, y, width, height); }
MUT_FORCE_INLINE void _mutViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) { mutGLAPI.mutViewportArrayv(first, count, v); }
MUT_FORCE_INLINE void _mutViewportArrayvNV(GLuint first, GLsizei count, const GLfloat *v) { mutGLAPI.mutViewportArrayvNV(first, count, v); }
MUT_FORCE_INLINE void _mutViewportArrayvOES(GLuint first, GLsizei count, const GLfloat *v) { mutGLAPI.mutViewportArrayvOES(first, count, v); }
MUT_FORCE_INLINE void _mutViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { mutGLAPI.mutViewportIndexedf(index, x, y, w, h); }
MUT_FORCE_INLINE void _mutViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { mutGLAPI.mutViewportIndexedfNV(index, x, y, w, h); }
MUT_FORCE_INLINE void _mutViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { mutGLAPI.mutViewportIndexedfOES(index, x, y, w, h); }
MUT_FORCE_INLINE void _mutViewportIndexedfv(GLuint index, const GLfloat *v) { mutGLAPI.mutViewportIndexedfv(index, v); }
MUT_FORCE_INLINE void _mutViewportIndexedfvNV(GLuint index, const GLfloat *v) { mutGLAPI.mutViewportIndexedfvNV(index, v); }
MUT_FORCE_INLINE void _mutViewportIndexedfvOES(GLuint index, const GLfloat *v) { mutGLAPI.mutViewportIndexedfvOES(index, v); }
MUT_FORCE_INLINE void _mutViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) { mutGLAPI.mutViewportPositionWScaleNV(index, xcoeff, ycoeff); }
MUT_FORCE_INLINE void _mutViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { mutGLAPI.mutViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew); }
MUT_FORCE_INLINE void _mutWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts) { mutGLAPI.mutWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); }
MUT_FORCE_INLINE void _mutWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { mutGLAPI.mutWaitSync(sync, flags, timeout); }
MUT_FORCE_INLINE void _mutWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { mutGLAPI.mutWaitSyncAPPLE(sync, flags, timeout); }
MUT_FORCE_INLINE void _mutWaitVkSemaphoreNV(GLuint64 vkSemaphore) { mutGLAPI.mutWaitVkSemaphoreNV(vkSemaphore); }
MUT_FORCE_INLINE void _mutWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) { mutGLAPI.mutWeightPathsNV(resultPath, numPaths, paths, weights); }
MUT_FORCE_INLINE void _mutWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer) { mutGLAPI.mutWeightPointerARB(size, type, stride, pointer); }
MUT_FORCE_INLINE void _mutWeightbvARB(GLint size, const GLbyte *weights) { mutGLAPI.mutWeightbvARB(size, weights); }
MUT_FORCE_INLINE void _mutWeightdvARB(GLint size, const GLdouble *weights) { mutGLAPI.mutWeightdvARB(size, weights); }
MUT_FORCE_INLINE void _mutWeightfvARB(GLint size, const GLfloat *weights) { mutGLAPI.mutWeightfvARB(size, weights); }
MUT_FORCE_INLINE void _mutWeightivARB(GLint size, const GLint *weights) { mutGLAPI.mutWeightivARB(size, weights); }
MUT_FORCE_INLINE void _mutWeightsvARB(GLint size, const GLshort *weights) { mutGLAPI.mutWeightsvARB(size, weights); }
MUT_FORCE_INLINE void _mutWeightubvARB(GLint size, const GLubyte *weights) { mutGLAPI.mutWeightubvARB(size, weights); }
MUT_FORCE_INLINE void _mutWeightuivARB(GLint size, const GLuint *weights) { mutGLAPI.mutWeightuivARB(size, weights); }
MUT_FORCE_INLINE void _mutWeightusvARB(GLint size, const GLushort *weights) { mutGLAPI.mutWeightusvARB(size, weights); }
MUT_FORCE_INLINE void _mutWindowPos2d(GLdouble x, GLdouble y) { mutGLAPI.mutWindowPos2d(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2dARB(GLdouble x, GLdouble y) { mutGLAPI.mutWindowPos2dARB(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2dMESA(GLdouble x, GLdouble y) { mutGLAPI.mutWindowPos2dMESA(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2dv(const GLdouble *v) { mutGLAPI.mutWindowPos2dv(v); }
MUT_FORCE_INLINE void _mutWindowPos2dvARB(const GLdouble *v) { mutGLAPI.mutWindowPos2dvARB(v); }
MUT_FORCE_INLINE void _mutWindowPos2dvMESA(const GLdouble *v) { mutGLAPI.mutWindowPos2dvMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos2f(GLfloat x, GLfloat y) { mutGLAPI.mutWindowPos2f(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2fARB(GLfloat x, GLfloat y) { mutGLAPI.mutWindowPos2fARB(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2fMESA(GLfloat x, GLfloat y) { mutGLAPI.mutWindowPos2fMESA(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2fv(const GLfloat *v) { mutGLAPI.mutWindowPos2fv(v); }
MUT_FORCE_INLINE void _mutWindowPos2fvARB(const GLfloat *v) { mutGLAPI.mutWindowPos2fvARB(v); }
MUT_FORCE_INLINE void _mutWindowPos2fvMESA(const GLfloat *v) { mutGLAPI.mutWindowPos2fvMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos2i(GLint x, GLint y) { mutGLAPI.mutWindowPos2i(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2iARB(GLint x, GLint y) { mutGLAPI.mutWindowPos2iARB(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2iMESA(GLint x, GLint y) { mutGLAPI.mutWindowPos2iMESA(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2iv(const GLint *v) { mutGLAPI.mutWindowPos2iv(v); }
MUT_FORCE_INLINE void _mutWindowPos2ivARB(const GLint *v) { mutGLAPI.mutWindowPos2ivARB(v); }
MUT_FORCE_INLINE void _mutWindowPos2ivMESA(const GLint *v) { mutGLAPI.mutWindowPos2ivMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos2s(GLshort x, GLshort y) { mutGLAPI.mutWindowPos2s(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2sARB(GLshort x, GLshort y) { mutGLAPI.mutWindowPos2sARB(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2sMESA(GLshort x, GLshort y) { mutGLAPI.mutWindowPos2sMESA(x, y); }
MUT_FORCE_INLINE void _mutWindowPos2sv(const GLshort *v) { mutGLAPI.mutWindowPos2sv(v); }
MUT_FORCE_INLINE void _mutWindowPos2svARB(const GLshort *v) { mutGLAPI.mutWindowPos2svARB(v); }
MUT_FORCE_INLINE void _mutWindowPos2svMESA(const GLshort *v) { mutGLAPI.mutWindowPos2svMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos3d(GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutWindowPos3d(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutWindowPos3dARB(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) { mutGLAPI.mutWindowPos3dMESA(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3dv(const GLdouble *v) { mutGLAPI.mutWindowPos3dv(v); }
MUT_FORCE_INLINE void _mutWindowPos3dvARB(const GLdouble *v) { mutGLAPI.mutWindowPos3dvARB(v); }
MUT_FORCE_INLINE void _mutWindowPos3dvMESA(const GLdouble *v) { mutGLAPI.mutWindowPos3dvMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos3f(GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutWindowPos3f(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutWindowPos3fARB(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) { mutGLAPI.mutWindowPos3fMESA(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3fv(const GLfloat *v) { mutGLAPI.mutWindowPos3fv(v); }
MUT_FORCE_INLINE void _mutWindowPos3fvARB(const GLfloat *v) { mutGLAPI.mutWindowPos3fvARB(v); }
MUT_FORCE_INLINE void _mutWindowPos3fvMESA(const GLfloat *v) { mutGLAPI.mutWindowPos3fvMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos3i(GLint x, GLint y, GLint z) { mutGLAPI.mutWindowPos3i(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3iARB(GLint x, GLint y, GLint z) { mutGLAPI.mutWindowPos3iARB(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3iMESA(GLint x, GLint y, GLint z) { mutGLAPI.mutWindowPos3iMESA(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3iv(const GLint *v) { mutGLAPI.mutWindowPos3iv(v); }
MUT_FORCE_INLINE void _mutWindowPos3ivARB(const GLint *v) { mutGLAPI.mutWindowPos3ivARB(v); }
MUT_FORCE_INLINE void _mutWindowPos3ivMESA(const GLint *v) { mutGLAPI.mutWindowPos3ivMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos3s(GLshort x, GLshort y, GLshort z) { mutGLAPI.mutWindowPos3s(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3sARB(GLshort x, GLshort y, GLshort z) { mutGLAPI.mutWindowPos3sARB(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3sMESA(GLshort x, GLshort y, GLshort z) { mutGLAPI.mutWindowPos3sMESA(x, y, z); }
MUT_FORCE_INLINE void _mutWindowPos3sv(const GLshort *v) { mutGLAPI.mutWindowPos3sv(v); }
MUT_FORCE_INLINE void _mutWindowPos3svARB(const GLshort *v) { mutGLAPI.mutWindowPos3svARB(v); }
MUT_FORCE_INLINE void _mutWindowPos3svMESA(const GLshort *v) { mutGLAPI.mutWindowPos3svMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { mutGLAPI.mutWindowPos4dMESA(x, y, z, w); }
MUT_FORCE_INLINE void _mutWindowPos4dvMESA(const GLdouble *v) { mutGLAPI.mutWindowPos4dvMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { mutGLAPI.mutWindowPos4fMESA(x, y, z, w); }
MUT_FORCE_INLINE void _mutWindowPos4fvMESA(const GLfloat *v) { mutGLAPI.mutWindowPos4fvMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) { mutGLAPI.mutWindowPos4iMESA(x, y, z, w); }
MUT_FORCE_INLINE void _mutWindowPos4ivMESA(const GLint *v) { mutGLAPI.mutWindowPos4ivMESA(v); }
MUT_FORCE_INLINE void _mutWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) { mutGLAPI.mutWindowPos4sMESA(x, y, z, w); }
MUT_FORCE_INLINE void _mutWindowPos4svMESA(const GLshort *v) { mutGLAPI.mutWindowPos4svMESA(v); }
MUT_FORCE_INLINE void _mutWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box) { mutGLAPI.mutWindowRectanglesEXT(mode, count, box); }
MUT_FORCE_INLINE void _mutWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { mutGLAPI.mutWriteMaskEXT(res, in, outX, outY, outZ, outW); }

#define glAccumxOES _mutAccumxOES
#define glAcquireKeyedMutexWin32EXT _mutAcquireKeyedMutexWin32EXT
#define glActiveProgramEXT _mutActiveProgramEXT
#define glActiveShaderProgram _mutActiveShaderProgram
#define glActiveShaderProgramEXT _mutActiveShaderProgramEXT
#define glActiveStencilFaceEXT _mutActiveStencilFaceEXT
#define glActiveTexture _mutActiveTexture
#define glActiveTextureARB _mutActiveTextureARB
#define glActiveVaryingNV _mutActiveVaryingNV
#define glAlphaFragmentOp1ATI _mutAlphaFragmentOp1ATI
#define glAlphaFragmentOp2ATI _mutAlphaFragmentOp2ATI
#define glAlphaFragmentOp3ATI _mutAlphaFragmentOp3ATI
#define glAlphaFuncQCOM _mutAlphaFuncQCOM
#define glAlphaFuncxOES _mutAlphaFuncxOES
#define glAlphaToCoverageDitherControlNV _mutAlphaToCoverageDitherControlNV
#define glApplyFramebufferAttachmentCMAAINTEL _mutApplyFramebufferAttachmentCMAAINTEL
#define glApplyTextureEXT _mutApplyTextureEXT
#define glAreProgramsResidentNV _mutAreProgramsResidentNV
#define glAreTexturesResidentEXT _mutAreTexturesResidentEXT
#define glArrayElementEXT _mutArrayElementEXT
#define glArrayObjectATI _mutArrayObjectATI
#define glAsyncMarkerSGIX _mutAsyncMarkerSGIX
#define glAttachObjectARB _mutAttachObjectARB
#define glAttachShader _mutAttachShader
#define glBeginConditionalRender _mutBeginConditionalRender
#define glBeginConditionalRenderNV _mutBeginConditionalRenderNV
#define glBeginConditionalRenderNVX _mutBeginConditionalRenderNVX
#define glBeginFragmentShaderATI _mutBeginFragmentShaderATI
#define glBeginOcclusionQueryNV _mutBeginOcclusionQueryNV
#define glBeginPerfMonitorAMD _mutBeginPerfMonitorAMD
#define glBeginPerfQueryINTEL _mutBeginPerfQueryINTEL
#define glBeginQuery _mutBeginQuery
#define glBeginQueryARB _mutBeginQueryARB
#define glBeginQueryEXT _mutBeginQueryEXT
#define glBeginQueryIndexed _mutBeginQueryIndexed
#define glBeginTransformFeedback _mutBeginTransformFeedback
#define glBeginTransformFeedbackEXT _mutBeginTransformFeedbackEXT
#define glBeginTransformFeedbackNV _mutBeginTransformFeedbackNV
#define glBeginVertexShaderEXT _mutBeginVertexShaderEXT
#define glBeginVideoCaptureNV _mutBeginVideoCaptureNV
#define glBindAttribLocation _mutBindAttribLocation
#define glBindAttribLocationARB _mutBindAttribLocationARB
#define glBindBuffer _mutBindBuffer
#define glBindBufferARB _mutBindBufferARB
#define glBindBufferBase _mutBindBufferBase
#define glBindBufferBaseEXT _mutBindBufferBaseEXT
#define glBindBufferBaseNV _mutBindBufferBaseNV
#define glBindBufferOffsetEXT _mutBindBufferOffsetEXT
#define glBindBufferOffsetNV _mutBindBufferOffsetNV
#define glBindBufferRange _mutBindBufferRange
#define glBindBufferRangeEXT _mutBindBufferRangeEXT
#define glBindBufferRangeNV _mutBindBufferRangeNV
#define glBindBuffersBase _mutBindBuffersBase
#define glBindBuffersRange _mutBindBuffersRange
#define glBindFragDataLocation _mutBindFragDataLocation
#define glBindFragDataLocationEXT _mutBindFragDataLocationEXT
#define glBindFragDataLocationIndexed _mutBindFragDataLocationIndexed
#define glBindFragDataLocationIndexedEXT _mutBindFragDataLocationIndexedEXT
#define glBindFragmentShaderATI _mutBindFragmentShaderATI
#define glBindFramebuffer _mutBindFramebuffer
#define glBindFramebufferEXT _mutBindFramebufferEXT
#define glBindImageTexture _mutBindImageTexture
#define glBindImageTextureEXT _mutBindImageTextureEXT
#define glBindImageTextures _mutBindImageTextures
#define glBindLightParameterEXT _mutBindLightParameterEXT
#define glBindMaterialParameterEXT _mutBindMaterialParameterEXT
#define glBindMultiTextureEXT _mutBindMultiTextureEXT
#define glBindParameterEXT _mutBindParameterEXT
#define glBindProgramARB _mutBindProgramARB
#define glBindProgramNV _mutBindProgramNV
#define glBindProgramPipeline _mutBindProgramPipeline
#define glBindProgramPipelineEXT _mutBindProgramPipelineEXT
#define glBindRenderbuffer _mutBindRenderbuffer
#define glBindRenderbufferEXT _mutBindRenderbufferEXT
#define glBindSampler _mutBindSampler
#define glBindSamplers _mutBindSamplers
#define glBindTexGenParameterEXT _mutBindTexGenParameterEXT
#define glBindTexture _mutBindTexture
#define glBindTextureEXT _mutBindTextureEXT
#define glBindTextureUnit _mutBindTextureUnit
#define glBindTextureUnitParameterEXT _mutBindTextureUnitParameterEXT
#define glBindTextures _mutBindTextures
#define glBindTransformFeedback _mutBindTransformFeedback
#define glBindTransformFeedbackNV _mutBindTransformFeedbackNV
#define glBindVertexArray _mutBindVertexArray
#define glBindVertexArrayAPPLE _mutBindVertexArrayAPPLE
#define glBindVertexArrayOES _mutBindVertexArrayOES
#define glBindVertexBuffer _mutBindVertexBuffer
#define glBindVertexBuffers _mutBindVertexBuffers
#define glBindVertexShaderEXT _mutBindVertexShaderEXT
#define glBindVideoCaptureStreamBufferNV _mutBindVideoCaptureStreamBufferNV
#define glBindVideoCaptureStreamTextureNV _mutBindVideoCaptureStreamTextureNV
#define glBinormal3bEXT _mutBinormal3bEXT
#define glBinormal3bvEXT _mutBinormal3bvEXT
#define glBinormal3dEXT _mutBinormal3dEXT
#define glBinormal3dvEXT _mutBinormal3dvEXT
#define glBinormal3fEXT _mutBinormal3fEXT
#define glBinormal3fvEXT _mutBinormal3fvEXT
#define glBinormal3iEXT _mutBinormal3iEXT
#define glBinormal3ivEXT _mutBinormal3ivEXT
#define glBinormal3sEXT _mutBinormal3sEXT
#define glBinormal3svEXT _mutBinormal3svEXT
#define glBinormalPointerEXT _mutBinormalPointerEXT
#define glBitmapxOES _mutBitmapxOES
#define glBlendBarrier _mutBlendBarrier
#define glBlendBarrierKHR _mutBlendBarrierKHR
#define glBlendBarrierNV _mutBlendBarrierNV
#define glBlendColor _mutBlendColor
#define glBlendColorEXT _mutBlendColorEXT
#define glBlendColorxOES _mutBlendColorxOES
#define glBlendEquation _mutBlendEquation
#define glBlendEquationEXT _mutBlendEquationEXT
#define glBlendEquationIndexedAMD _mutBlendEquationIndexedAMD
#define glBlendEquationSeparate _mutBlendEquationSeparate
#define glBlendEquationSeparateEXT _mutBlendEquationSeparateEXT
#define glBlendEquationSeparateIndexedAMD _mutBlendEquationSeparateIndexedAMD
#define glBlendEquationSeparatei _mutBlendEquationSeparatei
#define glBlendEquationSeparateiARB _mutBlendEquationSeparateiARB
#define glBlendEquationSeparateiEXT _mutBlendEquationSeparateiEXT
#define glBlendEquationSeparateiOES _mutBlendEquationSeparateiOES
#define glBlendEquationi _mutBlendEquationi
#define glBlendEquationiARB _mutBlendEquationiARB
#define glBlendEquationiEXT _mutBlendEquationiEXT
#define glBlendEquationiOES _mutBlendEquationiOES
#define glBlendFunc _mutBlendFunc
#define glBlendFuncIndexedAMD _mutBlendFuncIndexedAMD
#define glBlendFuncSeparate _mutBlendFuncSeparate
#define glBlendFuncSeparateEXT _mutBlendFuncSeparateEXT
#define glBlendFuncSeparateINGR _mutBlendFuncSeparateINGR
#define glBlendFuncSeparateIndexedAMD _mutBlendFuncSeparateIndexedAMD
#define glBlendFuncSeparatei _mutBlendFuncSeparatei
#define glBlendFuncSeparateiARB _mutBlendFuncSeparateiARB
#define glBlendFuncSeparateiEXT _mutBlendFuncSeparateiEXT
#define glBlendFuncSeparateiOES _mutBlendFuncSeparateiOES
#define glBlendFunci _mutBlendFunci
#define glBlendFunciARB _mutBlendFunciARB
#define glBlendFunciEXT _mutBlendFunciEXT
#define glBlendFunciOES _mutBlendFunciOES
#define glBlendParameteriNV _mutBlendParameteriNV
#define glBlitFramebuffer _mutBlitFramebuffer
#define glBlitFramebufferANGLE _mutBlitFramebufferANGLE
#define glBlitFramebufferEXT _mutBlitFramebufferEXT
#define glBlitFramebufferNV _mutBlitFramebufferNV
#define glBlitNamedFramebuffer _mutBlitNamedFramebuffer
#define glBufferAddressRangeNV _mutBufferAddressRangeNV
#define glBufferData _mutBufferData
#define glBufferDataARB _mutBufferDataARB
#define glBufferPageCommitmentARB _mutBufferPageCommitmentARB
#define glBufferParameteriAPPLE _mutBufferParameteriAPPLE
#define glBufferRegionEnabled _mutBufferRegionEnabled
#define glBufferStorage _mutBufferStorage
#define glBufferStorageEXT _mutBufferStorageEXT
#define glBufferStorageExternalEXT _mutBufferStorageExternalEXT
#define glBufferStorageMemEXT _mutBufferStorageMemEXT
#define glBufferSubData _mutBufferSubData
#define glBufferSubDataARB _mutBufferSubDataARB
#define glCallCommandListNV _mutCallCommandListNV
#define glCheckFramebufferStatus _mutCheckFramebufferStatus
#define glCheckFramebufferStatusEXT _mutCheckFramebufferStatusEXT
#define glCheckNamedFramebufferStatus _mutCheckNamedFramebufferStatus
#define glCheckNamedFramebufferStatusEXT _mutCheckNamedFramebufferStatusEXT
#define glClampColor _mutClampColor
#define glClampColorARB _mutClampColorARB
#define glClear _mutClear
#define glClearAccumxOES _mutClearAccumxOES
#define glClearBufferData _mutClearBufferData
#define glClearBufferSubData _mutClearBufferSubData
#define glClearBufferfi _mutClearBufferfi
#define glClearBufferfv _mutClearBufferfv
#define glClearBufferiv _mutClearBufferiv
#define glClearBufferuiv _mutClearBufferuiv
#define glClearColor _mutClearColor
#define glClearColorIiEXT _mutClearColorIiEXT
#define glClearColorIuiEXT _mutClearColorIuiEXT
#define glClearColorxOES _mutClearColorxOES
#define glClearDepth _mutClearDepth
#define glClearDepthdNV _mutClearDepthdNV
#define glClearDepthf _mutClearDepthf
#define glClearDepthfOES _mutClearDepthfOES
#define glClearDepthxOES _mutClearDepthxOES
#define glClearNamedBufferData _mutClearNamedBufferData
#define glClearNamedBufferDataEXT _mutClearNamedBufferDataEXT
#define glClearNamedBufferSubData _mutClearNamedBufferSubData
#define glClearNamedBufferSubDataEXT _mutClearNamedBufferSubDataEXT
#define glClearNamedFramebufferfi _mutClearNamedFramebufferfi
#define glClearNamedFramebufferfv _mutClearNamedFramebufferfv
#define glClearNamedFramebufferiv _mutClearNamedFramebufferiv
#define glClearNamedFramebufferuiv _mutClearNamedFramebufferuiv
#define glClearPixelLocalStorageuiEXT _mutClearPixelLocalStorageuiEXT
#define glClearStencil _mutClearStencil
#define glClearTexImage _mutClearTexImage
#define glClearTexImageEXT _mutClearTexImageEXT
#define glClearTexSubImage _mutClearTexSubImage
#define glClearTexSubImageEXT _mutClearTexSubImageEXT
#define glClientActiveTexture _mutClientActiveTexture
#define glClientActiveTextureARB _mutClientActiveTextureARB
#define glClientActiveVertexStreamATI _mutClientActiveVertexStreamATI
#define glClientAttribDefaultEXT _mutClientAttribDefaultEXT
#define glClientWaitSync _mutClientWaitSync
#define glClientWaitSyncAPPLE _mutClientWaitSyncAPPLE
#define glClipControl _mutClipControl
#define glClipPlanefOES _mutClipPlanefOES
#define glClipPlanexOES _mutClipPlanexOES
#define glColor3fVertex3fSUN _mutColor3fVertex3fSUN
#define glColor3fVertex3fvSUN _mutColor3fVertex3fvSUN
#define glColor3hNV _mutColor3hNV
#define glColor3hvNV _mutColor3hvNV
#define glColor3xOES _mutColor3xOES
#define glColor3xvOES _mutColor3xvOES
#define glColor4fNormal3fVertex3fSUN _mutColor4fNormal3fVertex3fSUN
#define glColor4fNormal3fVertex3fvSUN _mutColor4fNormal3fVertex3fvSUN
#define glColor4hNV _mutColor4hNV
#define glColor4hvNV _mutColor4hvNV
#define glColor4ubVertex2fSUN _mutColor4ubVertex2fSUN
#define glColor4ubVertex2fvSUN _mutColor4ubVertex2fvSUN
#define glColor4ubVertex3fSUN _mutColor4ubVertex3fSUN
#define glColor4ubVertex3fvSUN _mutColor4ubVertex3fvSUN
#define glColor4xOES _mutColor4xOES
#define glColor4xvOES _mutColor4xvOES
#define glColorFormatNV _mutColorFormatNV
#define glColorFragmentOp1ATI _mutColorFragmentOp1ATI
#define glColorFragmentOp2ATI _mutColorFragmentOp2ATI
#define glColorFragmentOp3ATI _mutColorFragmentOp3ATI
#define glColorMask _mutColorMask
#define glColorMaskIndexedEXT _mutColorMaskIndexedEXT
#define glColorMaski _mutColorMaski
#define glColorMaskiEXT _mutColorMaskiEXT
#define glColorMaskiOES _mutColorMaskiOES
#define glColorP3ui _mutColorP3ui
#define glColorP3uiv _mutColorP3uiv
#define glColorP4ui _mutColorP4ui
#define glColorP4uiv _mutColorP4uiv
#define glColorPointerEXT _mutColorPointerEXT
#define glColorPointerListIBM _mutColorPointerListIBM
#define glColorPointervINTEL _mutColorPointervINTEL
#define glColorSubTable _mutColorSubTable
#define glColorSubTableEXT _mutColorSubTableEXT
#define glColorTable _mutColorTable
#define glColorTableEXT _mutColorTableEXT
#define glColorTableParameterfv _mutColorTableParameterfv
#define glColorTableParameterfvSGI _mutColorTableParameterfvSGI
#define glColorTableParameteriv _mutColorTableParameteriv
#define glColorTableParameterivSGI _mutColorTableParameterivSGI
#define glColorTableSGI _mutColorTableSGI
#define glCombinerInputNV _mutCombinerInputNV
#define glCombinerOutputNV _mutCombinerOutputNV
#define glCombinerParameterfNV _mutCombinerParameterfNV
#define glCombinerParameterfvNV _mutCombinerParameterfvNV
#define glCombinerParameteriNV _mutCombinerParameteriNV
#define glCombinerParameterivNV _mutCombinerParameterivNV
#define glCombinerStageParameterfvNV _mutCombinerStageParameterfvNV
#define glCommandListSegmentsNV _mutCommandListSegmentsNV
#define glCompileCommandListNV _mutCompileCommandListNV
#define glCompileShader _mutCompileShader
#define glCompileShaderARB _mutCompileShaderARB
#define glCompileShaderIncludeARB _mutCompileShaderIncludeARB
#define glCompressedMultiTexImage1DEXT _mutCompressedMultiTexImage1DEXT
#define glCompressedMultiTexImage2DEXT _mutCompressedMultiTexImage2DEXT
#define glCompressedMultiTexImage3DEXT _mutCompressedMultiTexImage3DEXT
#define glCompressedMultiTexSubImage1DEXT _mutCompressedMultiTexSubImage1DEXT
#define glCompressedMultiTexSubImage2DEXT _mutCompressedMultiTexSubImage2DEXT
#define glCompressedMultiTexSubImage3DEXT _mutCompressedMultiTexSubImage3DEXT
#define glCompressedTexImage1D _mutCompressedTexImage1D
#define glCompressedTexImage1DARB _mutCompressedTexImage1DARB
#define glCompressedTexImage2D _mutCompressedTexImage2D
#define glCompressedTexImage2DARB _mutCompressedTexImage2DARB
#define glCompressedTexImage3D _mutCompressedTexImage3D
#define glCompressedTexImage3DARB _mutCompressedTexImage3DARB
#define glCompressedTexImage3DOES _mutCompressedTexImage3DOES
#define glCompressedTexSubImage1D _mutCompressedTexSubImage1D
#define glCompressedTexSubImage1DARB _mutCompressedTexSubImage1DARB
#define glCompressedTexSubImage2D _mutCompressedTexSubImage2D
#define glCompressedTexSubImage2DARB _mutCompressedTexSubImage2DARB
#define glCompressedTexSubImage3D _mutCompressedTexSubImage3D
#define glCompressedTexSubImage3DARB _mutCompressedTexSubImage3DARB
#define glCompressedTexSubImage3DOES _mutCompressedTexSubImage3DOES
#define glCompressedTextureImage1DEXT _mutCompressedTextureImage1DEXT
#define glCompressedTextureImage2DEXT _mutCompressedTextureImage2DEXT
#define glCompressedTextureImage3DEXT _mutCompressedTextureImage3DEXT
#define glCompressedTextureSubImage1D _mutCompressedTextureSubImage1D
#define glCompressedTextureSubImage1DEXT _mutCompressedTextureSubImage1DEXT
#define glCompressedTextureSubImage2D _mutCompressedTextureSubImage2D
#define glCompressedTextureSubImage2DEXT _mutCompressedTextureSubImage2DEXT
#define glCompressedTextureSubImage3D _mutCompressedTextureSubImage3D
#define glCompressedTextureSubImage3DEXT _mutCompressedTextureSubImage3DEXT
#define glConservativeRasterParameterfNV _mutConservativeRasterParameterfNV
#define glConservativeRasterParameteriNV _mutConservativeRasterParameteriNV
#define glConvolutionFilter1D _mutConvolutionFilter1D
#define glConvolutionFilter1DEXT _mutConvolutionFilter1DEXT
#define glConvolutionFilter2D _mutConvolutionFilter2D
#define glConvolutionFilter2DEXT _mutConvolutionFilter2DEXT
#define glConvolutionParameterf _mutConvolutionParameterf
#define glConvolutionParameterfEXT _mutConvolutionParameterfEXT
#define glConvolutionParameterfv _mutConvolutionParameterfv
#define glConvolutionParameterfvEXT _mutConvolutionParameterfvEXT
#define glConvolutionParameteri _mutConvolutionParameteri
#define glConvolutionParameteriEXT _mutConvolutionParameteriEXT
#define glConvolutionParameteriv _mutConvolutionParameteriv
#define glConvolutionParameterivEXT _mutConvolutionParameterivEXT
#define glConvolutionParameterxOES _mutConvolutionParameterxOES
#define glConvolutionParameterxvOES _mutConvolutionParameterxvOES
#define glCopyBufferSubData _mutCopyBufferSubData
#define glCopyBufferSubDataNV _mutCopyBufferSubDataNV
#define glCopyColorSubTable _mutCopyColorSubTable
#define glCopyColorSubTableEXT _mutCopyColorSubTableEXT
#define glCopyColorTable _mutCopyColorTable
#define glCopyColorTableSGI _mutCopyColorTableSGI
#define glCopyConvolutionFilter1D _mutCopyConvolutionFilter1D
#define glCopyConvolutionFilter1DEXT _mutCopyConvolutionFilter1DEXT
#define glCopyConvolutionFilter2D _mutCopyConvolutionFilter2D
#define glCopyConvolutionFilter2DEXT _mutCopyConvolutionFilter2DEXT
#define glCopyImageSubData _mutCopyImageSubData
#define glCopyImageSubDataEXT _mutCopyImageSubDataEXT
#define glCopyImageSubDataNV _mutCopyImageSubDataNV
#define glCopyImageSubDataOES _mutCopyImageSubDataOES
#define glCopyMultiTexImage1DEXT _mutCopyMultiTexImage1DEXT
#define glCopyMultiTexImage2DEXT _mutCopyMultiTexImage2DEXT
#define glCopyMultiTexSubImage1DEXT _mutCopyMultiTexSubImage1DEXT
#define glCopyMultiTexSubImage2DEXT _mutCopyMultiTexSubImage2DEXT
#define glCopyMultiTexSubImage3DEXT _mutCopyMultiTexSubImage3DEXT
#define glCopyNamedBufferSubData _mutCopyNamedBufferSubData
#define glCopyPathNV _mutCopyPathNV
#define glCopyTexImage1D _mutCopyTexImage1D
#define glCopyTexImage1DEXT _mutCopyTexImage1DEXT
#define glCopyTexImage2D _mutCopyTexImage2D
#define glCopyTexImage2DEXT _mutCopyTexImage2DEXT
#define glCopyTexSubImage1D _mutCopyTexSubImage1D
#define glCopyTexSubImage1DEXT _mutCopyTexSubImage1DEXT
#define glCopyTexSubImage2D _mutCopyTexSubImage2D
#define glCopyTexSubImage2DEXT _mutCopyTexSubImage2DEXT
#define glCopyTexSubImage3D _mutCopyTexSubImage3D
#define glCopyTexSubImage3DEXT _mutCopyTexSubImage3DEXT
#define glCopyTexSubImage3DOES _mutCopyTexSubImage3DOES
#define glCopyTextureImage1DEXT _mutCopyTextureImage1DEXT
#define glCopyTextureImage2DEXT _mutCopyTextureImage2DEXT
#define glCopyTextureLevelsAPPLE _mutCopyTextureLevelsAPPLE
#define glCopyTextureSubImage1D _mutCopyTextureSubImage1D
#define glCopyTextureSubImage1DEXT _mutCopyTextureSubImage1DEXT
#define glCopyTextureSubImage2D _mutCopyTextureSubImage2D
#define glCopyTextureSubImage2DEXT _mutCopyTextureSubImage2DEXT
#define glCopyTextureSubImage3D _mutCopyTextureSubImage3D
#define glCopyTextureSubImage3DEXT _mutCopyTextureSubImage3DEXT
#define glCoverFillPathInstancedNV _mutCoverFillPathInstancedNV
#define glCoverFillPathNV _mutCoverFillPathNV
#define glCoverStrokePathInstancedNV _mutCoverStrokePathInstancedNV
#define glCoverStrokePathNV _mutCoverStrokePathNV
#define glCoverageMaskNV _mutCoverageMaskNV
#define glCoverageModulationNV _mutCoverageModulationNV
#define glCoverageModulationTableNV _mutCoverageModulationTableNV
#define glCoverageOperationNV _mutCoverageOperationNV
#define glCreateBuffers _mutCreateBuffers
#define glCreateCommandListsNV _mutCreateCommandListsNV
#define glCreateFramebuffers _mutCreateFramebuffers
#define glCreateMemoryObjectsEXT _mutCreateMemoryObjectsEXT
#define glCreatePerfQueryINTEL _mutCreatePerfQueryINTEL
#define glCreateProgram _mutCreateProgram
#define glCreateProgramObjectARB _mutCreateProgramObjectARB
#define glCreateProgramPipelines _mutCreateProgramPipelines
#define glCreateQueries _mutCreateQueries
#define glCreateRenderbuffers _mutCreateRenderbuffers
#define glCreateSamplers _mutCreateSamplers
#define glCreateShader _mutCreateShader
#define glCreateShaderObjectARB _mutCreateShaderObjectARB
#define glCreateShaderProgramEXT _mutCreateShaderProgramEXT
#define glCreateShaderProgramv _mutCreateShaderProgramv
#define glCreateShaderProgramvEXT _mutCreateShaderProgramvEXT
#define glCreateStatesNV _mutCreateStatesNV
#define glCreateSyncFromCLeventARB _mutCreateSyncFromCLeventARB
#define glCreateTextures _mutCreateTextures
#define glCreateTransformFeedbacks _mutCreateTransformFeedbacks
#define glCreateVertexArrays _mutCreateVertexArrays
#define glCullFace _mutCullFace
#define glCullParameterdvEXT _mutCullParameterdvEXT
#define glCullParameterfvEXT _mutCullParameterfvEXT
#define glCurrentPaletteMatrixARB _mutCurrentPaletteMatrixARB
#define glDebugMessageCallback _mutDebugMessageCallback
#define glDebugMessageCallbackAMD _mutDebugMessageCallbackAMD
#define glDebugMessageCallbackARB _mutDebugMessageCallbackARB
#define glDebugMessageCallbackKHR _mutDebugMessageCallbackKHR
#define glDebugMessageControl _mutDebugMessageControl
#define glDebugMessageControlARB _mutDebugMessageControlARB
#define glDebugMessageControlKHR _mutDebugMessageControlKHR
#define glDebugMessageEnableAMD _mutDebugMessageEnableAMD
#define glDebugMessageInsert _mutDebugMessageInsert
#define glDebugMessageInsertAMD _mutDebugMessageInsertAMD
#define glDebugMessageInsertARB _mutDebugMessageInsertARB
#define glDebugMessageInsertKHR _mutDebugMessageInsertKHR
#define glDeformSGIX _mutDeformSGIX
#define glDeformationMap3dSGIX _mutDeformationMap3dSGIX
#define glDeformationMap3fSGIX _mutDeformationMap3fSGIX
#define glDeleteAsyncMarkersSGIX _mutDeleteAsyncMarkersSGIX
#define glDeleteBufferRegion _mutDeleteBufferRegion
#define glDeleteBuffers _mutDeleteBuffers
#define glDeleteBuffersARB _mutDeleteBuffersARB
#define glDeleteCommandListsNV _mutDeleteCommandListsNV
#define glDeleteFencesAPPLE _mutDeleteFencesAPPLE
#define glDeleteFencesNV _mutDeleteFencesNV
#define glDeleteFragmentShaderATI _mutDeleteFragmentShaderATI
#define glDeleteFramebuffers _mutDeleteFramebuffers
#define glDeleteFramebuffersEXT _mutDeleteFramebuffersEXT
#define glDeleteMemoryObjectsEXT _mutDeleteMemoryObjectsEXT
#define glDeleteNamedStringARB _mutDeleteNamedStringARB
#define glDeleteNamesAMD _mutDeleteNamesAMD
#define glDeleteObjectARB _mutDeleteObjectARB
#define glDeleteOcclusionQueriesNV _mutDeleteOcclusionQueriesNV
#define glDeletePathsNV _mutDeletePathsNV
#define glDeletePerfMonitorsAMD _mutDeletePerfMonitorsAMD
#define glDeletePerfQueryINTEL _mutDeletePerfQueryINTEL
#define glDeleteProgram _mutDeleteProgram
#define glDeleteProgramPipelines _mutDeleteProgramPipelines
#define glDeleteProgramPipelinesEXT _mutDeleteProgramPipelinesEXT
#define glDeleteProgramsARB _mutDeleteProgramsARB
#define glDeleteProgramsNV _mutDeleteProgramsNV
#define glDeleteQueries _mutDeleteQueries
#define glDeleteQueriesARB _mutDeleteQueriesARB
#define glDeleteQueriesEXT _mutDeleteQueriesEXT
#define glDeleteRenderbuffers _mutDeleteRenderbuffers
#define glDeleteRenderbuffersEXT _mutDeleteRenderbuffersEXT
#define glDeleteSamplers _mutDeleteSamplers
#define glDeleteSemaphoresEXT _mutDeleteSemaphoresEXT
#define glDeleteShader _mutDeleteShader
#define glDeleteStatesNV _mutDeleteStatesNV
#define glDeleteSync _mutDeleteSync
#define glDeleteSyncAPPLE _mutDeleteSyncAPPLE
#define glDeleteTextures _mutDeleteTextures
#define glDeleteTexturesEXT _mutDeleteTexturesEXT
#define glDeleteTransformFeedbacks _mutDeleteTransformFeedbacks
#define glDeleteTransformFeedbacksNV _mutDeleteTransformFeedbacksNV
#define glDeleteVertexArrays _mutDeleteVertexArrays
#define glDeleteVertexArraysAPPLE _mutDeleteVertexArraysAPPLE
#define glDeleteVertexArraysOES _mutDeleteVertexArraysOES
#define glDeleteVertexShaderEXT _mutDeleteVertexShaderEXT
#define glDepthBoundsEXT _mutDepthBoundsEXT
#define glDepthBoundsdNV _mutDepthBoundsdNV
#define glDepthFunc _mutDepthFunc
#define glDepthMask _mutDepthMask
#define glDepthRange _mutDepthRange
#define glDepthRangeArrayfvNV _mutDepthRangeArrayfvNV
#define glDepthRangeArrayfvOES _mutDepthRangeArrayfvOES
#define glDepthRangeArrayv _mutDepthRangeArrayv
#define glDepthRangeIndexed _mutDepthRangeIndexed
#define glDepthRangeIndexedfNV _mutDepthRangeIndexedfNV
#define glDepthRangeIndexedfOES _mutDepthRangeIndexedfOES
#define glDepthRangedNV _mutDepthRangedNV
#define glDepthRangef _mutDepthRangef
#define glDepthRangefOES _mutDepthRangefOES
#define glDepthRangexOES _mutDepthRangexOES
#define glDetachObjectARB _mutDetachObjectARB
#define glDetachShader _mutDetachShader
#define glDetailTexFuncSGIS _mutDetailTexFuncSGIS
#define glDisable _mutDisable
#define glDisableClientStateIndexedEXT _mutDisableClientStateIndexedEXT
#define glDisableClientStateiEXT _mutDisableClientStateiEXT
#define glDisableDriverControlQCOM _mutDisableDriverControlQCOM
#define glDisableIndexedEXT _mutDisableIndexedEXT
#define glDisableVariantClientStateEXT _mutDisableVariantClientStateEXT
#define glDisableVertexArrayAttrib _mutDisableVertexArrayAttrib
#define glDisableVertexArrayAttribEXT _mutDisableVertexArrayAttribEXT
#define glDisableVertexArrayEXT _mutDisableVertexArrayEXT
#define glDisableVertexAttribAPPLE _mutDisableVertexAttribAPPLE
#define glDisableVertexAttribArray _mutDisableVertexAttribArray
#define glDisableVertexAttribArrayARB _mutDisableVertexAttribArrayARB
#define glDisablei _mutDisablei
#define glDisableiEXT _mutDisableiEXT
#define glDisableiNV _mutDisableiNV
#define glDisableiOES _mutDisableiOES
#define glDiscardFramebufferEXT _mutDiscardFramebufferEXT
#define glDispatchCompute _mutDispatchCompute
#define glDispatchComputeGroupSizeARB _mutDispatchComputeGroupSizeARB
#define glDispatchComputeIndirect _mutDispatchComputeIndirect
#define glDrawArrays _mutDrawArrays
#define glDrawArraysEXT _mutDrawArraysEXT
#define glDrawArraysIndirect _mutDrawArraysIndirect
#define glDrawArraysInstanced _mutDrawArraysInstanced
#define glDrawArraysInstancedANGLE _mutDrawArraysInstancedANGLE
#define glDrawArraysInstancedARB _mutDrawArraysInstancedARB
#define glDrawArraysInstancedBaseInstance _mutDrawArraysInstancedBaseInstance
#define glDrawArraysInstancedBaseInstanceEXT _mutDrawArraysInstancedBaseInstanceEXT
#define glDrawArraysInstancedEXT _mutDrawArraysInstancedEXT
#define glDrawArraysInstancedNV _mutDrawArraysInstancedNV
#define glDrawBuffer _mutDrawBuffer
#define glDrawBufferRegion _mutDrawBufferRegion
#define glDrawBuffers _mutDrawBuffers
#define glDrawBuffersARB _mutDrawBuffersARB
#define glDrawBuffersATI _mutDrawBuffersATI
#define glDrawBuffersEXT _mutDrawBuffersEXT
#define glDrawBuffersIndexedEXT _mutDrawBuffersIndexedEXT
#define glDrawBuffersNV _mutDrawBuffersNV
#define glDrawCommandsAddressNV _mutDrawCommandsAddressNV
#define glDrawCommandsNV _mutDrawCommandsNV
#define glDrawCommandsStatesAddressNV _mutDrawCommandsStatesAddressNV
#define glDrawCommandsStatesNV _mutDrawCommandsStatesNV
#define glDrawElementArrayAPPLE _mutDrawElementArrayAPPLE
#define glDrawElementArrayATI _mutDrawElementArrayATI
#define glDrawElements _mutDrawElements
#define glDrawElementsBaseVertex _mutDrawElementsBaseVertex
#define glDrawElementsBaseVertexEXT _mutDrawElementsBaseVertexEXT
#define glDrawElementsBaseVertexOES _mutDrawElementsBaseVertexOES
#define glDrawElementsIndirect _mutDrawElementsIndirect
#define glDrawElementsInstanced _mutDrawElementsInstanced
#define glDrawElementsInstancedANGLE _mutDrawElementsInstancedANGLE
#define glDrawElementsInstancedARB _mutDrawElementsInstancedARB
#define glDrawElementsInstancedBaseInstance _mutDrawElementsInstancedBaseInstance
#define glDrawElementsInstancedBaseInstanceEXT _mutDrawElementsInstancedBaseInstanceEXT
#define glDrawElementsInstancedBaseVertex _mutDrawElementsInstancedBaseVertex
#define glDrawElementsInstancedBaseVertexBaseInstance _mutDrawElementsInstancedBaseVertexBaseInstance
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT _mutDrawElementsInstancedBaseVertexBaseInstanceEXT
#define glDrawElementsInstancedBaseVertexEXT _mutDrawElementsInstancedBaseVertexEXT
#define glDrawElementsInstancedBaseVertexOES _mutDrawElementsInstancedBaseVertexOES
#define glDrawElementsInstancedEXT _mutDrawElementsInstancedEXT
#define glDrawElementsInstancedNV _mutDrawElementsInstancedNV
#define glDrawMeshArraysSUN _mutDrawMeshArraysSUN
#define glDrawRangeElementArrayAPPLE _mutDrawRangeElementArrayAPPLE
#define glDrawRangeElementArrayATI _mutDrawRangeElementArrayATI
#define glDrawRangeElements _mutDrawRangeElements
#define glDrawRangeElementsBaseVertex _mutDrawRangeElementsBaseVertex
#define glDrawRangeElementsBaseVertexEXT _mutDrawRangeElementsBaseVertexEXT
#define glDrawRangeElementsBaseVertexOES _mutDrawRangeElementsBaseVertexOES
#define glDrawRangeElementsEXT _mutDrawRangeElementsEXT
#define glDrawTextureNV _mutDrawTextureNV
#define glDrawTransformFeedback _mutDrawTransformFeedback
#define glDrawTransformFeedbackEXT _mutDrawTransformFeedbackEXT
#define glDrawTransformFeedbackInstanced _mutDrawTransformFeedbackInstanced
#define glDrawTransformFeedbackInstancedEXT _mutDrawTransformFeedbackInstancedEXT
#define glDrawTransformFeedbackNV _mutDrawTransformFeedbackNV
#define glDrawTransformFeedbackStream _mutDrawTransformFeedbackStream
#define glDrawTransformFeedbackStreamInstanced _mutDrawTransformFeedbackStreamInstanced
#define glDrawVkImageNV _mutDrawVkImageNV
#define glEGLImageTargetRenderbufferStorageOES _mutEGLImageTargetRenderbufferStorageOES
#define glEGLImageTargetTexture2DOES _mutEGLImageTargetTexture2DOES
#define glEdgeFlagFormatNV _mutEdgeFlagFormatNV
#define glEdgeFlagPointerEXT _mutEdgeFlagPointerEXT
#define glEdgeFlagPointerListIBM _mutEdgeFlagPointerListIBM
#define glElementPointerAPPLE _mutElementPointerAPPLE
#define glElementPointerATI _mutElementPointerATI
#define glEnable _mutEnable
#define glEnableClientStateIndexedEXT _mutEnableClientStateIndexedEXT
#define glEnableClientStateiEXT _mutEnableClientStateiEXT
#define glEnableDriverControlQCOM _mutEnableDriverControlQCOM
#define glEnableIndexedEXT _mutEnableIndexedEXT
#define glEnableVariantClientStateEXT _mutEnableVariantClientStateEXT
#define glEnableVertexArrayAttrib _mutEnableVertexArrayAttrib
#define glEnableVertexArrayAttribEXT _mutEnableVertexArrayAttribEXT
#define glEnableVertexArrayEXT _mutEnableVertexArrayEXT
#define glEnableVertexAttribAPPLE _mutEnableVertexAttribAPPLE
#define glEnableVertexAttribArray _mutEnableVertexAttribArray
#define glEnableVertexAttribArrayARB _mutEnableVertexAttribArrayARB
#define glEnablei _mutEnablei
#define glEnableiEXT _mutEnableiEXT
#define glEnableiNV _mutEnableiNV
#define glEnableiOES _mutEnableiOES
#define glEndConditionalRender _mutEndConditionalRender
#define glEndConditionalRenderNV _mutEndConditionalRenderNV
#define glEndConditionalRenderNVX _mutEndConditionalRenderNVX
#define glEndFragmentShaderATI _mutEndFragmentShaderATI
#define glEndOcclusionQueryNV _mutEndOcclusionQueryNV
#define glEndPerfMonitorAMD _mutEndPerfMonitorAMD
#define glEndPerfQueryINTEL _mutEndPerfQueryINTEL
#define glEndQuery _mutEndQuery
#define glEndQueryARB _mutEndQueryARB
#define glEndQueryEXT _mutEndQueryEXT
#define glEndQueryIndexed _mutEndQueryIndexed
#define glEndTilingQCOM _mutEndTilingQCOM
#define glEndTransformFeedback _mutEndTransformFeedback
#define glEndTransformFeedbackEXT _mutEndTransformFeedbackEXT
#define glEndTransformFeedbackNV _mutEndTransformFeedbackNV
#define glEndVertexShaderEXT _mutEndVertexShaderEXT
#define glEndVideoCaptureNV _mutEndVideoCaptureNV
#define glEvalCoord1xOES _mutEvalCoord1xOES
#define glEvalCoord1xvOES _mutEvalCoord1xvOES
#define glEvalCoord2xOES _mutEvalCoord2xOES
#define glEvalCoord2xvOES _mutEvalCoord2xvOES
#define glEvalMapsNV _mutEvalMapsNV
#define glEvaluateDepthValuesARB _mutEvaluateDepthValuesARB
#define glExecuteProgramNV _mutExecuteProgramNV
#define glExtGetBufferPointervQCOM _mutExtGetBufferPointervQCOM
#define glExtGetBuffersQCOM _mutExtGetBuffersQCOM
#define glExtGetFramebuffersQCOM _mutExtGetFramebuffersQCOM
#define glExtGetProgramBinarySourceQCOM _mutExtGetProgramBinarySourceQCOM
#define glExtGetProgramsQCOM _mutExtGetProgramsQCOM
#define glExtGetRenderbuffersQCOM _mutExtGetRenderbuffersQCOM
#define glExtGetShadersQCOM _mutExtGetShadersQCOM
#define glExtGetTexLevelParameterivQCOM _mutExtGetTexLevelParameterivQCOM
#define glExtGetTexSubImageQCOM _mutExtGetTexSubImageQCOM
#define glExtGetTexturesQCOM _mutExtGetTexturesQCOM
#define glExtIsProgramBinaryQCOM _mutExtIsProgramBinaryQCOM
#define glExtTexObjectStateOverrideiQCOM _mutExtTexObjectStateOverrideiQCOM
#define glExtractComponentEXT _mutExtractComponentEXT
#define glFeedbackBufferxOES _mutFeedbackBufferxOES
#define glFenceSync _mutFenceSync
#define glFenceSyncAPPLE _mutFenceSyncAPPLE
#define glFinalCombinerInputNV _mutFinalCombinerInputNV
#define glFinish _mutFinish
#define glFinishAsyncSGIX _mutFinishAsyncSGIX
#define glFinishFenceAPPLE _mutFinishFenceAPPLE
#define glFinishFenceNV _mutFinishFenceNV
#define glFinishObjectAPPLE _mutFinishObjectAPPLE
#define glFinishTextureSUNX _mutFinishTextureSUNX
#define glFlush _mutFlush
#define glFlushMappedBufferRange _mutFlushMappedBufferRange
#define glFlushMappedBufferRangeAPPLE _mutFlushMappedBufferRangeAPPLE
#define glFlushMappedBufferRangeEXT _mutFlushMappedBufferRangeEXT
#define glFlushMappedNamedBufferRange _mutFlushMappedNamedBufferRange
#define glFlushMappedNamedBufferRangeEXT _mutFlushMappedNamedBufferRangeEXT
#define glFlushPixelDataRangeNV _mutFlushPixelDataRangeNV
#define glFlushRasterSGIX _mutFlushRasterSGIX
#define glFlushStaticDataIBM _mutFlushStaticDataIBM
#define glFlushVertexArrayRangeAPPLE _mutFlushVertexArrayRangeAPPLE
#define glFlushVertexArrayRangeNV _mutFlushVertexArrayRangeNV
#define glFogCoordFormatNV _mutFogCoordFormatNV
#define glFogCoordPointer _mutFogCoordPointer
#define glFogCoordPointerEXT _mutFogCoordPointerEXT
#define glFogCoordPointerListIBM _mutFogCoordPointerListIBM
#define glFogCoordd _mutFogCoordd
#define glFogCoorddEXT _mutFogCoorddEXT
#define glFogCoorddv _mutFogCoorddv
#define glFogCoorddvEXT _mutFogCoorddvEXT
#define glFogCoordf _mutFogCoordf
#define glFogCoordfEXT _mutFogCoordfEXT
#define glFogCoordfv _mutFogCoordfv
#define glFogCoordfvEXT _mutFogCoordfvEXT
#define glFogCoordhNV _mutFogCoordhNV
#define glFogCoordhvNV _mutFogCoordhvNV
#define glFogFuncSGIS _mutFogFuncSGIS
#define glFogxOES _mutFogxOES
#define glFogxvOES _mutFogxvOES
#define glFragmentColorMaterialSGIX _mutFragmentColorMaterialSGIX
#define glFragmentCoverageColorNV _mutFragmentCoverageColorNV
#define glFragmentLightModelfSGIX _mutFragmentLightModelfSGIX
#define glFragmentLightModelfvSGIX _mutFragmentLightModelfvSGIX
#define glFragmentLightModeliSGIX _mutFragmentLightModeliSGIX
#define glFragmentLightModelivSGIX _mutFragmentLightModelivSGIX
#define glFragmentLightfSGIX _mutFragmentLightfSGIX
#define glFragmentLightfvSGIX _mutFragmentLightfvSGIX
#define glFragmentLightiSGIX _mutFragmentLightiSGIX
#define glFragmentLightivSGIX _mutFragmentLightivSGIX
#define glFragmentMaterialfSGIX _mutFragmentMaterialfSGIX
#define glFragmentMaterialfvSGIX _mutFragmentMaterialfvSGIX
#define glFragmentMaterialiSGIX _mutFragmentMaterialiSGIX
#define glFragmentMaterialivSGIX _mutFragmentMaterialivSGIX
#define glFrameTerminatorGREMEDY _mutFrameTerminatorGREMEDY
#define glFrameZoomSGIX _mutFrameZoomSGIX
#define glFramebufferDrawBufferEXT _mutFramebufferDrawBufferEXT
#define glFramebufferDrawBuffersEXT _mutFramebufferDrawBuffersEXT
#define glFramebufferFetchBarrierQCOM _mutFramebufferFetchBarrierQCOM
#define glFramebufferFoveationConfigQCOM _mutFramebufferFoveationConfigQCOM
#define glFramebufferFoveationParametersQCOM _mutFramebufferFoveationParametersQCOM
#define glFramebufferParameteri _mutFramebufferParameteri
#define glFramebufferPixelLocalStorageSizeEXT _mutFramebufferPixelLocalStorageSizeEXT
#define glFramebufferReadBufferEXT _mutFramebufferReadBufferEXT
#define glFramebufferRenderbuffer _mutFramebufferRenderbuffer
#define glFramebufferRenderbufferEXT _mutFramebufferRenderbufferEXT
#define glFramebufferSampleLocationsfvARB _mutFramebufferSampleLocationsfvARB
#define glFramebufferSampleLocationsfvNV _mutFramebufferSampleLocationsfvNV
#define glFramebufferSamplePositionsfvAMD _mutFramebufferSamplePositionsfvAMD
#define glFramebufferTexture _mutFramebufferTexture
#define glFramebufferTexture1D _mutFramebufferTexture1D
#define glFramebufferTexture1DEXT _mutFramebufferTexture1DEXT
#define glFramebufferTexture2D _mutFramebufferTexture2D
#define glFramebufferTexture2DDownsampleIMG _mutFramebufferTexture2DDownsampleIMG
#define glFramebufferTexture2DEXT _mutFramebufferTexture2DEXT
#define glFramebufferTexture2DMultisampleEXT _mutFramebufferTexture2DMultisampleEXT
#define glFramebufferTexture2DMultisampleIMG _mutFramebufferTexture2DMultisampleIMG
#define glFramebufferTexture3D _mutFramebufferTexture3D
#define glFramebufferTexture3DEXT _mutFramebufferTexture3DEXT
#define glFramebufferTexture3DOES _mutFramebufferTexture3DOES
#define glFramebufferTextureARB _mutFramebufferTextureARB
#define glFramebufferTextureEXT _mutFramebufferTextureEXT
#define glFramebufferTextureFaceARB _mutFramebufferTextureFaceARB
#define glFramebufferTextureFaceEXT _mutFramebufferTextureFaceEXT
#define glFramebufferTextureLayer _mutFramebufferTextureLayer
#define glFramebufferTextureLayerARB _mutFramebufferTextureLayerARB
#define glFramebufferTextureLayerDownsampleIMG _mutFramebufferTextureLayerDownsampleIMG
#define glFramebufferTextureLayerEXT _mutFramebufferTextureLayerEXT
#define glFramebufferTextureMultisampleMultiviewOVR _mutFramebufferTextureMultisampleMultiviewOVR
#define glFramebufferTextureMultiviewOVR _mutFramebufferTextureMultiviewOVR
#define glFramebufferTextureOES _mutFramebufferTextureOES
#define glFreeObjectBufferATI _mutFreeObjectBufferATI
#define glFrontFace _mutFrontFace
#define glFrustumfOES _mutFrustumfOES
#define glFrustumxOES _mutFrustumxOES
#define glGenAsyncMarkersSGIX _mutGenAsyncMarkersSGIX
#define glGenBuffers _mutGenBuffers
#define glGenBuffersARB _mutGenBuffersARB
#define glGenFencesAPPLE _mutGenFencesAPPLE
#define glGenFencesNV _mutGenFencesNV
#define glGenFragmentShadersATI _mutGenFragmentShadersATI
#define glGenFramebuffers _mutGenFramebuffers
#define glGenFramebuffersEXT _mutGenFramebuffersEXT
#define glGenNamesAMD _mutGenNamesAMD
#define glGenOcclusionQueriesNV _mutGenOcclusionQueriesNV
#define glGenPathsNV _mutGenPathsNV
#define glGenPerfMonitorsAMD _mutGenPerfMonitorsAMD
#define glGenProgramPipelines _mutGenProgramPipelines
#define glGenProgramPipelinesEXT _mutGenProgramPipelinesEXT
#define glGenProgramsARB _mutGenProgramsARB
#define glGenProgramsNV _mutGenProgramsNV
#define glGenQueries _mutGenQueries
#define glGenQueriesARB _mutGenQueriesARB
#define glGenQueriesEXT _mutGenQueriesEXT
#define glGenRenderbuffers _mutGenRenderbuffers
#define glGenRenderbuffersEXT _mutGenRenderbuffersEXT
#define glGenSamplers _mutGenSamplers
#define glGenSemaphoresEXT _mutGenSemaphoresEXT
#define glGenSymbolsEXT _mutGenSymbolsEXT
#define glGenTextures _mutGenTextures
#define glGenTexturesEXT _mutGenTexturesEXT
#define glGenTransformFeedbacks _mutGenTransformFeedbacks
#define glGenTransformFeedbacksNV _mutGenTransformFeedbacksNV
#define glGenVertexArrays _mutGenVertexArrays
#define glGenVertexArraysAPPLE _mutGenVertexArraysAPPLE
#define glGenVertexArraysOES _mutGenVertexArraysOES
#define glGenVertexShadersEXT _mutGenVertexShadersEXT
#define glGenerateMipmap _mutGenerateMipmap
#define glGenerateMipmapEXT _mutGenerateMipmapEXT
#define glGenerateMultiTexMipmapEXT _mutGenerateMultiTexMipmapEXT
#define glGenerateTextureMipmap _mutGenerateTextureMipmap
#define glGenerateTextureMipmapEXT _mutGenerateTextureMipmapEXT
#define glGetActiveAtomicCounterBufferiv _mutGetActiveAtomicCounterBufferiv
#define glGetActiveAttrib _mutGetActiveAttrib
#define glGetActiveAttribARB _mutGetActiveAttribARB
#define glGetActiveSubroutineName _mutGetActiveSubroutineName
#define glGetActiveSubroutineUniformName _mutGetActiveSubroutineUniformName
#define glGetActiveSubroutineUniformiv _mutGetActiveSubroutineUniformiv
#define glGetActiveUniform _mutGetActiveUniform
#define glGetActiveUniformARB _mutGetActiveUniformARB
#define glGetActiveUniformBlockName _mutGetActiveUniformBlockName
#define glGetActiveUniformBlockiv _mutGetActiveUniformBlockiv
#define glGetActiveUniformName _mutGetActiveUniformName
#define glGetActiveUniformsiv _mutGetActiveUniformsiv
#define glGetActiveVaryingNV _mutGetActiveVaryingNV
#define glGetArrayObjectfvATI _mutGetArrayObjectfvATI
#define glGetArrayObjectivATI _mutGetArrayObjectivATI
#define glGetAttachedObjectsARB _mutGetAttachedObjectsARB
#define glGetAttachedShaders _mutGetAttachedShaders
#define glGetAttribLocation _mutGetAttribLocation
#define glGetAttribLocationARB _mutGetAttribLocationARB
#define glGetBooleanIndexedvEXT _mutGetBooleanIndexedvEXT
#define glGetBooleani_v _mutGetBooleani_v
#define glGetBooleanv _mutGetBooleanv
#define glGetBufferParameteri64v _mutGetBufferParameteri64v
#define glGetBufferParameteriv _mutGetBufferParameteriv
#define glGetBufferParameterivARB _mutGetBufferParameterivARB
#define glGetBufferParameterui64vNV _mutGetBufferParameterui64vNV
#define glGetBufferPointerv _mutGetBufferPointerv
#define glGetBufferPointervARB _mutGetBufferPointervARB
#define glGetBufferPointervOES _mutGetBufferPointervOES
#define glGetBufferSubData _mutGetBufferSubData
#define glGetBufferSubDataARB _mutGetBufferSubDataARB
#define glGetClipPlanefOES _mutGetClipPlanefOES
#define glGetClipPlanexOES _mutGetClipPlanexOES
#define glGetColorTable _mutGetColorTable
#define glGetColorTableEXT _mutGetColorTableEXT
#define glGetColorTableParameterfv _mutGetColorTableParameterfv
#define glGetColorTableParameterfvEXT _mutGetColorTableParameterfvEXT
#define glGetColorTableParameterfvSGI _mutGetColorTableParameterfvSGI
#define glGetColorTableParameteriv _mutGetColorTableParameteriv
#define glGetColorTableParameterivEXT _mutGetColorTableParameterivEXT
#define glGetColorTableParameterivSGI _mutGetColorTableParameterivSGI
#define glGetColorTableSGI _mutGetColorTableSGI
#define glGetCombinerInputParameterfvNV _mutGetCombinerInputParameterfvNV
#define glGetCombinerInputParameterivNV _mutGetCombinerInputParameterivNV
#define glGetCombinerOutputParameterfvNV _mutGetCombinerOutputParameterfvNV
#define glGetCombinerOutputParameterivNV _mutGetCombinerOutputParameterivNV
#define glGetCombinerStageParameterfvNV _mutGetCombinerStageParameterfvNV
#define glGetCommandHeaderNV _mutGetCommandHeaderNV
#define glGetCompressedMultiTexImageEXT _mutGetCompressedMultiTexImageEXT
#define glGetCompressedTexImage _mutGetCompressedTexImage
#define glGetCompressedTexImageARB _mutGetCompressedTexImageARB
#define glGetCompressedTextureImage _mutGetCompressedTextureImage
#define glGetCompressedTextureImageEXT _mutGetCompressedTextureImageEXT
#define glGetCompressedTextureSubImage _mutGetCompressedTextureSubImage
#define glGetConvolutionFilter _mutGetConvolutionFilter
#define glGetConvolutionFilterEXT _mutGetConvolutionFilterEXT
#define glGetConvolutionParameterfv _mutGetConvolutionParameterfv
#define glGetConvolutionParameterfvEXT _mutGetConvolutionParameterfvEXT
#define glGetConvolutionParameteriv _mutGetConvolutionParameteriv
#define glGetConvolutionParameterivEXT _mutGetConvolutionParameterivEXT
#define glGetConvolutionParameterxvOES _mutGetConvolutionParameterxvOES
#define glGetCoverageModulationTableNV _mutGetCoverageModulationTableNV
#define glGetDebugMessageLog _mutGetDebugMessageLog
#define glGetDebugMessageLogAMD _mutGetDebugMessageLogAMD
#define glGetDebugMessageLogARB _mutGetDebugMessageLogARB
#define glGetDebugMessageLogKHR _mutGetDebugMessageLogKHR
#define glGetDetailTexFuncSGIS _mutGetDetailTexFuncSGIS
#define glGetDoubleIndexedvEXT _mutGetDoubleIndexedvEXT
#define glGetDoublei_v _mutGetDoublei_v
#define glGetDoublei_vEXT _mutGetDoublei_vEXT
#define glGetDoublev _mutGetDoublev
#define glGetDriverControlStringQCOM _mutGetDriverControlStringQCOM
#define glGetDriverControlsQCOM _mutGetDriverControlsQCOM
#define glGetError _mutGetError
#define glGetFenceivNV _mutGetFenceivNV
#define glGetFinalCombinerInputParameterfvNV _mutGetFinalCombinerInputParameterfvNV
#define glGetFinalCombinerInputParameterivNV _mutGetFinalCombinerInputParameterivNV
#define glGetFirstPerfQueryIdINTEL _mutGetFirstPerfQueryIdINTEL
#define glGetFixedvOES _mutGetFixedvOES
#define glGetFloatIndexedvEXT _mutGetFloatIndexedvEXT
#define glGetFloati_v _mutGetFloati_v
#define glGetFloati_vEXT _mutGetFloati_vEXT
#define glGetFloati_vNV _mutGetFloati_vNV
#define glGetFloati_vOES _mutGetFloati_vOES
#define glGetFloatv _mutGetFloatv
#define glGetFogFuncSGIS _mutGetFogFuncSGIS
#define glGetFragDataIndex _mutGetFragDataIndex
#define glGetFragDataIndexEXT _mutGetFragDataIndexEXT
#define glGetFragDataLocation _mutGetFragDataLocation
#define glGetFragDataLocationEXT _mutGetFragDataLocationEXT
#define glGetFragmentLightfvSGIX _mutGetFragmentLightfvSGIX
#define glGetFragmentLightivSGIX _mutGetFragmentLightivSGIX
#define glGetFragmentMaterialfvSGIX _mutGetFragmentMaterialfvSGIX
#define glGetFragmentMaterialivSGIX _mutGetFragmentMaterialivSGIX
#define glGetFramebufferAttachmentParameteriv _mutGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameterivEXT _mutGetFramebufferAttachmentParameterivEXT
#define glGetFramebufferParameterfvAMD _mutGetFramebufferParameterfvAMD
#define glGetFramebufferParameteriv _mutGetFramebufferParameteriv
#define glGetFramebufferParameterivEXT _mutGetFramebufferParameterivEXT
#define glGetFramebufferPixelLocalStorageSizeEXT _mutGetFramebufferPixelLocalStorageSizeEXT
#define glGetGraphicsResetStatus _mutGetGraphicsResetStatus
#define glGetGraphicsResetStatusARB _mutGetGraphicsResetStatusARB
#define glGetGraphicsResetStatusEXT _mutGetGraphicsResetStatusEXT
#define glGetGraphicsResetStatusKHR _mutGetGraphicsResetStatusKHR
#define glGetHandleARB _mutGetHandleARB
#define glGetHistogram _mutGetHistogram
#define glGetHistogramEXT _mutGetHistogramEXT
#define glGetHistogramParameterfv _mutGetHistogramParameterfv
#define glGetHistogramParameterfvEXT _mutGetHistogramParameterfvEXT
#define glGetHistogramParameteriv _mutGetHistogramParameteriv
#define glGetHistogramParameterivEXT _mutGetHistogramParameterivEXT
#define glGetHistogramParameterxvOES _mutGetHistogramParameterxvOES
#define glGetImageHandleARB _mutGetImageHandleARB
#define glGetImageHandleNV _mutGetImageHandleNV
#define glGetImageTransformParameterfvHP _mutGetImageTransformParameterfvHP
#define glGetImageTransformParameterivHP _mutGetImageTransformParameterivHP
#define glGetInfoLogARB _mutGetInfoLogARB
#define glGetInstrumentsSGIX _mutGetInstrumentsSGIX
#define glGetInteger64i_v _mutGetInteger64i_v
#define glGetInteger64v _mutGetInteger64v
#define glGetInteger64vAPPLE _mutGetInteger64vAPPLE
#define glGetIntegerIndexedvEXT _mutGetIntegerIndexedvEXT
#define glGetIntegeri_v _mutGetIntegeri_v
#define glGetIntegeri_vEXT _mutGetIntegeri_vEXT
#define glGetIntegerui64i_vNV _mutGetIntegerui64i_vNV
#define glGetIntegerui64vNV _mutGetIntegerui64vNV
#define glGetIntegerv _mutGetIntegerv
#define glGetInternalformatSampleivNV _mutGetInternalformatSampleivNV
#define glGetInternalformati64v _mutGetInternalformati64v
#define glGetInternalformativ _mutGetInternalformativ
#define glGetInvariantBooleanvEXT _mutGetInvariantBooleanvEXT
#define glGetInvariantFloatvEXT _mutGetInvariantFloatvEXT
#define glGetInvariantIntegervEXT _mutGetInvariantIntegervEXT
#define glGetLightxOES _mutGetLightxOES
#define glGetListParameterfvSGIX _mutGetListParameterfvSGIX
#define glGetListParameterivSGIX _mutGetListParameterivSGIX
#define glGetLocalConstantBooleanvEXT _mutGetLocalConstantBooleanvEXT
#define glGetLocalConstantFloatvEXT _mutGetLocalConstantFloatvEXT
#define glGetLocalConstantIntegervEXT _mutGetLocalConstantIntegervEXT
#define glGetMapAttribParameterfvNV _mutGetMapAttribParameterfvNV
#define glGetMapAttribParameterivNV _mutGetMapAttribParameterivNV
#define glGetMapControlPointsNV _mutGetMapControlPointsNV
#define glGetMapParameterfvNV _mutGetMapParameterfvNV
#define glGetMapParameterivNV _mutGetMapParameterivNV
#define glGetMapxvOES _mutGetMapxvOES
#define glGetMaterialxOES _mutGetMaterialxOES
#define glGetMemoryObjectParameterivEXT _mutGetMemoryObjectParameterivEXT
#define glGetMinmax _mutGetMinmax
#define glGetMinmaxEXT _mutGetMinmaxEXT
#define glGetMinmaxParameterfv _mutGetMinmaxParameterfv
#define glGetMinmaxParameterfvEXT _mutGetMinmaxParameterfvEXT
#define glGetMinmaxParameteriv _mutGetMinmaxParameteriv
#define glGetMinmaxParameterivEXT _mutGetMinmaxParameterivEXT
#define glGetMultiTexEnvfvEXT _mutGetMultiTexEnvfvEXT
#define glGetMultiTexEnvivEXT _mutGetMultiTexEnvivEXT
#define glGetMultiTexGendvEXT _mutGetMultiTexGendvEXT
#define glGetMultiTexGenfvEXT _mutGetMultiTexGenfvEXT
#define glGetMultiTexGenivEXT _mutGetMultiTexGenivEXT
#define glGetMultiTexImageEXT _mutGetMultiTexImageEXT
#define glGetMultiTexLevelParameterfvEXT _mutGetMultiTexLevelParameterfvEXT
#define glGetMultiTexLevelParameterivEXT _mutGetMultiTexLevelParameterivEXT
#define glGetMultiTexParameterIivEXT _mutGetMultiTexParameterIivEXT
#define glGetMultiTexParameterIuivEXT _mutGetMultiTexParameterIuivEXT
#define glGetMultiTexParameterfvEXT _mutGetMultiTexParameterfvEXT
#define glGetMultiTexParameterivEXT _mutGetMultiTexParameterivEXT
#define glGetMultisamplefv _mutGetMultisamplefv
#define glGetMultisamplefvNV _mutGetMultisamplefvNV
#define glGetNamedBufferParameteri64v _mutGetNamedBufferParameteri64v
#define glGetNamedBufferParameteriv _mutGetNamedBufferParameteriv
#define glGetNamedBufferParameterivEXT _mutGetNamedBufferParameterivEXT
#define glGetNamedBufferParameterui64vNV _mutGetNamedBufferParameterui64vNV
#define glGetNamedBufferPointerv _mutGetNamedBufferPointerv
#define glGetNamedBufferPointervEXT _mutGetNamedBufferPointervEXT
#define glGetNamedBufferSubData _mutGetNamedBufferSubData
#define glGetNamedBufferSubDataEXT _mutGetNamedBufferSubDataEXT
#define glGetNamedFramebufferAttachmentParameteriv _mutGetNamedFramebufferAttachmentParameteriv
#define glGetNamedFramebufferAttachmentParameterivEXT _mutGetNamedFramebufferAttachmentParameterivEXT
#define glGetNamedFramebufferParameterfvAMD _mutGetNamedFramebufferParameterfvAMD
#define glGetNamedFramebufferParameteriv _mutGetNamedFramebufferParameteriv
#define glGetNamedFramebufferParameterivEXT _mutGetNamedFramebufferParameterivEXT
#define glGetNamedProgramLocalParameterIivEXT _mutGetNamedProgramLocalParameterIivEXT
#define glGetNamedProgramLocalParameterIuivEXT _mutGetNamedProgramLocalParameterIuivEXT
#define glGetNamedProgramLocalParameterdvEXT _mutGetNamedProgramLocalParameterdvEXT
#define glGetNamedProgramLocalParameterfvEXT _mutGetNamedProgramLocalParameterfvEXT
#define glGetNamedProgramStringEXT _mutGetNamedProgramStringEXT
#define glGetNamedProgramivEXT _mutGetNamedProgramivEXT
#define glGetNamedRenderbufferParameteriv _mutGetNamedRenderbufferParameteriv
#define glGetNamedRenderbufferParameterivEXT _mutGetNamedRenderbufferParameterivEXT
#define glGetNamedStringARB _mutGetNamedStringARB
#define glGetNamedStringivARB _mutGetNamedStringivARB
#define glGetNextPerfQueryIdINTEL _mutGetNextPerfQueryIdINTEL
#define glGetObjectBufferfvATI _mutGetObjectBufferfvATI
#define glGetObjectBufferivATI _mutGetObjectBufferivATI
#define glGetObjectLabel _mutGetObjectLabel
#define glGetObjectLabelEXT _mutGetObjectLabelEXT
#define glGetObjectLabelKHR _mutGetObjectLabelKHR
#define glGetObjectParameterfvARB _mutGetObjectParameterfvARB
#define glGetObjectParameterivAPPLE _mutGetObjectParameterivAPPLE
#define glGetObjectParameterivARB _mutGetObjectParameterivARB
#define glGetObjectPtrLabel _mutGetObjectPtrLabel
#define glGetObjectPtrLabelKHR _mutGetObjectPtrLabelKHR
#define glGetOcclusionQueryivNV _mutGetOcclusionQueryivNV
#define glGetOcclusionQueryuivNV _mutGetOcclusionQueryuivNV
#define glGetPathColorGenfvNV _mutGetPathColorGenfvNV
#define glGetPathColorGenivNV _mutGetPathColorGenivNV
#define glGetPathCommandsNV _mutGetPathCommandsNV
#define glGetPathCoordsNV _mutGetPathCoordsNV
#define glGetPathDashArrayNV _mutGetPathDashArrayNV
#define glGetPathLengthNV _mutGetPathLengthNV
#define glGetPathMetricRangeNV _mutGetPathMetricRangeNV
#define glGetPathMetricsNV _mutGetPathMetricsNV
#define glGetPathParameterfvNV _mutGetPathParameterfvNV
#define glGetPathParameterivNV _mutGetPathParameterivNV
#define glGetPathSpacingNV _mutGetPathSpacingNV
#define glGetPathTexGenfvNV _mutGetPathTexGenfvNV
#define glGetPathTexGenivNV _mutGetPathTexGenivNV
#define glGetPerfCounterInfoINTEL _mutGetPerfCounterInfoINTEL
#define glGetPerfMonitorCounterDataAMD _mutGetPerfMonitorCounterDataAMD
#define glGetPerfMonitorCounterInfoAMD _mutGetPerfMonitorCounterInfoAMD
#define glGetPerfMonitorCounterStringAMD _mutGetPerfMonitorCounterStringAMD
#define glGetPerfMonitorCountersAMD _mutGetPerfMonitorCountersAMD
#define glGetPerfMonitorGroupStringAMD _mutGetPerfMonitorGroupStringAMD
#define glGetPerfMonitorGroupsAMD _mutGetPerfMonitorGroupsAMD
#define glGetPerfQueryDataINTEL _mutGetPerfQueryDataINTEL
#define glGetPerfQueryIdByNameINTEL _mutGetPerfQueryIdByNameINTEL
#define glGetPerfQueryInfoINTEL _mutGetPerfQueryInfoINTEL
#define glGetPixelMapxv _mutGetPixelMapxv
#define glGetPixelTexGenParameterfvSGIS _mutGetPixelTexGenParameterfvSGIS
#define glGetPixelTexGenParameterivSGIS _mutGetPixelTexGenParameterivSGIS
#define glGetPixelTransformParameterfvEXT _mutGetPixelTransformParameterfvEXT
#define glGetPixelTransformParameterivEXT _mutGetPixelTransformParameterivEXT
#define glGetPointerIndexedvEXT _mutGetPointerIndexedvEXT
#define glGetPointeri_vEXT _mutGetPointeri_vEXT
#define glGetPointerv _mutGetPointerv
#define glGetPointervEXT _mutGetPointervEXT
#define glGetPointervKHR _mutGetPointervKHR
#define glGetProgramBinary _mutGetProgramBinary
#define glGetProgramBinaryOES _mutGetProgramBinaryOES
#define glGetProgramEnvParameterIivNV _mutGetProgramEnvParameterIivNV
#define glGetProgramEnvParameterIuivNV _mutGetProgramEnvParameterIuivNV
#define glGetProgramEnvParameterdvARB _mutGetProgramEnvParameterdvARB
#define glGetProgramEnvParameterfvARB _mutGetProgramEnvParameterfvARB
#define glGetProgramInfoLog _mutGetProgramInfoLog
#define glGetProgramInterfaceiv _mutGetProgramInterfaceiv
#define glGetProgramLocalParameterIivNV _mutGetProgramLocalParameterIivNV
#define glGetProgramLocalParameterIuivNV _mutGetProgramLocalParameterIuivNV
#define glGetProgramLocalParameterdvARB _mutGetProgramLocalParameterdvARB
#define glGetProgramLocalParameterfvARB _mutGetProgramLocalParameterfvARB
#define glGetProgramNamedParameterdvNV _mutGetProgramNamedParameterdvNV
#define glGetProgramNamedParameterfvNV _mutGetProgramNamedParameterfvNV
#define glGetProgramParameterdvNV _mutGetProgramParameterdvNV
#define glGetProgramParameterfvNV _mutGetProgramParameterfvNV
#define glGetProgramPipelineInfoLog _mutGetProgramPipelineInfoLog
#define glGetProgramPipelineInfoLogEXT _mutGetProgramPipelineInfoLogEXT
#define glGetProgramPipelineiv _mutGetProgramPipelineiv
#define glGetProgramPipelineivEXT _mutGetProgramPipelineivEXT
#define glGetProgramResourceIndex _mutGetProgramResourceIndex
#define glGetProgramResourceLocation _mutGetProgramResourceLocation
#define glGetProgramResourceLocationIndex _mutGetProgramResourceLocationIndex
#define glGetProgramResourceLocationIndexEXT _mutGetProgramResourceLocationIndexEXT
#define glGetProgramResourceName _mutGetProgramResourceName
#define glGetProgramResourcefvNV _mutGetProgramResourcefvNV
#define glGetProgramResourceiv _mutGetProgramResourceiv
#define glGetProgramStageiv _mutGetProgramStageiv
#define glGetProgramStringARB _mutGetProgramStringARB
#define glGetProgramStringNV _mutGetProgramStringNV
#define glGetProgramSubroutineParameteruivNV _mutGetProgramSubroutineParameteruivNV
#define glGetProgramiv _mutGetProgramiv
#define glGetProgramivARB _mutGetProgramivARB
#define glGetProgramivNV _mutGetProgramivNV
#define glGetQueryBufferObjecti64v _mutGetQueryBufferObjecti64v
#define glGetQueryBufferObjectiv _mutGetQueryBufferObjectiv
#define glGetQueryBufferObjectui64v _mutGetQueryBufferObjectui64v
#define glGetQueryBufferObjectuiv _mutGetQueryBufferObjectuiv
#define glGetQueryIndexediv _mutGetQueryIndexediv
#define glGetQueryObjecti64v _mutGetQueryObjecti64v
#define glGetQueryObjecti64vEXT _mutGetQueryObjecti64vEXT
#define glGetQueryObjectiv _mutGetQueryObjectiv
#define glGetQueryObjectivARB _mutGetQueryObjectivARB
#define glGetQueryObjectivEXT _mutGetQueryObjectivEXT
#define glGetQueryObjectui64v _mutGetQueryObjectui64v
#define glGetQueryObjectui64vEXT _mutGetQueryObjectui64vEXT
#define glGetQueryObjectuiv _mutGetQueryObjectuiv
#define glGetQueryObjectuivARB _mutGetQueryObjectuivARB
#define glGetQueryObjectuivEXT _mutGetQueryObjectuivEXT
#define glGetQueryiv _mutGetQueryiv
#define glGetQueryivARB _mutGetQueryivARB
#define glGetQueryivEXT _mutGetQueryivEXT
#define glGetRenderbufferParameteriv _mutGetRenderbufferParameteriv
#define glGetRenderbufferParameterivEXT _mutGetRenderbufferParameterivEXT
#define glGetSamplerParameterIiv _mutGetSamplerParameterIiv
#define glGetSamplerParameterIivEXT _mutGetSamplerParameterIivEXT
#define glGetSamplerParameterIivOES _mutGetSamplerParameterIivOES
#define glGetSamplerParameterIuiv _mutGetSamplerParameterIuiv
#define glGetSamplerParameterIuivEXT _mutGetSamplerParameterIuivEXT
#define glGetSamplerParameterIuivOES _mutGetSamplerParameterIuivOES
#define glGetSamplerParameterfv _mutGetSamplerParameterfv
#define glGetSamplerParameteriv _mutGetSamplerParameteriv
#define glGetSemaphoreParameterui64vEXT _mutGetSemaphoreParameterui64vEXT
#define glGetSeparableFilter _mutGetSeparableFilter
#define glGetSeparableFilterEXT _mutGetSeparableFilterEXT
#define glGetShaderInfoLog _mutGetShaderInfoLog
#define glGetShaderPrecisionFormat _mutGetShaderPrecisionFormat
#define glGetShaderSource _mutGetShaderSource
#define glGetShaderSourceARB _mutGetShaderSourceARB
#define glGetShaderiv _mutGetShaderiv
#define glGetSharpenTexFuncSGIS _mutGetSharpenTexFuncSGIS
#define glGetStageIndexNV _mutGetStageIndexNV
#define glGetString _mutGetString
#define glGetStringi _mutGetStringi
#define glGetSubroutineIndex _mutGetSubroutineIndex
#define glGetSubroutineUniformLocation _mutGetSubroutineUniformLocation
#define glGetSynciv _mutGetSynciv
#define glGetSyncivAPPLE _mutGetSyncivAPPLE
#define glGetTexBumpParameterfvATI _mutGetTexBumpParameterfvATI
#define glGetTexBumpParameterivATI _mutGetTexBumpParameterivATI
#define glGetTexEnvxvOES _mutGetTexEnvxvOES
#define glGetTexFilterFuncSGIS _mutGetTexFilterFuncSGIS
#define glGetTexGenxvOES _mutGetTexGenxvOES
#define glGetTexImage _mutGetTexImage
#define glGetTexLevelParameterfv _mutGetTexLevelParameterfv
#define glGetTexLevelParameteriv _mutGetTexLevelParameteriv
#define glGetTexLevelParameterxvOES _mutGetTexLevelParameterxvOES
#define glGetTexParameterIiv _mutGetTexParameterIiv
#define glGetTexParameterIivEXT _mutGetTexParameterIivEXT
#define glGetTexParameterIivOES _mutGetTexParameterIivOES
#define glGetTexParameterIuiv _mutGetTexParameterIuiv
#define glGetTexParameterIuivEXT _mutGetTexParameterIuivEXT
#define glGetTexParameterIuivOES _mutGetTexParameterIuivOES
#define glGetTexParameterPointervAPPLE _mutGetTexParameterPointervAPPLE
#define glGetTexParameterfv _mutGetTexParameterfv
#define glGetTexParameteriv _mutGetTexParameteriv
#define glGetTexParameterxvOES _mutGetTexParameterxvOES
#define glGetTextureHandleARB _mutGetTextureHandleARB
#define glGetTextureHandleIMG _mutGetTextureHandleIMG
#define glGetTextureHandleNV _mutGetTextureHandleNV
#define glGetTextureImage _mutGetTextureImage
#define glGetTextureImageEXT _mutGetTextureImageEXT
#define glGetTextureLevelParameterfv _mutGetTextureLevelParameterfv
#define glGetTextureLevelParameterfvEXT _mutGetTextureLevelParameterfvEXT
#define glGetTextureLevelParameteriv _mutGetTextureLevelParameteriv
#define glGetTextureLevelParameterivEXT _mutGetTextureLevelParameterivEXT
#define glGetTextureParameterIiv _mutGetTextureParameterIiv
#define glGetTextureParameterIivEXT _mutGetTextureParameterIivEXT
#define glGetTextureParameterIuiv _mutGetTextureParameterIuiv
#define glGetTextureParameterIuivEXT _mutGetTextureParameterIuivEXT
#define glGetTextureParameterfv _mutGetTextureParameterfv
#define glGetTextureParameterfvEXT _mutGetTextureParameterfvEXT
#define glGetTextureParameteriv _mutGetTextureParameteriv
#define glGetTextureParameterivEXT _mutGetTextureParameterivEXT
#define glGetTextureSamplerHandleARB _mutGetTextureSamplerHandleARB
#define glGetTextureSamplerHandleIMG _mutGetTextureSamplerHandleIMG
#define glGetTextureSamplerHandleNV _mutGetTextureSamplerHandleNV
#define glGetTextureSubImage _mutGetTextureSubImage
#define glGetTrackMatrixivNV _mutGetTrackMatrixivNV
#define glGetTransformFeedbackVarying _mutGetTransformFeedbackVarying
#define glGetTransformFeedbackVaryingEXT _mutGetTransformFeedbackVaryingEXT
#define glGetTransformFeedbackVaryingNV _mutGetTransformFeedbackVaryingNV
#define glGetTransformFeedbacki64_v _mutGetTransformFeedbacki64_v
#define glGetTransformFeedbacki_v _mutGetTransformFeedbacki_v
#define glGetTransformFeedbackiv _mutGetTransformFeedbackiv
#define glGetTranslatedShaderSourceANGLE _mutGetTranslatedShaderSourceANGLE
#define glGetUniformBlockIndex _mutGetUniformBlockIndex
#define glGetUniformBufferSizeEXT _mutGetUniformBufferSizeEXT
#define glGetUniformIndices _mutGetUniformIndices
#define glGetUniformLocation _mutGetUniformLocation
#define glGetUniformLocationARB _mutGetUniformLocationARB
#define glGetUniformOffsetEXT _mutGetUniformOffsetEXT
#define glGetUniformSubroutineuiv _mutGetUniformSubroutineuiv
#define glGetUniformdv _mutGetUniformdv
#define glGetUniformfv _mutGetUniformfv
#define glGetUniformfvARB _mutGetUniformfvARB
#define glGetUniformi64vARB _mutGetUniformi64vARB
#define glGetUniformi64vNV _mutGetUniformi64vNV
#define glGetUniformiv _mutGetUniformiv
#define glGetUniformivARB _mutGetUniformivARB
#define glGetUniformui64vARB _mutGetUniformui64vARB
#define glGetUniformui64vNV _mutGetUniformui64vNV
#define glGetUniformuiv _mutGetUniformuiv
#define glGetUniformuivEXT _mutGetUniformuivEXT
#define glGetUnsignedBytei_vEXT _mutGetUnsignedBytei_vEXT
#define glGetUnsignedBytevEXT _mutGetUnsignedBytevEXT
#define glGetVariantArrayObjectfvATI _mutGetVariantArrayObjectfvATI
#define glGetVariantArrayObjectivATI _mutGetVariantArrayObjectivATI
#define glGetVariantBooleanvEXT _mutGetVariantBooleanvEXT
#define glGetVariantFloatvEXT _mutGetVariantFloatvEXT
#define glGetVariantIntegervEXT _mutGetVariantIntegervEXT
#define glGetVariantPointervEXT _mutGetVariantPointervEXT
#define glGetVaryingLocationNV _mutGetVaryingLocationNV
#define glGetVertexArrayIndexed64iv _mutGetVertexArrayIndexed64iv
#define glGetVertexArrayIndexediv _mutGetVertexArrayIndexediv
#define glGetVertexArrayIntegeri_vEXT _mutGetVertexArrayIntegeri_vEXT
#define glGetVertexArrayIntegervEXT _mutGetVertexArrayIntegervEXT
#define glGetVertexArrayPointeri_vEXT _mutGetVertexArrayPointeri_vEXT
#define glGetVertexArrayPointervEXT _mutGetVertexArrayPointervEXT
#define glGetVertexArrayiv _mutGetVertexArrayiv
#define glGetVertexAttribArrayObjectfvATI _mutGetVertexAttribArrayObjectfvATI
#define glGetVertexAttribArrayObjectivATI _mutGetVertexAttribArrayObjectivATI
#define glGetVertexAttribIiv _mutGetVertexAttribIiv
#define glGetVertexAttribIivEXT _mutGetVertexAttribIivEXT
#define glGetVertexAttribIuiv _mutGetVertexAttribIuiv
#define glGetVertexAttribIuivEXT _mutGetVertexAttribIuivEXT
#define glGetVertexAttribLdv _mutGetVertexAttribLdv
#define glGetVertexAttribLdvEXT _mutGetVertexAttribLdvEXT
#define glGetVertexAttribLi64vNV _mutGetVertexAttribLi64vNV
#define glGetVertexAttribLui64vARB _mutGetVertexAttribLui64vARB
#define glGetVertexAttribLui64vNV _mutGetVertexAttribLui64vNV
#define glGetVertexAttribPointerv _mutGetVertexAttribPointerv
#define glGetVertexAttribPointervARB _mutGetVertexAttribPointervARB
#define glGetVertexAttribPointervNV _mutGetVertexAttribPointervNV
#define glGetVertexAttribdv _mutGetVertexAttribdv
#define glGetVertexAttribdvARB _mutGetVertexAttribdvARB
#define glGetVertexAttribdvNV _mutGetVertexAttribdvNV
#define glGetVertexAttribfv _mutGetVertexAttribfv
#define glGetVertexAttribfvARB _mutGetVertexAttribfvARB
#define glGetVertexAttribfvNV _mutGetVertexAttribfvNV
#define glGetVertexAttribiv _mutGetVertexAttribiv
#define glGetVertexAttribivARB _mutGetVertexAttribivARB
#define glGetVertexAttribivNV _mutGetVertexAttribivNV
#define glGetVideoCaptureStreamdvNV _mutGetVideoCaptureStreamdvNV
#define glGetVideoCaptureStreamfvNV _mutGetVideoCaptureStreamfvNV
#define glGetVideoCaptureStreamivNV _mutGetVideoCaptureStreamivNV
#define glGetVideoCaptureivNV _mutGetVideoCaptureivNV
#define glGetVideoi64vNV _mutGetVideoi64vNV
#define glGetVideoivNV _mutGetVideoivNV
#define glGetVideoui64vNV _mutGetVideoui64vNV
#define glGetVideouivNV _mutGetVideouivNV
#define glGetVkProcAddrNV _mutGetVkProcAddrNV
#define glGetnColorTable _mutGetnColorTable
#define glGetnColorTableARB _mutGetnColorTableARB
#define glGetnCompressedTexImage _mutGetnCompressedTexImage
#define glGetnCompressedTexImageARB _mutGetnCompressedTexImageARB
#define glGetnConvolutionFilter _mutGetnConvolutionFilter
#define glGetnConvolutionFilterARB _mutGetnConvolutionFilterARB
#define glGetnHistogram _mutGetnHistogram
#define glGetnHistogramARB _mutGetnHistogramARB
#define glGetnMapdv _mutGetnMapdv
#define glGetnMapdvARB _mutGetnMapdvARB
#define glGetnMapfv _mutGetnMapfv
#define glGetnMapfvARB _mutGetnMapfvARB
#define glGetnMapiv _mutGetnMapiv
#define glGetnMapivARB _mutGetnMapivARB
#define glGetnMinmax _mutGetnMinmax
#define glGetnMinmaxARB _mutGetnMinmaxARB
#define glGetnPixelMapfv _mutGetnPixelMapfv
#define glGetnPixelMapfvARB _mutGetnPixelMapfvARB
#define glGetnPixelMapuiv _mutGetnPixelMapuiv
#define glGetnPixelMapuivARB _mutGetnPixelMapuivARB
#define glGetnPixelMapusv _mutGetnPixelMapusv
#define glGetnPixelMapusvARB _mutGetnPixelMapusvARB
#define glGetnPolygonStipple _mutGetnPolygonStipple
#define glGetnPolygonStippleARB _mutGetnPolygonStippleARB
#define glGetnSeparableFilter _mutGetnSeparableFilter
#define glGetnSeparableFilterARB _mutGetnSeparableFilterARB
#define glGetnTexImage _mutGetnTexImage
#define glGetnTexImageARB _mutGetnTexImageARB
#define glGetnUniformdv _mutGetnUniformdv
#define glGetnUniformdvARB _mutGetnUniformdvARB
#define glGetnUniformfv _mutGetnUniformfv
#define glGetnUniformfvARB _mutGetnUniformfvARB
#define glGetnUniformfvEXT _mutGetnUniformfvEXT
#define glGetnUniformfvKHR _mutGetnUniformfvKHR
#define glGetnUniformi64vARB _mutGetnUniformi64vARB
#define glGetnUniformiv _mutGetnUniformiv
#define glGetnUniformivARB _mutGetnUniformivARB
#define glGetnUniformivEXT _mutGetnUniformivEXT
#define glGetnUniformivKHR _mutGetnUniformivKHR
#define glGetnUniformui64vARB _mutGetnUniformui64vARB
#define glGetnUniformuiv _mutGetnUniformuiv
#define glGetnUniformuivARB _mutGetnUniformuivARB
#define glGetnUniformuivKHR _mutGetnUniformuivKHR
#define glGlobalAlphaFactorbSUN _mutGlobalAlphaFactorbSUN
#define glGlobalAlphaFactordSUN _mutGlobalAlphaFactordSUN
#define glGlobalAlphaFactorfSUN _mutGlobalAlphaFactorfSUN
#define glGlobalAlphaFactoriSUN _mutGlobalAlphaFactoriSUN
#define glGlobalAlphaFactorsSUN _mutGlobalAlphaFactorsSUN
#define glGlobalAlphaFactorubSUN _mutGlobalAlphaFactorubSUN
#define glGlobalAlphaFactoruiSUN _mutGlobalAlphaFactoruiSUN
#define glGlobalAlphaFactorusSUN _mutGlobalAlphaFactorusSUN
#define glHint _mutHint
#define glHintPGI _mutHintPGI
#define glHistogram _mutHistogram
#define glHistogramEXT _mutHistogramEXT
#define glIglooInterfaceSGIX _mutIglooInterfaceSGIX
#define glImageTransformParameterfHP _mutImageTransformParameterfHP
#define glImageTransformParameterfvHP _mutImageTransformParameterfvHP
#define glImageTransformParameteriHP _mutImageTransformParameteriHP
#define glImageTransformParameterivHP _mutImageTransformParameterivHP
#define glImportMemoryFdEXT _mutImportMemoryFdEXT
#define glImportMemoryWin32HandleEXT _mutImportMemoryWin32HandleEXT
#define glImportMemoryWin32NameEXT _mutImportMemoryWin32NameEXT
#define glImportSemaphoreFdEXT _mutImportSemaphoreFdEXT
#define glImportSemaphoreWin32HandleEXT _mutImportSemaphoreWin32HandleEXT
#define glImportSemaphoreWin32NameEXT _mutImportSemaphoreWin32NameEXT
#define glImportSyncEXT _mutImportSyncEXT
#define glIndexFormatNV _mutIndexFormatNV
#define glIndexFuncEXT _mutIndexFuncEXT
#define glIndexMaterialEXT _mutIndexMaterialEXT
#define glIndexPointerEXT _mutIndexPointerEXT
#define glIndexPointerListIBM _mutIndexPointerListIBM
#define glIndexxOES _mutIndexxOES
#define glIndexxvOES _mutIndexxvOES
#define glInsertComponentEXT _mutInsertComponentEXT
#define glInsertEventMarkerEXT _mutInsertEventMarkerEXT
#define glInstrumentsBufferSGIX _mutInstrumentsBufferSGIX
#define glInterpolatePathsNV _mutInterpolatePathsNV
#define glInvalidateBufferData _mutInvalidateBufferData
#define glInvalidateBufferSubData _mutInvalidateBufferSubData
#define glInvalidateFramebuffer _mutInvalidateFramebuffer
#define glInvalidateNamedFramebufferData _mutInvalidateNamedFramebufferData
#define glInvalidateNamedFramebufferSubData _mutInvalidateNamedFramebufferSubData
#define glInvalidateSubFramebuffer _mutInvalidateSubFramebuffer
#define glInvalidateTexImage _mutInvalidateTexImage
#define glInvalidateTexSubImage _mutInvalidateTexSubImage
#define glIsAsyncMarkerSGIX _mutIsAsyncMarkerSGIX
#define glIsBuffer _mutIsBuffer
#define glIsBufferARB _mutIsBufferARB
#define glIsBufferResidentNV _mutIsBufferResidentNV
#define glIsCommandListNV _mutIsCommandListNV
#define glIsEnabled _mutIsEnabled
#define glIsEnabledIndexedEXT _mutIsEnabledIndexedEXT
#define glIsEnabledi _mutIsEnabledi
#define glIsEnablediEXT _mutIsEnablediEXT
#define glIsEnablediNV _mutIsEnablediNV
#define glIsEnablediOES _mutIsEnablediOES
#define glIsFenceAPPLE _mutIsFenceAPPLE
#define glIsFenceNV _mutIsFenceNV
#define glIsFramebuffer _mutIsFramebuffer
#define glIsFramebufferEXT _mutIsFramebufferEXT
#define glIsImageHandleResidentARB _mutIsImageHandleResidentARB
#define glIsImageHandleResidentNV _mutIsImageHandleResidentNV
#define glIsMemoryObjectEXT _mutIsMemoryObjectEXT
#define glIsNameAMD _mutIsNameAMD
#define glIsNamedBufferResidentNV _mutIsNamedBufferResidentNV
#define glIsNamedStringARB _mutIsNamedStringARB
#define glIsObjectBufferATI _mutIsObjectBufferATI
#define glIsOcclusionQueryNV _mutIsOcclusionQueryNV
#define glIsPathNV _mutIsPathNV
#define glIsPointInFillPathNV _mutIsPointInFillPathNV
#define glIsPointInStrokePathNV _mutIsPointInStrokePathNV
#define glIsProgram _mutIsProgram
#define glIsProgramARB _mutIsProgramARB
#define glIsProgramNV _mutIsProgramNV
#define glIsProgramPipeline _mutIsProgramPipeline
#define glIsProgramPipelineEXT _mutIsProgramPipelineEXT
#define glIsQuery _mutIsQuery
#define glIsQueryARB _mutIsQueryARB
#define glIsQueryEXT _mutIsQueryEXT
#define glIsRenderbuffer _mutIsRenderbuffer
#define glIsRenderbufferEXT _mutIsRenderbufferEXT
#define glIsSampler _mutIsSampler
#define glIsSemaphoreEXT _mutIsSemaphoreEXT
#define glIsShader _mutIsShader
#define glIsStateNV _mutIsStateNV
#define glIsSync _mutIsSync
#define glIsSyncAPPLE _mutIsSyncAPPLE
#define glIsTexture _mutIsTexture
#define glIsTextureEXT _mutIsTextureEXT
#define glIsTextureHandleResidentARB _mutIsTextureHandleResidentARB
#define glIsTextureHandleResidentNV _mutIsTextureHandleResidentNV
#define glIsTransformFeedback _mutIsTransformFeedback
#define glIsTransformFeedbackNV _mutIsTransformFeedbackNV
#define glIsVariantEnabledEXT _mutIsVariantEnabledEXT
#define glIsVertexArray _mutIsVertexArray
#define glIsVertexArrayAPPLE _mutIsVertexArrayAPPLE
#define glIsVertexArrayOES _mutIsVertexArrayOES
#define glIsVertexAttribEnabledAPPLE _mutIsVertexAttribEnabledAPPLE
#define glLGPUCopyImageSubDataNVX _mutLGPUCopyImageSubDataNVX
#define glLGPUInterlockNVX _mutLGPUInterlockNVX
#define glLGPUNamedBufferSubDataNVX _mutLGPUNamedBufferSubDataNVX
#define glLabelObjectEXT _mutLabelObjectEXT
#define glLightEnviSGIX _mutLightEnviSGIX
#define glLightModelxOES _mutLightModelxOES
#define glLightModelxvOES _mutLightModelxvOES
#define glLightxOES _mutLightxOES
#define glLightxvOES _mutLightxvOES
#define glLineWidth _mutLineWidth
#define glLineWidthxOES _mutLineWidthxOES
#define glLinkProgram _mutLinkProgram
#define glLinkProgramARB _mutLinkProgramARB
#define glListDrawCommandsStatesClientNV _mutListDrawCommandsStatesClientNV
#define glListParameterfSGIX _mutListParameterfSGIX
#define glListParameterfvSGIX _mutListParameterfvSGIX
#define glListParameteriSGIX _mutListParameteriSGIX
#define glListParameterivSGIX _mutListParameterivSGIX
#define glLoadIdentityDeformationMapSGIX _mutLoadIdentityDeformationMapSGIX
#define glLoadMatrixxOES _mutLoadMatrixxOES
#define glLoadProgramNV _mutLoadProgramNV
#define glLoadTransposeMatrixd _mutLoadTransposeMatrixd
#define glLoadTransposeMatrixdARB _mutLoadTransposeMatrixdARB
#define glLoadTransposeMatrixf _mutLoadTransposeMatrixf
#define glLoadTransposeMatrixfARB _mutLoadTransposeMatrixfARB
#define glLoadTransposeMatrixxOES _mutLoadTransposeMatrixxOES
#define glLockArraysEXT _mutLockArraysEXT
#define glLogicOp _mutLogicOp
#define glMakeBufferNonResidentNV _mutMakeBufferNonResidentNV
#define glMakeBufferResidentNV _mutMakeBufferResidentNV
#define glMakeImageHandleNonResidentARB _mutMakeImageHandleNonResidentARB
#define glMakeImageHandleNonResidentNV _mutMakeImageHandleNonResidentNV
#define glMakeImageHandleResidentARB _mutMakeImageHandleResidentARB
#define glMakeImageHandleResidentNV _mutMakeImageHandleResidentNV
#define glMakeNamedBufferNonResidentNV _mutMakeNamedBufferNonResidentNV
#define glMakeNamedBufferResidentNV _mutMakeNamedBufferResidentNV
#define glMakeTextureHandleNonResidentARB _mutMakeTextureHandleNonResidentARB
#define glMakeTextureHandleNonResidentNV _mutMakeTextureHandleNonResidentNV
#define glMakeTextureHandleResidentARB _mutMakeTextureHandleResidentARB
#define glMakeTextureHandleResidentNV _mutMakeTextureHandleResidentNV
#define glMap1xOES _mutMap1xOES
#define glMap2xOES _mutMap2xOES
#define glMapBuffer _mutMapBuffer
#define glMapBufferARB _mutMapBufferARB
#define glMapBufferOES _mutMapBufferOES
#define glMapBufferRange _mutMapBufferRange
#define glMapBufferRangeEXT _mutMapBufferRangeEXT
#define glMapControlPointsNV _mutMapControlPointsNV
#define glMapGrid1xOES _mutMapGrid1xOES
#define glMapGrid2xOES _mutMapGrid2xOES
#define glMapNamedBuffer _mutMapNamedBuffer
#define glMapNamedBufferEXT _mutMapNamedBufferEXT
#define glMapNamedBufferRange _mutMapNamedBufferRange
#define glMapNamedBufferRangeEXT _mutMapNamedBufferRangeEXT
#define glMapObjectBufferATI _mutMapObjectBufferATI
#define glMapParameterfvNV _mutMapParameterfvNV
#define glMapParameterivNV _mutMapParameterivNV
#define glMapTexture2DINTEL _mutMapTexture2DINTEL
#define glMapVertexAttrib1dAPPLE _mutMapVertexAttrib1dAPPLE
#define glMapVertexAttrib1fAPPLE _mutMapVertexAttrib1fAPPLE
#define glMapVertexAttrib2dAPPLE _mutMapVertexAttrib2dAPPLE
#define glMapVertexAttrib2fAPPLE _mutMapVertexAttrib2fAPPLE
#define glMaterialxOES _mutMaterialxOES
#define glMaterialxvOES _mutMaterialxvOES
#define glMatrixFrustumEXT _mutMatrixFrustumEXT
#define glMatrixIndexPointerARB _mutMatrixIndexPointerARB
#define glMatrixIndexubvARB _mutMatrixIndexubvARB
#define glMatrixIndexuivARB _mutMatrixIndexuivARB
#define glMatrixIndexusvARB _mutMatrixIndexusvARB
#define glMatrixLoad3x2fNV _mutMatrixLoad3x2fNV
#define glMatrixLoad3x3fNV _mutMatrixLoad3x3fNV
#define glMatrixLoadIdentityEXT _mutMatrixLoadIdentityEXT
#define glMatrixLoadTranspose3x3fNV _mutMatrixLoadTranspose3x3fNV
#define glMatrixLoadTransposedEXT _mutMatrixLoadTransposedEXT
#define glMatrixLoadTransposefEXT _mutMatrixLoadTransposefEXT
#define glMatrixLoaddEXT _mutMatrixLoaddEXT
#define glMatrixLoadfEXT _mutMatrixLoadfEXT
#define glMatrixMult3x2fNV _mutMatrixMult3x2fNV
#define glMatrixMult3x3fNV _mutMatrixMult3x3fNV
#define glMatrixMultTranspose3x3fNV _mutMatrixMultTranspose3x3fNV
#define glMatrixMultTransposedEXT _mutMatrixMultTransposedEXT
#define glMatrixMultTransposefEXT _mutMatrixMultTransposefEXT
#define glMatrixMultdEXT _mutMatrixMultdEXT
#define glMatrixMultfEXT _mutMatrixMultfEXT
#define glMatrixOrthoEXT _mutMatrixOrthoEXT
#define glMatrixPopEXT _mutMatrixPopEXT
#define glMatrixPushEXT _mutMatrixPushEXT
#define glMatrixRotatedEXT _mutMatrixRotatedEXT
#define glMatrixRotatefEXT _mutMatrixRotatefEXT
#define glMatrixScaledEXT _mutMatrixScaledEXT
#define glMatrixScalefEXT _mutMatrixScalefEXT
#define glMatrixTranslatedEXT _mutMatrixTranslatedEXT
#define glMatrixTranslatefEXT _mutMatrixTranslatefEXT
#define glMaxShaderCompilerThreadsARB _mutMaxShaderCompilerThreadsARB
#define glMemoryBarrier _mutMemoryBarrier
#define glMemoryBarrierByRegion _mutMemoryBarrierByRegion
#define glMemoryBarrierEXT _mutMemoryBarrierEXT
#define glMemoryObjectParameterivEXT _mutMemoryObjectParameterivEXT
#define glMinSampleShading _mutMinSampleShading
#define glMinSampleShadingARB _mutMinSampleShadingARB
#define glMinSampleShadingOES _mutMinSampleShadingOES
#define glMinmax _mutMinmax
#define glMinmaxEXT _mutMinmaxEXT
#define glMultMatrixxOES _mutMultMatrixxOES
#define glMultTransposeMatrixd _mutMultTransposeMatrixd
#define glMultTransposeMatrixdARB _mutMultTransposeMatrixdARB
#define glMultTransposeMatrixf _mutMultTransposeMatrixf
#define glMultTransposeMatrixfARB _mutMultTransposeMatrixfARB
#define glMultTransposeMatrixxOES _mutMultTransposeMatrixxOES
#define glMultiDrawArrays _mutMultiDrawArrays
#define glMultiDrawArraysEXT _mutMultiDrawArraysEXT
#define glMultiDrawArraysIndirect _mutMultiDrawArraysIndirect
#define glMultiDrawArraysIndirectAMD _mutMultiDrawArraysIndirectAMD
#define glMultiDrawArraysIndirectBindlessCountNV _mutMultiDrawArraysIndirectBindlessCountNV
#define glMultiDrawArraysIndirectBindlessNV _mutMultiDrawArraysIndirectBindlessNV
#define glMultiDrawArraysIndirectCountARB _mutMultiDrawArraysIndirectCountARB
#define glMultiDrawArraysIndirectEXT _mutMultiDrawArraysIndirectEXT
#define glMultiDrawElementArrayAPPLE _mutMultiDrawElementArrayAPPLE
#define glMultiDrawElements _mutMultiDrawElements
#define glMultiDrawElementsBaseVertex _mutMultiDrawElementsBaseVertex
#define glMultiDrawElementsBaseVertexEXT _mutMultiDrawElementsBaseVertexEXT
#define glMultiDrawElementsBaseVertexOES _mutMultiDrawElementsBaseVertexOES
#define glMultiDrawElementsEXT _mutMultiDrawElementsEXT
#define glMultiDrawElementsIndirect _mutMultiDrawElementsIndirect
#define glMultiDrawElementsIndirectAMD _mutMultiDrawElementsIndirectAMD
#define glMultiDrawElementsIndirectBindlessCountNV _mutMultiDrawElementsIndirectBindlessCountNV
#define glMultiDrawElementsIndirectBindlessNV _mutMultiDrawElementsIndirectBindlessNV
#define glMultiDrawElementsIndirectCountARB _mutMultiDrawElementsIndirectCountARB
#define glMultiDrawElementsIndirectEXT _mutMultiDrawElementsIndirectEXT
#define glMultiDrawRangeElementArrayAPPLE _mutMultiDrawRangeElementArrayAPPLE
#define glMultiModeDrawArraysIBM _mutMultiModeDrawArraysIBM
#define glMultiModeDrawElementsIBM _mutMultiModeDrawElementsIBM
#define glMultiTexBufferEXT _mutMultiTexBufferEXT
#define glMultiTexCoord1bOES _mutMultiTexCoord1bOES
#define glMultiTexCoord1bvOES _mutMultiTexCoord1bvOES
#define glMultiTexCoord1d _mutMultiTexCoord1d
#define glMultiTexCoord1dARB _mutMultiTexCoord1dARB
#define glMultiTexCoord1dv _mutMultiTexCoord1dv
#define glMultiTexCoord1dvARB _mutMultiTexCoord1dvARB
#define glMultiTexCoord1f _mutMultiTexCoord1f
#define glMultiTexCoord1fARB _mutMultiTexCoord1fARB
#define glMultiTexCoord1fv _mutMultiTexCoord1fv
#define glMultiTexCoord1fvARB _mutMultiTexCoord1fvARB
#define glMultiTexCoord1hNV _mutMultiTexCoord1hNV
#define glMultiTexCoord1hvNV _mutMultiTexCoord1hvNV
#define glMultiTexCoord1i _mutMultiTexCoord1i
#define glMultiTexCoord1iARB _mutMultiTexCoord1iARB
#define glMultiTexCoord1iv _mutMultiTexCoord1iv
#define glMultiTexCoord1ivARB _mutMultiTexCoord1ivARB
#define glMultiTexCoord1s _mutMultiTexCoord1s
#define glMultiTexCoord1sARB _mutMultiTexCoord1sARB
#define glMultiTexCoord1sv _mutMultiTexCoord1sv
#define glMultiTexCoord1svARB _mutMultiTexCoord1svARB
#define glMultiTexCoord1xOES _mutMultiTexCoord1xOES
#define glMultiTexCoord1xvOES _mutMultiTexCoord1xvOES
#define glMultiTexCoord2bOES _mutMultiTexCoord2bOES
#define glMultiTexCoord2bvOES _mutMultiTexCoord2bvOES
#define glMultiTexCoord2d _mutMultiTexCoord2d
#define glMultiTexCoord2dARB _mutMultiTexCoord2dARB
#define glMultiTexCoord2dv _mutMultiTexCoord2dv
#define glMultiTexCoord2dvARB _mutMultiTexCoord2dvARB
#define glMultiTexCoord2f _mutMultiTexCoord2f
#define glMultiTexCoord2fARB _mutMultiTexCoord2fARB
#define glMultiTexCoord2fv _mutMultiTexCoord2fv
#define glMultiTexCoord2fvARB _mutMultiTexCoord2fvARB
#define glMultiTexCoord2hNV _mutMultiTexCoord2hNV
#define glMultiTexCoord2hvNV _mutMultiTexCoord2hvNV
#define glMultiTexCoord2i _mutMultiTexCoord2i
#define glMultiTexCoord2iARB _mutMultiTexCoord2iARB
#define glMultiTexCoord2iv _mutMultiTexCoord2iv
#define glMultiTexCoord2ivARB _mutMultiTexCoord2ivARB
#define glMultiTexCoord2s _mutMultiTexCoord2s
#define glMultiTexCoord2sARB _mutMultiTexCoord2sARB
#define glMultiTexCoord2sv _mutMultiTexCoord2sv
#define glMultiTexCoord2svARB _mutMultiTexCoord2svARB
#define glMultiTexCoord2xOES _mutMultiTexCoord2xOES
#define glMultiTexCoord2xvOES _mutMultiTexCoord2xvOES
#define glMultiTexCoord3bOES _mutMultiTexCoord3bOES
#define glMultiTexCoord3bvOES _mutMultiTexCoord3bvOES
#define glMultiTexCoord3d _mutMultiTexCoord3d
#define glMultiTexCoord3dARB _mutMultiTexCoord3dARB
#define glMultiTexCoord3dv _mutMultiTexCoord3dv
#define glMultiTexCoord3dvARB _mutMultiTexCoord3dvARB
#define glMultiTexCoord3f _mutMultiTexCoord3f
#define glMultiTexCoord3fARB _mutMultiTexCoord3fARB
#define glMultiTexCoord3fv _mutMultiTexCoord3fv
#define glMultiTexCoord3fvARB _mutMultiTexCoord3fvARB
#define glMultiTexCoord3hNV _mutMultiTexCoord3hNV
#define glMultiTexCoord3hvNV _mutMultiTexCoord3hvNV
#define glMultiTexCoord3i _mutMultiTexCoord3i
#define glMultiTexCoord3iARB _mutMultiTexCoord3iARB
#define glMultiTexCoord3iv _mutMultiTexCoord3iv
#define glMultiTexCoord3ivARB _mutMultiTexCoord3ivARB
#define glMultiTexCoord3s _mutMultiTexCoord3s
#define glMultiTexCoord3sARB _mutMultiTexCoord3sARB
#define glMultiTexCoord3sv _mutMultiTexCoord3sv
#define glMultiTexCoord3svARB _mutMultiTexCoord3svARB
#define glMultiTexCoord3xOES _mutMultiTexCoord3xOES
#define glMultiTexCoord3xvOES _mutMultiTexCoord3xvOES
#define glMultiTexCoord4bOES _mutMultiTexCoord4bOES
#define glMultiTexCoord4bvOES _mutMultiTexCoord4bvOES
#define glMultiTexCoord4d _mutMultiTexCoord4d
#define glMultiTexCoord4dARB _mutMultiTexCoord4dARB
#define glMultiTexCoord4dv _mutMultiTexCoord4dv
#define glMultiTexCoord4dvARB _mutMultiTexCoord4dvARB
#define glMultiTexCoord4f _mutMultiTexCoord4f
#define glMultiTexCoord4fARB _mutMultiTexCoord4fARB
#define glMultiTexCoord4fv _mutMultiTexCoord4fv
#define glMultiTexCoord4fvARB _mutMultiTexCoord4fvARB
#define glMultiTexCoord4hNV _mutMultiTexCoord4hNV
#define glMultiTexCoord4hvNV _mutMultiTexCoord4hvNV
#define glMultiTexCoord4i _mutMultiTexCoord4i
#define glMultiTexCoord4iARB _mutMultiTexCoord4iARB
#define glMultiTexCoord4iv _mutMultiTexCoord4iv
#define glMultiTexCoord4ivARB _mutMultiTexCoord4ivARB
#define glMultiTexCoord4s _mutMultiTexCoord4s
#define glMultiTexCoord4sARB _mutMultiTexCoord4sARB
#define glMultiTexCoord4sv _mutMultiTexCoord4sv
#define glMultiTexCoord4svARB _mutMultiTexCoord4svARB
#define glMultiTexCoord4xOES _mutMultiTexCoord4xOES
#define glMultiTexCoord4xvOES _mutMultiTexCoord4xvOES
#define glMultiTexCoordP1ui _mutMultiTexCoordP1ui
#define glMultiTexCoordP1uiv _mutMultiTexCoordP1uiv
#define glMultiTexCoordP2ui _mutMultiTexCoordP2ui
#define glMultiTexCoordP2uiv _mutMultiTexCoordP2uiv
#define glMultiTexCoordP3ui _mutMultiTexCoordP3ui
#define glMultiTexCoordP3uiv _mutMultiTexCoordP3uiv
#define glMultiTexCoordP4ui _mutMultiTexCoordP4ui
#define glMultiTexCoordP4uiv _mutMultiTexCoordP4uiv
#define glMultiTexCoordPointerEXT _mutMultiTexCoordPointerEXT
#define glMultiTexEnvfEXT _mutMultiTexEnvfEXT
#define glMultiTexEnvfvEXT _mutMultiTexEnvfvEXT
#define glMultiTexEnviEXT _mutMultiTexEnviEXT
#define glMultiTexEnvivEXT _mutMultiTexEnvivEXT
#define glMultiTexGendEXT _mutMultiTexGendEXT
#define glMultiTexGendvEXT _mutMultiTexGendvEXT
#define glMultiTexGenfEXT _mutMultiTexGenfEXT
#define glMultiTexGenfvEXT _mutMultiTexGenfvEXT
#define glMultiTexGeniEXT _mutMultiTexGeniEXT
#define glMultiTexGenivEXT _mutMultiTexGenivEXT
#define glMultiTexImage1DEXT _mutMultiTexImage1DEXT
#define glMultiTexImage2DEXT _mutMultiTexImage2DEXT
#define glMultiTexImage3DEXT _mutMultiTexImage3DEXT
#define glMultiTexParameterIivEXT _mutMultiTexParameterIivEXT
#define glMultiTexParameterIuivEXT _mutMultiTexParameterIuivEXT
#define glMultiTexParameterfEXT _mutMultiTexParameterfEXT
#define glMultiTexParameterfvEXT _mutMultiTexParameterfvEXT
#define glMultiTexParameteriEXT _mutMultiTexParameteriEXT
#define glMultiTexParameterivEXT _mutMultiTexParameterivEXT
#define glMultiTexRenderbufferEXT _mutMultiTexRenderbufferEXT
#define glMultiTexSubImage1DEXT _mutMultiTexSubImage1DEXT
#define glMultiTexSubImage2DEXT _mutMultiTexSubImage2DEXT
#define glMultiTexSubImage3DEXT _mutMultiTexSubImage3DEXT
#define glMulticastBarrierNV _mutMulticastBarrierNV
#define glMulticastBlitFramebufferNV _mutMulticastBlitFramebufferNV
#define glMulticastBufferSubDataNV _mutMulticastBufferSubDataNV
#define glMulticastCopyBufferSubDataNV _mutMulticastCopyBufferSubDataNV
#define glMulticastCopyImageSubDataNV _mutMulticastCopyImageSubDataNV
#define glMulticastFramebufferSampleLocationsfvNV _mutMulticastFramebufferSampleLocationsfvNV
#define glMulticastGetQueryObjecti64vNV _mutMulticastGetQueryObjecti64vNV
#define glMulticastGetQueryObjectivNV _mutMulticastGetQueryObjectivNV
#define glMulticastGetQueryObjectui64vNV _mutMulticastGetQueryObjectui64vNV
#define glMulticastGetQueryObjectuivNV _mutMulticastGetQueryObjectuivNV
#define glMulticastWaitSyncNV _mutMulticastWaitSyncNV
#define glNamedBufferData _mutNamedBufferData
#define glNamedBufferDataEXT _mutNamedBufferDataEXT
#define glNamedBufferPageCommitmentARB _mutNamedBufferPageCommitmentARB
#define glNamedBufferPageCommitmentEXT _mutNamedBufferPageCommitmentEXT
#define glNamedBufferStorage _mutNamedBufferStorage
#define glNamedBufferStorageEXT _mutNamedBufferStorageEXT
#define glNamedBufferStorageExternalEXT _mutNamedBufferStorageExternalEXT
#define glNamedBufferStorageMemEXT _mutNamedBufferStorageMemEXT
#define glNamedBufferSubData _mutNamedBufferSubData
#define glNamedBufferSubDataEXT _mutNamedBufferSubDataEXT
#define glNamedCopyBufferSubDataEXT _mutNamedCopyBufferSubDataEXT
#define glNamedFramebufferDrawBuffer _mutNamedFramebufferDrawBuffer
#define glNamedFramebufferDrawBuffers _mutNamedFramebufferDrawBuffers
#define glNamedFramebufferParameteri _mutNamedFramebufferParameteri
#define glNamedFramebufferParameteriEXT _mutNamedFramebufferParameteriEXT
#define glNamedFramebufferReadBuffer _mutNamedFramebufferReadBuffer
#define glNamedFramebufferRenderbuffer _mutNamedFramebufferRenderbuffer
#define glNamedFramebufferRenderbufferEXT _mutNamedFramebufferRenderbufferEXT
#define glNamedFramebufferSampleLocationsfvARB _mutNamedFramebufferSampleLocationsfvARB
#define glNamedFramebufferSampleLocationsfvNV _mutNamedFramebufferSampleLocationsfvNV
#define glNamedFramebufferSamplePositionsfvAMD _mutNamedFramebufferSamplePositionsfvAMD
#define glNamedFramebufferTexture _mutNamedFramebufferTexture
#define glNamedFramebufferTexture1DEXT _mutNamedFramebufferTexture1DEXT
#define glNamedFramebufferTexture2DEXT _mutNamedFramebufferTexture2DEXT
#define glNamedFramebufferTexture3DEXT _mutNamedFramebufferTexture3DEXT
#define glNamedFramebufferTextureEXT _mutNamedFramebufferTextureEXT
#define glNamedFramebufferTextureFaceEXT _mutNamedFramebufferTextureFaceEXT
#define glNamedFramebufferTextureLayer _mutNamedFramebufferTextureLayer
#define glNamedFramebufferTextureLayerEXT _mutNamedFramebufferTextureLayerEXT
#define glNamedProgramLocalParameter4dEXT _mutNamedProgramLocalParameter4dEXT
#define glNamedProgramLocalParameter4dvEXT _mutNamedProgramLocalParameter4dvEXT
#define glNamedProgramLocalParameter4fEXT _mutNamedProgramLocalParameter4fEXT
#define glNamedProgramLocalParameter4fvEXT _mutNamedProgramLocalParameter4fvEXT
#define glNamedProgramLocalParameterI4iEXT _mutNamedProgramLocalParameterI4iEXT
#define glNamedProgramLocalParameterI4ivEXT _mutNamedProgramLocalParameterI4ivEXT
#define glNamedProgramLocalParameterI4uiEXT _mutNamedProgramLocalParameterI4uiEXT
#define glNamedProgramLocalParameterI4uivEXT _mutNamedProgramLocalParameterI4uivEXT
#define glNamedProgramLocalParameters4fvEXT _mutNamedProgramLocalParameters4fvEXT
#define glNamedProgramLocalParametersI4ivEXT _mutNamedProgramLocalParametersI4ivEXT
#define glNamedProgramLocalParametersI4uivEXT _mutNamedProgramLocalParametersI4uivEXT
#define glNamedProgramStringEXT _mutNamedProgramStringEXT
#define glNamedRenderbufferStorage _mutNamedRenderbufferStorage
#define glNamedRenderbufferStorageEXT _mutNamedRenderbufferStorageEXT
#define glNamedRenderbufferStorageMultisample _mutNamedRenderbufferStorageMultisample
#define glNamedRenderbufferStorageMultisampleCoverageEXT _mutNamedRenderbufferStorageMultisampleCoverageEXT
#define glNamedRenderbufferStorageMultisampleEXT _mutNamedRenderbufferStorageMultisampleEXT
#define glNamedStringARB _mutNamedStringARB
#define glNewBufferRegion _mutNewBufferRegion
#define glNewObjectBufferATI _mutNewObjectBufferATI
#define glNormal3fVertex3fSUN _mutNormal3fVertex3fSUN
#define glNormal3fVertex3fvSUN _mutNormal3fVertex3fvSUN
#define glNormal3hNV _mutNormal3hNV
#define glNormal3hvNV _mutNormal3hvNV
#define glNormal3xOES _mutNormal3xOES
#define glNormal3xvOES _mutNormal3xvOES
#define glNormalFormatNV _mutNormalFormatNV
#define glNormalP3ui _mutNormalP3ui
#define glNormalP3uiv _mutNormalP3uiv
#define glNormalPointerEXT _mutNormalPointerEXT
#define glNormalPointerListIBM _mutNormalPointerListIBM
#define glNormalPointervINTEL _mutNormalPointervINTEL
#define glNormalStream3bATI _mutNormalStream3bATI
#define glNormalStream3bvATI _mutNormalStream3bvATI
#define glNormalStream3dATI _mutNormalStream3dATI
#define glNormalStream3dvATI _mutNormalStream3dvATI
#define glNormalStream3fATI _mutNormalStream3fATI
#define glNormalStream3fvATI _mutNormalStream3fvATI
#define glNormalStream3iATI _mutNormalStream3iATI
#define glNormalStream3ivATI _mutNormalStream3ivATI
#define glNormalStream3sATI _mutNormalStream3sATI
#define glNormalStream3svATI _mutNormalStream3svATI
#define glObjectLabel _mutObjectLabel
#define glObjectLabelKHR _mutObjectLabelKHR
#define glObjectPtrLabel _mutObjectPtrLabel
#define glObjectPtrLabelKHR _mutObjectPtrLabelKHR
#define glObjectPurgeableAPPLE _mutObjectPurgeableAPPLE
#define glObjectUnpurgeableAPPLE _mutObjectUnpurgeableAPPLE
#define glOrthofOES _mutOrthofOES
#define glOrthoxOES _mutOrthoxOES
#define glPNTrianglesfATI _mutPNTrianglesfATI
#define glPNTrianglesiATI _mutPNTrianglesiATI
#define glPassTexCoordATI _mutPassTexCoordATI
#define glPassThroughxOES _mutPassThroughxOES
#define glPatchParameterfv _mutPatchParameterfv
#define glPatchParameteri _mutPatchParameteri
#define glPatchParameteriEXT _mutPatchParameteriEXT
#define glPatchParameteriOES _mutPatchParameteriOES
#define glPathColorGenNV _mutPathColorGenNV
#define glPathCommandsNV _mutPathCommandsNV
#define glPathCoordsNV _mutPathCoordsNV
#define glPathCoverDepthFuncNV _mutPathCoverDepthFuncNV
#define glPathDashArrayNV _mutPathDashArrayNV
#define glPathFogGenNV _mutPathFogGenNV
#define glPathGlyphIndexArrayNV _mutPathGlyphIndexArrayNV
#define glPathGlyphIndexRangeNV _mutPathGlyphIndexRangeNV
#define glPathGlyphRangeNV _mutPathGlyphRangeNV
#define glPathGlyphsNV _mutPathGlyphsNV
#define glPathMemoryGlyphIndexArrayNV _mutPathMemoryGlyphIndexArrayNV
#define glPathParameterfNV _mutPathParameterfNV
#define glPathParameterfvNV _mutPathParameterfvNV
#define glPathParameteriNV _mutPathParameteriNV
#define glPathParameterivNV _mutPathParameterivNV
#define glPathStencilDepthOffsetNV _mutPathStencilDepthOffsetNV
#define glPathStencilFuncNV _mutPathStencilFuncNV
#define glPathStringNV _mutPathStringNV
#define glPathSubCommandsNV _mutPathSubCommandsNV
#define glPathSubCoordsNV _mutPathSubCoordsNV
#define glPathTexGenNV _mutPathTexGenNV
#define glPauseTransformFeedback _mutPauseTransformFeedback
#define glPauseTransformFeedbackNV _mutPauseTransformFeedbackNV
#define glPixelDataRangeNV _mutPixelDataRangeNV
#define glPixelMapx _mutPixelMapx
#define glPixelStoref _mutPixelStoref
#define glPixelStorei _mutPixelStorei
#define glPixelStorex _mutPixelStorex
#define glPixelTexGenParameterfSGIS _mutPixelTexGenParameterfSGIS
#define glPixelTexGenParameterfvSGIS _mutPixelTexGenParameterfvSGIS
#define glPixelTexGenParameteriSGIS _mutPixelTexGenParameteriSGIS
#define glPixelTexGenParameterivSGIS _mutPixelTexGenParameterivSGIS
#define glPixelTexGenSGIX _mutPixelTexGenSGIX
#define glPixelTransferxOES _mutPixelTransferxOES
#define glPixelTransformParameterfEXT _mutPixelTransformParameterfEXT
#define glPixelTransformParameterfvEXT _mutPixelTransformParameterfvEXT
#define glPixelTransformParameteriEXT _mutPixelTransformParameteriEXT
#define glPixelTransformParameterivEXT _mutPixelTransformParameterivEXT
#define glPixelZoomxOES _mutPixelZoomxOES
#define glPointAlongPathNV _mutPointAlongPathNV
#define glPointParameterf _mutPointParameterf
#define glPointParameterfARB _mutPointParameterfARB
#define glPointParameterfEXT _mutPointParameterfEXT
#define glPointParameterfSGIS _mutPointParameterfSGIS
#define glPointParameterfv _mutPointParameterfv
#define glPointParameterfvARB _mutPointParameterfvARB
#define glPointParameterfvEXT _mutPointParameterfvEXT
#define glPointParameterfvSGIS _mutPointParameterfvSGIS
#define glPointParameteri _mutPointParameteri
#define glPointParameteriNV _mutPointParameteriNV
#define glPointParameteriv _mutPointParameteriv
#define glPointParameterivNV _mutPointParameterivNV
#define glPointParameterxvOES _mutPointParameterxvOES
#define glPointSize _mutPointSize
#define glPointSizexOES _mutPointSizexOES
#define glPollAsyncSGIX _mutPollAsyncSGIX
#define glPollInstrumentsSGIX _mutPollInstrumentsSGIX
#define glPolygonMode _mutPolygonMode
#define glPolygonModeNV _mutPolygonModeNV
#define glPolygonOffset _mutPolygonOffset
#define glPolygonOffsetClampEXT _mutPolygonOffsetClampEXT
#define glPolygonOffsetEXT _mutPolygonOffsetEXT
#define glPolygonOffsetxOES _mutPolygonOffsetxOES
#define glPopDebugGroup _mutPopDebugGroup
#define glPopDebugGroupKHR _mutPopDebugGroupKHR
#define glPopGroupMarkerEXT _mutPopGroupMarkerEXT
#define glPresentFrameDualFillNV _mutPresentFrameDualFillNV
#define glPresentFrameKeyedNV _mutPresentFrameKeyedNV
#define glPrimitiveBoundingBox _mutPrimitiveBoundingBox
#define glPrimitiveBoundingBoxARB _mutPrimitiveBoundingBoxARB
#define glPrimitiveBoundingBoxEXT _mutPrimitiveBoundingBoxEXT
#define glPrimitiveBoundingBoxOES _mutPrimitiveBoundingBoxOES
#define glPrimitiveRestartIndex _mutPrimitiveRestartIndex
#define glPrimitiveRestartIndexNV _mutPrimitiveRestartIndexNV
#define glPrimitiveRestartNV _mutPrimitiveRestartNV
#define glPrioritizeTexturesEXT _mutPrioritizeTexturesEXT
#define glPrioritizeTexturesxOES _mutPrioritizeTexturesxOES
#define glProgramBinary _mutProgramBinary
#define glProgramBinaryOES _mutProgramBinaryOES
#define glProgramBufferParametersIivNV _mutProgramBufferParametersIivNV
#define glProgramBufferParametersIuivNV _mutProgramBufferParametersIuivNV
#define glProgramBufferParametersfvNV _mutProgramBufferParametersfvNV
#define glProgramEnvParameter4dARB _mutProgramEnvParameter4dARB
#define glProgramEnvParameter4dvARB _mutProgramEnvParameter4dvARB
#define glProgramEnvParameter4fARB _mutProgramEnvParameter4fARB
#define glProgramEnvParameter4fvARB _mutProgramEnvParameter4fvARB
#define glProgramEnvParameterI4iNV _mutProgramEnvParameterI4iNV
#define glProgramEnvParameterI4ivNV _mutProgramEnvParameterI4ivNV
#define glProgramEnvParameterI4uiNV _mutProgramEnvParameterI4uiNV
#define glProgramEnvParameterI4uivNV _mutProgramEnvParameterI4uivNV
#define glProgramEnvParameters4fvEXT _mutProgramEnvParameters4fvEXT
#define glProgramEnvParametersI4ivNV _mutProgramEnvParametersI4ivNV
#define glProgramEnvParametersI4uivNV _mutProgramEnvParametersI4uivNV
#define glProgramLocalParameter4dARB _mutProgramLocalParameter4dARB
#define glProgramLocalParameter4dvARB _mutProgramLocalParameter4dvARB
#define glProgramLocalParameter4fARB _mutProgramLocalParameter4fARB
#define glProgramLocalParameter4fvARB _mutProgramLocalParameter4fvARB
#define glProgramLocalParameterI4iNV _mutProgramLocalParameterI4iNV
#define glProgramLocalParameterI4ivNV _mutProgramLocalParameterI4ivNV
#define glProgramLocalParameterI4uiNV _mutProgramLocalParameterI4uiNV
#define glProgramLocalParameterI4uivNV _mutProgramLocalParameterI4uivNV
#define glProgramLocalParameters4fvEXT _mutProgramLocalParameters4fvEXT
#define glProgramLocalParametersI4ivNV _mutProgramLocalParametersI4ivNV
#define glProgramLocalParametersI4uivNV _mutProgramLocalParametersI4uivNV
#define glProgramNamedParameter4dNV _mutProgramNamedParameter4dNV
#define glProgramNamedParameter4dvNV _mutProgramNamedParameter4dvNV
#define glProgramNamedParameter4fNV _mutProgramNamedParameter4fNV
#define glProgramNamedParameter4fvNV _mutProgramNamedParameter4fvNV
#define glProgramParameter4dNV _mutProgramParameter4dNV
#define glProgramParameter4dvNV _mutProgramParameter4dvNV
#define glProgramParameter4fNV _mutProgramParameter4fNV
#define glProgramParameter4fvNV _mutProgramParameter4fvNV
#define glProgramParameteri _mutProgramParameteri
#define glProgramParameteriARB _mutProgramParameteriARB
#define glProgramParameteriEXT _mutProgramParameteriEXT
#define glProgramParameters4dvNV _mutProgramParameters4dvNV
#define glProgramParameters4fvNV _mutProgramParameters4fvNV
#define glProgramPathFragmentInputGenNV _mutProgramPathFragmentInputGenNV
#define glProgramStringARB _mutProgramStringARB
#define glProgramSubroutineParametersuivNV _mutProgramSubroutineParametersuivNV
#define glProgramUniform1d _mutProgramUniform1d
#define glProgramUniform1dEXT _mutProgramUniform1dEXT
#define glProgramUniform1dv _mutProgramUniform1dv
#define glProgramUniform1dvEXT _mutProgramUniform1dvEXT
#define glProgramUniform1f _mutProgramUniform1f
#define glProgramUniform1fEXT _mutProgramUniform1fEXT
#define glProgramUniform1fv _mutProgramUniform1fv
#define glProgramUniform1fvEXT _mutProgramUniform1fvEXT
#define glProgramUniform1i _mutProgramUniform1i
#define glProgramUniform1i64ARB _mutProgramUniform1i64ARB
#define glProgramUniform1i64NV _mutProgramUniform1i64NV
#define glProgramUniform1i64vARB _mutProgramUniform1i64vARB
#define glProgramUniform1i64vNV _mutProgramUniform1i64vNV
#define glProgramUniform1iEXT _mutProgramUniform1iEXT
#define glProgramUniform1iv _mutProgramUniform1iv
#define glProgramUniform1ivEXT _mutProgramUniform1ivEXT
#define glProgramUniform1ui _mutProgramUniform1ui
#define glProgramUniform1ui64ARB _mutProgramUniform1ui64ARB
#define glProgramUniform1ui64NV _mutProgramUniform1ui64NV
#define glProgramUniform1ui64vARB _mutProgramUniform1ui64vARB
#define glProgramUniform1ui64vNV _mutProgramUniform1ui64vNV
#define glProgramUniform1uiEXT _mutProgramUniform1uiEXT
#define glProgramUniform1uiv _mutProgramUniform1uiv
#define glProgramUniform1uivEXT _mutProgramUniform1uivEXT
#define glProgramUniform2d _mutProgramUniform2d
#define glProgramUniform2dEXT _mutProgramUniform2dEXT
#define glProgramUniform2dv _mutProgramUniform2dv
#define glProgramUniform2dvEXT _mutProgramUniform2dvEXT
#define glProgramUniform2f _mutProgramUniform2f
#define glProgramUniform2fEXT _mutProgramUniform2fEXT
#define glProgramUniform2fv _mutProgramUniform2fv
#define glProgramUniform2fvEXT _mutProgramUniform2fvEXT
#define glProgramUniform2i _mutProgramUniform2i
#define glProgramUniform2i64ARB _mutProgramUniform2i64ARB
#define glProgramUniform2i64NV _mutProgramUniform2i64NV
#define glProgramUniform2i64vARB _mutProgramUniform2i64vARB
#define glProgramUniform2i64vNV _mutProgramUniform2i64vNV
#define glProgramUniform2iEXT _mutProgramUniform2iEXT
#define glProgramUniform2iv _mutProgramUniform2iv
#define glProgramUniform2ivEXT _mutProgramUniform2ivEXT
#define glProgramUniform2ui _mutProgramUniform2ui
#define glProgramUniform2ui64ARB _mutProgramUniform2ui64ARB
#define glProgramUniform2ui64NV _mutProgramUniform2ui64NV
#define glProgramUniform2ui64vARB _mutProgramUniform2ui64vARB
#define glProgramUniform2ui64vNV _mutProgramUniform2ui64vNV
#define glProgramUniform2uiEXT _mutProgramUniform2uiEXT
#define glProgramUniform2uiv _mutProgramUniform2uiv
#define glProgramUniform2uivEXT _mutProgramUniform2uivEXT
#define glProgramUniform3d _mutProgramUniform3d
#define glProgramUniform3dEXT _mutProgramUniform3dEXT
#define glProgramUniform3dv _mutProgramUniform3dv
#define glProgramUniform3dvEXT _mutProgramUniform3dvEXT
#define glProgramUniform3f _mutProgramUniform3f
#define glProgramUniform3fEXT _mutProgramUniform3fEXT
#define glProgramUniform3fv _mutProgramUniform3fv
#define glProgramUniform3fvEXT _mutProgramUniform3fvEXT
#define glProgramUniform3i _mutProgramUniform3i
#define glProgramUniform3i64ARB _mutProgramUniform3i64ARB
#define glProgramUniform3i64NV _mutProgramUniform3i64NV
#define glProgramUniform3i64vARB _mutProgramUniform3i64vARB
#define glProgramUniform3i64vNV _mutProgramUniform3i64vNV
#define glProgramUniform3iEXT _mutProgramUniform3iEXT
#define glProgramUniform3iv _mutProgramUniform3iv
#define glProgramUniform3ivEXT _mutProgramUniform3ivEXT
#define glProgramUniform3ui _mutProgramUniform3ui
#define glProgramUniform3ui64ARB _mutProgramUniform3ui64ARB
#define glProgramUniform3ui64NV _mutProgramUniform3ui64NV
#define glProgramUniform3ui64vARB _mutProgramUniform3ui64vARB
#define glProgramUniform3ui64vNV _mutProgramUniform3ui64vNV
#define glProgramUniform3uiEXT _mutProgramUniform3uiEXT
#define glProgramUniform3uiv _mutProgramUniform3uiv
#define glProgramUniform3uivEXT _mutProgramUniform3uivEXT
#define glProgramUniform4d _mutProgramUniform4d
#define glProgramUniform4dEXT _mutProgramUniform4dEXT
#define glProgramUniform4dv _mutProgramUniform4dv
#define glProgramUniform4dvEXT _mutProgramUniform4dvEXT
#define glProgramUniform4f _mutProgramUniform4f
#define glProgramUniform4fEXT _mutProgramUniform4fEXT
#define glProgramUniform4fv _mutProgramUniform4fv
#define glProgramUniform4fvEXT _mutProgramUniform4fvEXT
#define glProgramUniform4i _mutProgramUniform4i
#define glProgramUniform4i64ARB _mutProgramUniform4i64ARB
#define glProgramUniform4i64NV _mutProgramUniform4i64NV
#define glProgramUniform4i64vARB _mutProgramUniform4i64vARB
#define glProgramUniform4i64vNV _mutProgramUniform4i64vNV
#define glProgramUniform4iEXT _mutProgramUniform4iEXT
#define glProgramUniform4iv _mutProgramUniform4iv
#define glProgramUniform4ivEXT _mutProgramUniform4ivEXT
#define glProgramUniform4ui _mutProgramUniform4ui
#define glProgramUniform4ui64ARB _mutProgramUniform4ui64ARB
#define glProgramUniform4ui64NV _mutProgramUniform4ui64NV
#define glProgramUniform4ui64vARB _mutProgramUniform4ui64vARB
#define glProgramUniform4ui64vNV _mutProgramUniform4ui64vNV
#define glProgramUniform4uiEXT _mutProgramUniform4uiEXT
#define glProgramUniform4uiv _mutProgramUniform4uiv
#define glProgramUniform4uivEXT _mutProgramUniform4uivEXT
#define glProgramUniformHandleui64ARB _mutProgramUniformHandleui64ARB
#define glProgramUniformHandleui64IMG _mutProgramUniformHandleui64IMG
#define glProgramUniformHandleui64NV _mutProgramUniformHandleui64NV
#define glProgramUniformHandleui64vARB _mutProgramUniformHandleui64vARB
#define glProgramUniformHandleui64vIMG _mutProgramUniformHandleui64vIMG
#define glProgramUniformHandleui64vNV _mutProgramUniformHandleui64vNV
#define glProgramUniformMatrix2dv _mutProgramUniformMatrix2dv
#define glProgramUniformMatrix2dvEXT _mutProgramUniformMatrix2dvEXT
#define glProgramUniformMatrix2fv _mutProgramUniformMatrix2fv
#define glProgramUniformMatrix2fvEXT _mutProgramUniformMatrix2fvEXT
#define glProgramUniformMatrix2x3dv _mutProgramUniformMatrix2x3dv
#define glProgramUniformMatrix2x3dvEXT _mutProgramUniformMatrix2x3dvEXT
#define glProgramUniformMatrix2x3fv _mutProgramUniformMatrix2x3fv
#define glProgramUniformMatrix2x3fvEXT _mutProgramUniformMatrix2x3fvEXT
#define glProgramUniformMatrix2x4dv _mutProgramUniformMatrix2x4dv
#define glProgramUniformMatrix2x4dvEXT _mutProgramUniformMatrix2x4dvEXT
#define glProgramUniformMatrix2x4fv _mutProgramUniformMatrix2x4fv
#define glProgramUniformMatrix2x4fvEXT _mutProgramUniformMatrix2x4fvEXT
#define glProgramUniformMatrix3dv _mutProgramUniformMatrix3dv
#define glProgramUniformMatrix3dvEXT _mutProgramUniformMatrix3dvEXT
#define glProgramUniformMatrix3fv _mutProgramUniformMatrix3fv
#define glProgramUniformMatrix3fvEXT _mutProgramUniformMatrix3fvEXT
#define glProgramUniformMatrix3x2dv _mutProgramUniformMatrix3x2dv
#define glProgramUniformMatrix3x2dvEXT _mutProgramUniformMatrix3x2dvEXT
#define glProgramUniformMatrix3x2fv _mutProgramUniformMatrix3x2fv
#define glProgramUniformMatrix3x2fvEXT _mutProgramUniformMatrix3x2fvEXT
#define glProgramUniformMatrix3x4dv _mutProgramUniformMatrix3x4dv
#define glProgramUniformMatrix3x4dvEXT _mutProgramUniformMatrix3x4dvEXT
#define glProgramUniformMatrix3x4fv _mutProgramUniformMatrix3x4fv
#define glProgramUniformMatrix3x4fvEXT _mutProgramUniformMatrix3x4fvEXT
#define glProgramUniformMatrix4dv _mutProgramUniformMatrix4dv
#define glProgramUniformMatrix4dvEXT _mutProgramUniformMatrix4dvEXT
#define glProgramUniformMatrix4fv _mutProgramUniformMatrix4fv
#define glProgramUniformMatrix4fvEXT _mutProgramUniformMatrix4fvEXT
#define glProgramUniformMatrix4x2dv _mutProgramUniformMatrix4x2dv
#define glProgramUniformMatrix4x2dvEXT _mutProgramUniformMatrix4x2dvEXT
#define glProgramUniformMatrix4x2fv _mutProgramUniformMatrix4x2fv
#define glProgramUniformMatrix4x2fvEXT _mutProgramUniformMatrix4x2fvEXT
#define glProgramUniformMatrix4x3dv _mutProgramUniformMatrix4x3dv
#define glProgramUniformMatrix4x3dvEXT _mutProgramUniformMatrix4x3dvEXT
#define glProgramUniformMatrix4x3fv _mutProgramUniformMatrix4x3fv
#define glProgramUniformMatrix4x3fvEXT _mutProgramUniformMatrix4x3fvEXT
#define glProgramUniformui64NV _mutProgramUniformui64NV
#define glProgramUniformui64vNV _mutProgramUniformui64vNV
#define glProgramVertexLimitNV _mutProgramVertexLimitNV
#define glProvokingVertex _mutProvokingVertex
#define glProvokingVertexEXT _mutProvokingVertexEXT
#define glPushClientAttribDefaultEXT _mutPushClientAttribDefaultEXT
#define glPushDebugGroup _mutPushDebugGroup
#define glPushDebugGroupKHR _mutPushDebugGroupKHR
#define glPushGroupMarkerEXT _mutPushGroupMarkerEXT
#define glQueryCounter _mutQueryCounter
#define glQueryCounterEXT _mutQueryCounterEXT
#define glQueryMatrixxOES _mutQueryMatrixxOES
#define glQueryObjectParameteruiAMD _mutQueryObjectParameteruiAMD
#define glRasterPos2xOES _mutRasterPos2xOES
#define glRasterPos2xvOES _mutRasterPos2xvOES
#define glRasterPos3xOES _mutRasterPos3xOES
#define glRasterPos3xvOES _mutRasterPos3xvOES
#define glRasterPos4xOES _mutRasterPos4xOES
#define glRasterPos4xvOES _mutRasterPos4xvOES
#define glRasterSamplesEXT _mutRasterSamplesEXT
#define glReadBuffer _mutReadBuffer
#define glReadBufferIndexedEXT _mutReadBufferIndexedEXT
#define glReadBufferNV _mutReadBufferNV
#define glReadBufferRegion _mutReadBufferRegion
#define glReadInstrumentsSGIX _mutReadInstrumentsSGIX
#define glReadPixels _mutReadPixels
#define glReadnPixels _mutReadnPixels
#define glReadnPixelsARB _mutReadnPixelsARB
#define glReadnPixelsEXT _mutReadnPixelsEXT
#define glReadnPixelsKHR _mutReadnPixelsKHR
#define glRectxOES _mutRectxOES
#define glRectxvOES _mutRectxvOES
#define glReferencePlaneSGIX _mutReferencePlaneSGIX
#define glReleaseKeyedMutexWin32EXT _mutReleaseKeyedMutexWin32EXT
#define glReleaseShaderCompiler _mutReleaseShaderCompiler
#define glRenderGpuMaskNV _mutRenderGpuMaskNV
#define glRenderbufferStorage _mutRenderbufferStorage
#define glRenderbufferStorageEXT _mutRenderbufferStorageEXT
#define glRenderbufferStorageMultisample _mutRenderbufferStorageMultisample
#define glRenderbufferStorageMultisampleANGLE _mutRenderbufferStorageMultisampleANGLE
#define glRenderbufferStorageMultisampleAPPLE _mutRenderbufferStorageMultisampleAPPLE
#define glRenderbufferStorageMultisampleCoverageNV _mutRenderbufferStorageMultisampleCoverageNV
#define glRenderbufferStorageMultisampleEXT _mutRenderbufferStorageMultisampleEXT
#define glRenderbufferStorageMultisampleIMG _mutRenderbufferStorageMultisampleIMG
#define glRenderbufferStorageMultisampleNV _mutRenderbufferStorageMultisampleNV
#define glReplacementCodePointerSUN _mutReplacementCodePointerSUN
#define glReplacementCodeubSUN _mutReplacementCodeubSUN
#define glReplacementCodeubvSUN _mutReplacementCodeubvSUN
#define glReplacementCodeuiColor3fVertex3fSUN _mutReplacementCodeuiColor3fVertex3fSUN
#define glReplacementCodeuiColor3fVertex3fvSUN _mutReplacementCodeuiColor3fVertex3fvSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN _mutReplacementCodeuiColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN _mutReplacementCodeuiColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiColor4ubVertex3fSUN _mutReplacementCodeuiColor4ubVertex3fSUN
#define glReplacementCodeuiColor4ubVertex3fvSUN _mutReplacementCodeuiColor4ubVertex3fvSUN
#define glReplacementCodeuiNormal3fVertex3fSUN _mutReplacementCodeuiNormal3fVertex3fSUN
#define glReplacementCodeuiNormal3fVertex3fvSUN _mutReplacementCodeuiNormal3fVertex3fvSUN
#define glReplacementCodeuiSUN _mutReplacementCodeuiSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN _mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN _mutReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN _mutReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN _mutReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fVertex3fSUN _mutReplacementCodeuiTexCoord2fVertex3fSUN
#define glReplacementCodeuiTexCoord2fVertex3fvSUN _mutReplacementCodeuiTexCoord2fVertex3fvSUN
#define glReplacementCodeuiVertex3fSUN _mutReplacementCodeuiVertex3fSUN
#define glReplacementCodeuiVertex3fvSUN _mutReplacementCodeuiVertex3fvSUN
#define glReplacementCodeuivSUN _mutReplacementCodeuivSUN
#define glReplacementCodeusSUN _mutReplacementCodeusSUN
#define glReplacementCodeusvSUN _mutReplacementCodeusvSUN
#define glRequestResidentProgramsNV _mutRequestResidentProgramsNV
#define glResetHistogram _mutResetHistogram
#define glResetHistogramEXT _mutResetHistogramEXT
#define glResetMinmax _mutResetMinmax
#define glResetMinmaxEXT _mutResetMinmaxEXT
#define glResizeBuffersMESA _mutResizeBuffersMESA
#define glResolveDepthValuesNV _mutResolveDepthValuesNV
#define glResolveMultisampleFramebufferAPPLE _mutResolveMultisampleFramebufferAPPLE
#define glResumeTransformFeedback _mutResumeTransformFeedback
#define glResumeTransformFeedbackNV _mutResumeTransformFeedbackNV
#define glRotatexOES _mutRotatexOES
#define glSampleCoverage _mutSampleCoverage
#define glSampleCoverageARB _mutSampleCoverageARB
#define glSampleMapATI _mutSampleMapATI
#define glSampleMaskEXT _mutSampleMaskEXT
#define glSampleMaskIndexedNV _mutSampleMaskIndexedNV
#define glSampleMaskSGIS _mutSampleMaskSGIS
#define glSampleMaski _mutSampleMaski
#define glSamplePatternEXT _mutSamplePatternEXT
#define glSamplePatternSGIS _mutSamplePatternSGIS
#define glSamplerParameterIiv _mutSamplerParameterIiv
#define glSamplerParameterIivEXT _mutSamplerParameterIivEXT
#define glSamplerParameterIivOES _mutSamplerParameterIivOES
#define glSamplerParameterIuiv _mutSamplerParameterIuiv
#define glSamplerParameterIuivEXT _mutSamplerParameterIuivEXT
#define glSamplerParameterIuivOES _mutSamplerParameterIuivOES
#define glSamplerParameterf _mutSamplerParameterf
#define glSamplerParameterfv _mutSamplerParameterfv
#define glSamplerParameteri _mutSamplerParameteri
#define glSamplerParameteriv _mutSamplerParameteriv
#define glScalexOES _mutScalexOES
#define glScissor _mutScissor
#define glScissorArrayv _mutScissorArrayv
#define glScissorArrayvNV _mutScissorArrayvNV
#define glScissorArrayvOES _mutScissorArrayvOES
#define glScissorIndexed _mutScissorIndexed
#define glScissorIndexedNV _mutScissorIndexedNV
#define glScissorIndexedOES _mutScissorIndexedOES
#define glScissorIndexedv _mutScissorIndexedv
#define glScissorIndexedvNV _mutScissorIndexedvNV
#define glScissorIndexedvOES _mutScissorIndexedvOES
#define glSecondaryColor3b _mutSecondaryColor3b
#define glSecondaryColor3bEXT _mutSecondaryColor3bEXT
#define glSecondaryColor3bv _mutSecondaryColor3bv
#define glSecondaryColor3bvEXT _mutSecondaryColor3bvEXT
#define glSecondaryColor3d _mutSecondaryColor3d
#define glSecondaryColor3dEXT _mutSecondaryColor3dEXT
#define glSecondaryColor3dv _mutSecondaryColor3dv
#define glSecondaryColor3dvEXT _mutSecondaryColor3dvEXT
#define glSecondaryColor3f _mutSecondaryColor3f
#define glSecondaryColor3fEXT _mutSecondaryColor3fEXT
#define glSecondaryColor3fv _mutSecondaryColor3fv
#define glSecondaryColor3fvEXT _mutSecondaryColor3fvEXT
#define glSecondaryColor3hNV _mutSecondaryColor3hNV
#define glSecondaryColor3hvNV _mutSecondaryColor3hvNV
#define glSecondaryColor3i _mutSecondaryColor3i
#define glSecondaryColor3iEXT _mutSecondaryColor3iEXT
#define glSecondaryColor3iv _mutSecondaryColor3iv
#define glSecondaryColor3ivEXT _mutSecondaryColor3ivEXT
#define glSecondaryColor3s _mutSecondaryColor3s
#define glSecondaryColor3sEXT _mutSecondaryColor3sEXT
#define glSecondaryColor3sv _mutSecondaryColor3sv
#define glSecondaryColor3svEXT _mutSecondaryColor3svEXT
#define glSecondaryColor3ub _mutSecondaryColor3ub
#define glSecondaryColor3ubEXT _mutSecondaryColor3ubEXT
#define glSecondaryColor3ubv _mutSecondaryColor3ubv
#define glSecondaryColor3ubvEXT _mutSecondaryColor3ubvEXT
#define glSecondaryColor3ui _mutSecondaryColor3ui
#define glSecondaryColor3uiEXT _mutSecondaryColor3uiEXT
#define glSecondaryColor3uiv _mutSecondaryColor3uiv
#define glSecondaryColor3uivEXT _mutSecondaryColor3uivEXT
#define glSecondaryColor3us _mutSecondaryColor3us
#define glSecondaryColor3usEXT _mutSecondaryColor3usEXT
#define glSecondaryColor3usv _mutSecondaryColor3usv
#define glSecondaryColor3usvEXT _mutSecondaryColor3usvEXT
#define glSecondaryColorFormatNV _mutSecondaryColorFormatNV
#define glSecondaryColorP3ui _mutSecondaryColorP3ui
#define glSecondaryColorP3uiv _mutSecondaryColorP3uiv
#define glSecondaryColorPointer _mutSecondaryColorPointer
#define glSecondaryColorPointerEXT _mutSecondaryColorPointerEXT
#define glSecondaryColorPointerListIBM _mutSecondaryColorPointerListIBM
#define glSelectPerfMonitorCountersAMD _mutSelectPerfMonitorCountersAMD
#define glSemaphoreParameterui64vEXT _mutSemaphoreParameterui64vEXT
#define glSeparableFilter2D _mutSeparableFilter2D
#define glSeparableFilter2DEXT _mutSeparableFilter2DEXT
#define glSetFenceAPPLE _mutSetFenceAPPLE
#define glSetFenceNV _mutSetFenceNV
#define glSetFragmentShaderConstantATI _mutSetFragmentShaderConstantATI
#define glSetInvariantEXT _mutSetInvariantEXT
#define glSetLocalConstantEXT _mutSetLocalConstantEXT
#define glSetMultisamplefvAMD _mutSetMultisamplefvAMD
#define glShaderBinary _mutShaderBinary
#define glShaderOp1EXT _mutShaderOp1EXT
#define glShaderOp2EXT _mutShaderOp2EXT
#define glShaderOp3EXT _mutShaderOp3EXT
#define glShaderSource _mutShaderSource
#define glShaderSourceARB _mutShaderSourceARB
#define glShaderStorageBlockBinding _mutShaderStorageBlockBinding
#define glSharpenTexFuncSGIS _mutSharpenTexFuncSGIS
#define glSignalSemaphoreEXT _mutSignalSemaphoreEXT
#define glSignalVkFenceNV _mutSignalVkFenceNV
#define glSignalVkSemaphoreNV _mutSignalVkSemaphoreNV
#define glSpecializeShaderARB _mutSpecializeShaderARB
#define glSpriteParameterfSGIX _mutSpriteParameterfSGIX
#define glSpriteParameterfvSGIX _mutSpriteParameterfvSGIX
#define glSpriteParameteriSGIX _mutSpriteParameteriSGIX
#define glSpriteParameterivSGIX _mutSpriteParameterivSGIX
#define glStartInstrumentsSGIX _mutStartInstrumentsSGIX
#define glStartTilingQCOM _mutStartTilingQCOM
#define glStateCaptureNV _mutStateCaptureNV
#define glStencilClearTagEXT _mutStencilClearTagEXT
#define glStencilFillPathInstancedNV _mutStencilFillPathInstancedNV
#define glStencilFillPathNV _mutStencilFillPathNV
#define glStencilFunc _mutStencilFunc
#define glStencilFuncSeparate _mutStencilFuncSeparate
#define glStencilFuncSeparateATI _mutStencilFuncSeparateATI
#define glStencilMask _mutStencilMask
#define glStencilMaskSeparate _mutStencilMaskSeparate
#define glStencilOp _mutStencilOp
#define glStencilOpSeparate _mutStencilOpSeparate
#define glStencilOpSeparateATI _mutStencilOpSeparateATI
#define glStencilOpValueAMD _mutStencilOpValueAMD
#define glStencilStrokePathInstancedNV _mutStencilStrokePathInstancedNV
#define glStencilStrokePathNV _mutStencilStrokePathNV
#define glStencilThenCoverFillPathInstancedNV _mutStencilThenCoverFillPathInstancedNV
#define glStencilThenCoverFillPathNV _mutStencilThenCoverFillPathNV
#define glStencilThenCoverStrokePathInstancedNV _mutStencilThenCoverStrokePathInstancedNV
#define glStencilThenCoverStrokePathNV _mutStencilThenCoverStrokePathNV
#define glStopInstrumentsSGIX _mutStopInstrumentsSGIX
#define glStringMarkerGREMEDY _mutStringMarkerGREMEDY
#define glSubpixelPrecisionBiasNV _mutSubpixelPrecisionBiasNV
#define glSwizzleEXT _mutSwizzleEXT
#define glSyncTextureINTEL _mutSyncTextureINTEL
#define glTagSampleBufferSGIX _mutTagSampleBufferSGIX
#define glTangent3bEXT _mutTangent3bEXT
#define glTangent3bvEXT _mutTangent3bvEXT
#define glTangent3dEXT _mutTangent3dEXT
#define glTangent3dvEXT _mutTangent3dvEXT
#define glTangent3fEXT _mutTangent3fEXT
#define glTangent3fvEXT _mutTangent3fvEXT
#define glTangent3iEXT _mutTangent3iEXT
#define glTangent3ivEXT _mutTangent3ivEXT
#define glTangent3sEXT _mutTangent3sEXT
#define glTangent3svEXT _mutTangent3svEXT
#define glTangentPointerEXT _mutTangentPointerEXT
#define glTbufferMask3DFX _mutTbufferMask3DFX
#define glTessellationFactorAMD _mutTessellationFactorAMD
#define glTessellationModeAMD _mutTessellationModeAMD
#define glTestFenceAPPLE _mutTestFenceAPPLE
#define glTestFenceNV _mutTestFenceNV
#define glTestObjectAPPLE _mutTestObjectAPPLE
#define glTexBuffer _mutTexBuffer
#define glTexBufferARB _mutTexBufferARB
#define glTexBufferEXT _mutTexBufferEXT
#define glTexBufferOES _mutTexBufferOES
#define glTexBufferRange _mutTexBufferRange
#define glTexBufferRangeEXT _mutTexBufferRangeEXT
#define glTexBufferRangeOES _mutTexBufferRangeOES
#define glTexBumpParameterfvATI _mutTexBumpParameterfvATI
#define glTexBumpParameterivATI _mutTexBumpParameterivATI
#define glTexCoord1bOES _mutTexCoord1bOES
#define glTexCoord1bvOES _mutTexCoord1bvOES
#define glTexCoord1hNV _mutTexCoord1hNV
#define glTexCoord1hvNV _mutTexCoord1hvNV
#define glTexCoord1xOES _mutTexCoord1xOES
#define glTexCoord1xvOES _mutTexCoord1xvOES
#define glTexCoord2bOES _mutTexCoord2bOES
#define glTexCoord2bvOES _mutTexCoord2bvOES
#define glTexCoord2fColor3fVertex3fSUN _mutTexCoord2fColor3fVertex3fSUN
#define glTexCoord2fColor3fVertex3fvSUN _mutTexCoord2fColor3fVertex3fvSUN
#define glTexCoord2fColor4fNormal3fVertex3fSUN _mutTexCoord2fColor4fNormal3fVertex3fSUN
#define glTexCoord2fColor4fNormal3fVertex3fvSUN _mutTexCoord2fColor4fNormal3fVertex3fvSUN
#define glTexCoord2fColor4ubVertex3fSUN _mutTexCoord2fColor4ubVertex3fSUN
#define glTexCoord2fColor4ubVertex3fvSUN _mutTexCoord2fColor4ubVertex3fvSUN
#define glTexCoord2fNormal3fVertex3fSUN _mutTexCoord2fNormal3fVertex3fSUN
#define glTexCoord2fNormal3fVertex3fvSUN _mutTexCoord2fNormal3fVertex3fvSUN
#define glTexCoord2fVertex3fSUN _mutTexCoord2fVertex3fSUN
#define glTexCoord2fVertex3fvSUN _mutTexCoord2fVertex3fvSUN
#define glTexCoord2hNV _mutTexCoord2hNV
#define glTexCoord2hvNV _mutTexCoord2hvNV
#define glTexCoord2xOES _mutTexCoord2xOES
#define glTexCoord2xvOES _mutTexCoord2xvOES
#define glTexCoord3bOES _mutTexCoord3bOES
#define glTexCoord3bvOES _mutTexCoord3bvOES
#define glTexCoord3hNV _mutTexCoord3hNV
#define glTexCoord3hvNV _mutTexCoord3hvNV
#define glTexCoord3xOES _mutTexCoord3xOES
#define glTexCoord3xvOES _mutTexCoord3xvOES
#define glTexCoord4bOES _mutTexCoord4bOES
#define glTexCoord4bvOES _mutTexCoord4bvOES
#define glTexCoord4fColor4fNormal3fVertex4fSUN _mutTexCoord4fColor4fNormal3fVertex4fSUN
#define glTexCoord4fColor4fNormal3fVertex4fvSUN _mutTexCoord4fColor4fNormal3fVertex4fvSUN
#define glTexCoord4fVertex4fSUN _mutTexCoord4fVertex4fSUN
#define glTexCoord4fVertex4fvSUN _mutTexCoord4fVertex4fvSUN
#define glTexCoord4hNV _mutTexCoord4hNV
#define glTexCoord4hvNV _mutTexCoord4hvNV
#define glTexCoord4xOES _mutTexCoord4xOES
#define glTexCoord4xvOES _mutTexCoord4xvOES
#define glTexCoordFormatNV _mutTexCoordFormatNV
#define glTexCoordP1ui _mutTexCoordP1ui
#define glTexCoordP1uiv _mutTexCoordP1uiv
#define glTexCoordP2ui _mutTexCoordP2ui
#define glTexCoordP2uiv _mutTexCoordP2uiv
#define glTexCoordP3ui _mutTexCoordP3ui
#define glTexCoordP3uiv _mutTexCoordP3uiv
#define glTexCoordP4ui _mutTexCoordP4ui
#define glTexCoordP4uiv _mutTexCoordP4uiv
#define glTexCoordPointerEXT _mutTexCoordPointerEXT
#define glTexCoordPointerListIBM _mutTexCoordPointerListIBM
#define glTexCoordPointervINTEL _mutTexCoordPointervINTEL
#define glTexEnvxOES _mutTexEnvxOES
#define glTexEnvxvOES _mutTexEnvxvOES
#define glTexFilterFuncSGIS _mutTexFilterFuncSGIS
#define glTexGenxOES _mutTexGenxOES
#define glTexGenxvOES _mutTexGenxvOES
#define glTexImage1D _mutTexImage1D
#define glTexImage2D _mutTexImage2D
#define glTexImage2DMultisample _mutTexImage2DMultisample
#define glTexImage2DMultisampleCoverageNV _mutTexImage2DMultisampleCoverageNV
#define glTexImage3D _mutTexImage3D
#define glTexImage3DEXT _mutTexImage3DEXT
#define glTexImage3DMultisample _mutTexImage3DMultisample
#define glTexImage3DMultisampleCoverageNV _mutTexImage3DMultisampleCoverageNV
#define glTexImage3DOES _mutTexImage3DOES
#define glTexImage4DSGIS _mutTexImage4DSGIS
#define glTexPageCommitmentARB _mutTexPageCommitmentARB
#define glTexPageCommitmentEXT _mutTexPageCommitmentEXT
#define glTexParameterIiv _mutTexParameterIiv
#define glTexParameterIivEXT _mutTexParameterIivEXT
#define glTexParameterIivOES _mutTexParameterIivOES
#define glTexParameterIuiv _mutTexParameterIuiv
#define glTexParameterIuivEXT _mutTexParameterIuivEXT
#define glTexParameterIuivOES _mutTexParameterIuivOES
#define glTexParameterf _mutTexParameterf
#define glTexParameterfv _mutTexParameterfv
#define glTexParameteri _mutTexParameteri
#define glTexParameteriv _mutTexParameteriv
#define glTexParameterxOES _mutTexParameterxOES
#define glTexParameterxvOES _mutTexParameterxvOES
#define glTexRenderbufferNV _mutTexRenderbufferNV
#define glTexStorage1D _mutTexStorage1D
#define glTexStorage1DEXT _mutTexStorage1DEXT
#define glTexStorage2D _mutTexStorage2D
#define glTexStorage2DEXT _mutTexStorage2DEXT
#define glTexStorage2DMultisample _mutTexStorage2DMultisample
#define glTexStorage3D _mutTexStorage3D
#define glTexStorage3DEXT _mutTexStorage3DEXT
#define glTexStorage3DMultisample _mutTexStorage3DMultisample
#define glTexStorage3DMultisampleOES _mutTexStorage3DMultisampleOES
#define glTexStorageMem1DEXT _mutTexStorageMem1DEXT
#define glTexStorageMem2DEXT _mutTexStorageMem2DEXT
#define glTexStorageMem2DMultisampleEXT _mutTexStorageMem2DMultisampleEXT
#define glTexStorageMem3DEXT _mutTexStorageMem3DEXT
#define glTexStorageMem3DMultisampleEXT _mutTexStorageMem3DMultisampleEXT
#define glTexStorageSparseAMD _mutTexStorageSparseAMD
#define glTexSubImage1D _mutTexSubImage1D
#define glTexSubImage1DEXT _mutTexSubImage1DEXT
#define glTexSubImage2D _mutTexSubImage2D
#define glTexSubImage2DEXT _mutTexSubImage2DEXT
#define glTexSubImage3D _mutTexSubImage3D
#define glTexSubImage3DEXT _mutTexSubImage3DEXT
#define glTexSubImage3DOES _mutTexSubImage3DOES
#define glTexSubImage4DSGIS _mutTexSubImage4DSGIS
#define glTextureBarrier _mutTextureBarrier
#define glTextureBarrierNV _mutTextureBarrierNV
#define glTextureBuffer _mutTextureBuffer
#define glTextureBufferEXT _mutTextureBufferEXT
#define glTextureBufferRange _mutTextureBufferRange
#define glTextureBufferRangeEXT _mutTextureBufferRangeEXT
#define glTextureColorMaskSGIS _mutTextureColorMaskSGIS
#define glTextureImage1DEXT _mutTextureImage1DEXT
#define glTextureImage2DEXT _mutTextureImage2DEXT
#define glTextureImage2DMultisampleCoverageNV _mutTextureImage2DMultisampleCoverageNV
#define glTextureImage2DMultisampleNV _mutTextureImage2DMultisampleNV
#define glTextureImage3DEXT _mutTextureImage3DEXT
#define glTextureImage3DMultisampleCoverageNV _mutTextureImage3DMultisampleCoverageNV
#define glTextureImage3DMultisampleNV _mutTextureImage3DMultisampleNV
#define glTextureLightEXT _mutTextureLightEXT
#define glTextureMaterialEXT _mutTextureMaterialEXT
#define glTextureNormalEXT _mutTextureNormalEXT
#define glTexturePageCommitmentEXT _mutTexturePageCommitmentEXT
#define glTextureParameterIiv _mutTextureParameterIiv
#define glTextureParameterIivEXT _mutTextureParameterIivEXT
#define glTextureParameterIuiv _mutTextureParameterIuiv
#define glTextureParameterIuivEXT _mutTextureParameterIuivEXT
#define glTextureParameterf _mutTextureParameterf
#define glTextureParameterfEXT _mutTextureParameterfEXT
#define glTextureParameterfv _mutTextureParameterfv
#define glTextureParameterfvEXT _mutTextureParameterfvEXT
#define glTextureParameteri _mutTextureParameteri
#define glTextureParameteriEXT _mutTextureParameteriEXT
#define glTextureParameteriv _mutTextureParameteriv
#define glTextureParameterivEXT _mutTextureParameterivEXT
#define glTextureRangeAPPLE _mutTextureRangeAPPLE
#define glTextureRenderbufferEXT _mutTextureRenderbufferEXT
#define glTextureStorage1D _mutTextureStorage1D
#define glTextureStorage1DEXT _mutTextureStorage1DEXT
#define glTextureStorage2D _mutTextureStorage2D
#define glTextureStorage2DEXT _mutTextureStorage2DEXT
#define glTextureStorage2DMultisample _mutTextureStorage2DMultisample
#define glTextureStorage2DMultisampleEXT _mutTextureStorage2DMultisampleEXT
#define glTextureStorage3D _mutTextureStorage3D
#define glTextureStorage3DEXT _mutTextureStorage3DEXT
#define glTextureStorage3DMultisample _mutTextureStorage3DMultisample
#define glTextureStorage3DMultisampleEXT _mutTextureStorage3DMultisampleEXT
#define glTextureStorageMem1DEXT _mutTextureStorageMem1DEXT
#define glTextureStorageMem2DEXT _mutTextureStorageMem2DEXT
#define glTextureStorageMem2DMultisampleEXT _mutTextureStorageMem2DMultisampleEXT
#define glTextureStorageMem3DEXT _mutTextureStorageMem3DEXT
#define glTextureStorageMem3DMultisampleEXT _mutTextureStorageMem3DMultisampleEXT
#define glTextureStorageSparseAMD _mutTextureStorageSparseAMD
#define glTextureSubImage1D _mutTextureSubImage1D
#define glTextureSubImage1DEXT _mutTextureSubImage1DEXT
#define glTextureSubImage2D _mutTextureSubImage2D
#define glTextureSubImage2DEXT _mutTextureSubImage2DEXT
#define glTextureSubImage3D _mutTextureSubImage3D
#define glTextureSubImage3DEXT _mutTextureSubImage3DEXT
#define glTextureView _mutTextureView
#define glTextureViewEXT _mutTextureViewEXT
#define glTextureViewOES _mutTextureViewOES
#define glTrackMatrixNV _mutTrackMatrixNV
#define glTransformFeedbackAttribsNV _mutTransformFeedbackAttribsNV
#define glTransformFeedbackBufferBase _mutTransformFeedbackBufferBase
#define glTransformFeedbackBufferRange _mutTransformFeedbackBufferRange
#define glTransformFeedbackStreamAttribsNV _mutTransformFeedbackStreamAttribsNV
#define glTransformFeedbackVaryings _mutTransformFeedbackVaryings
#define glTransformFeedbackVaryingsEXT _mutTransformFeedbackVaryingsEXT
#define glTransformFeedbackVaryingsNV _mutTransformFeedbackVaryingsNV
#define glTransformPathNV _mutTransformPathNV
#define glTranslatexOES _mutTranslatexOES
#define glUniform1d _mutUniform1d
#define glUniform1dv _mutUniform1dv
#define glUniform1f _mutUniform1f
#define glUniform1fARB _mutUniform1fARB
#define glUniform1fv _mutUniform1fv
#define glUniform1fvARB _mutUniform1fvARB
#define glUniform1i _mutUniform1i
#define glUniform1i64ARB _mutUniform1i64ARB
#define glUniform1i64NV _mutUniform1i64NV
#define glUniform1i64vARB _mutUniform1i64vARB
#define glUniform1i64vNV _mutUniform1i64vNV
#define glUniform1iARB _mutUniform1iARB
#define glUniform1iv _mutUniform1iv
#define glUniform1ivARB _mutUniform1ivARB
#define glUniform1ui _mutUniform1ui
#define glUniform1ui64ARB _mutUniform1ui64ARB
#define glUniform1ui64NV _mutUniform1ui64NV
#define glUniform1ui64vARB _mutUniform1ui64vARB
#define glUniform1ui64vNV _mutUniform1ui64vNV
#define glUniform1uiEXT _mutUniform1uiEXT
#define glUniform1uiv _mutUniform1uiv
#define glUniform1uivEXT _mutUniform1uivEXT
#define glUniform2d _mutUniform2d
#define glUniform2dv _mutUniform2dv
#define glUniform2f _mutUniform2f
#define glUniform2fARB _mutUniform2fARB
#define glUniform2fv _mutUniform2fv
#define glUniform2fvARB _mutUniform2fvARB
#define glUniform2i _mutUniform2i
#define glUniform2i64ARB _mutUniform2i64ARB
#define glUniform2i64NV _mutUniform2i64NV
#define glUniform2i64vARB _mutUniform2i64vARB
#define glUniform2i64vNV _mutUniform2i64vNV
#define glUniform2iARB _mutUniform2iARB
#define glUniform2iv _mutUniform2iv
#define glUniform2ivARB _mutUniform2ivARB
#define glUniform2ui _mutUniform2ui
#define glUniform2ui64ARB _mutUniform2ui64ARB
#define glUniform2ui64NV _mutUniform2ui64NV
#define glUniform2ui64vARB _mutUniform2ui64vARB
#define glUniform2ui64vNV _mutUniform2ui64vNV
#define glUniform2uiEXT _mutUniform2uiEXT
#define glUniform2uiv _mutUniform2uiv
#define glUniform2uivEXT _mutUniform2uivEXT
#define glUniform3d _mutUniform3d
#define glUniform3dv _mutUniform3dv
#define glUniform3f _mutUniform3f
#define glUniform3fARB _mutUniform3fARB
#define glUniform3fv _mutUniform3fv
#define glUniform3fvARB _mutUniform3fvARB
#define glUniform3i _mutUniform3i
#define glUniform3i64ARB _mutUniform3i64ARB
#define glUniform3i64NV _mutUniform3i64NV
#define glUniform3i64vARB _mutUniform3i64vARB
#define glUniform3i64vNV _mutUniform3i64vNV
#define glUniform3iARB _mutUniform3iARB
#define glUniform3iv _mutUniform3iv
#define glUniform3ivARB _mutUniform3ivARB
#define glUniform3ui _mutUniform3ui
#define glUniform3ui64ARB _mutUniform3ui64ARB
#define glUniform3ui64NV _mutUniform3ui64NV
#define glUniform3ui64vARB _mutUniform3ui64vARB
#define glUniform3ui64vNV _mutUniform3ui64vNV
#define glUniform3uiEXT _mutUniform3uiEXT
#define glUniform3uiv _mutUniform3uiv
#define glUniform3uivEXT _mutUniform3uivEXT
#define glUniform4d _mutUniform4d
#define glUniform4dv _mutUniform4dv
#define glUniform4f _mutUniform4f
#define glUniform4fARB _mutUniform4fARB
#define glUniform4fv _mutUniform4fv
#define glUniform4fvARB _mutUniform4fvARB
#define glUniform4i _mutUniform4i
#define glUniform4i64ARB _mutUniform4i64ARB
#define glUniform4i64NV _mutUniform4i64NV
#define glUniform4i64vARB _mutUniform4i64vARB
#define glUniform4i64vNV _mutUniform4i64vNV
#define glUniform4iARB _mutUniform4iARB
#define glUniform4iv _mutUniform4iv
#define glUniform4ivARB _mutUniform4ivARB
#define glUniform4ui _mutUniform4ui
#define glUniform4ui64ARB _mutUniform4ui64ARB
#define glUniform4ui64NV _mutUniform4ui64NV
#define glUniform4ui64vARB _mutUniform4ui64vARB
#define glUniform4ui64vNV _mutUniform4ui64vNV
#define glUniform4uiEXT _mutUniform4uiEXT
#define glUniform4uiv _mutUniform4uiv
#define glUniform4uivEXT _mutUniform4uivEXT
#define glUniformBlockBinding _mutUniformBlockBinding
#define glUniformBufferEXT _mutUniformBufferEXT
#define glUniformHandleui64ARB _mutUniformHandleui64ARB
#define glUniformHandleui64IMG _mutUniformHandleui64IMG
#define glUniformHandleui64NV _mutUniformHandleui64NV
#define glUniformHandleui64vARB _mutUniformHandleui64vARB
#define glUniformHandleui64vIMG _mutUniformHandleui64vIMG
#define glUniformHandleui64vNV _mutUniformHandleui64vNV
#define glUniformMatrix2dv _mutUniformMatrix2dv
#define glUniformMatrix2fv _mutUniformMatrix2fv
#define glUniformMatrix2fvARB _mutUniformMatrix2fvARB
#define glUniformMatrix2x3dv _mutUniformMatrix2x3dv
#define glUniformMatrix2x3fv _mutUniformMatrix2x3fv
#define glUniformMatrix2x3fvNV _mutUniformMatrix2x3fvNV
#define glUniformMatrix2x4dv _mutUniformMatrix2x4dv
#define glUniformMatrix2x4fv _mutUniformMatrix2x4fv
#define glUniformMatrix2x4fvNV _mutUniformMatrix2x4fvNV
#define glUniformMatrix3dv _mutUniformMatrix3dv
#define glUniformMatrix3fv _mutUniformMatrix3fv
#define glUniformMatrix3fvARB _mutUniformMatrix3fvARB
#define glUniformMatrix3x2dv _mutUniformMatrix3x2dv
#define glUniformMatrix3x2fv _mutUniformMatrix3x2fv
#define glUniformMatrix3x2fvNV _mutUniformMatrix3x2fvNV
#define glUniformMatrix3x4dv _mutUniformMatrix3x4dv
#define glUniformMatrix3x4fv _mutUniformMatrix3x4fv
#define glUniformMatrix3x4fvNV _mutUniformMatrix3x4fvNV
#define glUniformMatrix4dv _mutUniformMatrix4dv
#define glUniformMatrix4fv _mutUniformMatrix4fv
#define glUniformMatrix4fvARB _mutUniformMatrix4fvARB
#define glUniformMatrix4x2dv _mutUniformMatrix4x2dv
#define glUniformMatrix4x2fv _mutUniformMatrix4x2fv
#define glUniformMatrix4x2fvNV _mutUniformMatrix4x2fvNV
#define glUniformMatrix4x3dv _mutUniformMatrix4x3dv
#define glUniformMatrix4x3fv _mutUniformMatrix4x3fv
#define glUniformMatrix4x3fvNV _mutUniformMatrix4x3fvNV
#define glUniformSubroutinesuiv _mutUniformSubroutinesuiv
#define glUniformui64NV _mutUniformui64NV
#define glUniformui64vNV _mutUniformui64vNV
#define glUnlockArraysEXT _mutUnlockArraysEXT
#define glUnmapBuffer _mutUnmapBuffer
#define glUnmapBufferARB _mutUnmapBufferARB
#define glUnmapBufferOES _mutUnmapBufferOES
#define glUnmapNamedBuffer _mutUnmapNamedBuffer
#define glUnmapNamedBufferEXT _mutUnmapNamedBufferEXT
#define glUnmapObjectBufferATI _mutUnmapObjectBufferATI
#define glUnmapTexture2DINTEL _mutUnmapTexture2DINTEL
#define glUpdateObjectBufferATI _mutUpdateObjectBufferATI
#define glUseProgram _mutUseProgram
#define glUseProgramObjectARB _mutUseProgramObjectARB
#define glUseProgramStages _mutUseProgramStages
#define glUseProgramStagesEXT _mutUseProgramStagesEXT
#define glUseShaderProgramEXT _mutUseShaderProgramEXT
#define glVDPAUFiniNV _mutVDPAUFiniNV
#define glVDPAUGetSurfaceivNV _mutVDPAUGetSurfaceivNV
#define glVDPAUInitNV _mutVDPAUInitNV
#define glVDPAUIsSurfaceNV _mutVDPAUIsSurfaceNV
#define glVDPAUMapSurfacesNV _mutVDPAUMapSurfacesNV
#define glVDPAURegisterOutputSurfaceNV _mutVDPAURegisterOutputSurfaceNV
#define glVDPAURegisterVideoSurfaceNV _mutVDPAURegisterVideoSurfaceNV
#define glVDPAUSurfaceAccessNV _mutVDPAUSurfaceAccessNV
#define glVDPAUUnmapSurfacesNV _mutVDPAUUnmapSurfacesNV
#define glVDPAUUnregisterSurfaceNV _mutVDPAUUnregisterSurfaceNV
#define glValidateProgram _mutValidateProgram
#define glValidateProgramARB _mutValidateProgramARB
#define glValidateProgramPipeline _mutValidateProgramPipeline
#define glValidateProgramPipelineEXT _mutValidateProgramPipelineEXT
#define glVariantArrayObjectATI _mutVariantArrayObjectATI
#define glVariantPointerEXT _mutVariantPointerEXT
#define glVariantbvEXT _mutVariantbvEXT
#define glVariantdvEXT _mutVariantdvEXT
#define glVariantfvEXT _mutVariantfvEXT
#define glVariantivEXT _mutVariantivEXT
#define glVariantsvEXT _mutVariantsvEXT
#define glVariantubvEXT _mutVariantubvEXT
#define glVariantuivEXT _mutVariantuivEXT
#define glVariantusvEXT _mutVariantusvEXT
#define glVertex2bOES _mutVertex2bOES
#define glVertex2bvOES _mutVertex2bvOES
#define glVertex2hNV _mutVertex2hNV
#define glVertex2hvNV _mutVertex2hvNV
#define glVertex2xOES _mutVertex2xOES
#define glVertex2xvOES _mutVertex2xvOES
#define glVertex3bOES _mutVertex3bOES
#define glVertex3bvOES _mutVertex3bvOES
#define glVertex3hNV _mutVertex3hNV
#define glVertex3hvNV _mutVertex3hvNV
#define glVertex3xOES _mutVertex3xOES
#define glVertex3xvOES _mutVertex3xvOES
#define glVertex4bOES _mutVertex4bOES
#define glVertex4bvOES _mutVertex4bvOES
#define glVertex4hNV _mutVertex4hNV
#define glVertex4hvNV _mutVertex4hvNV
#define glVertex4xOES _mutVertex4xOES
#define glVertex4xvOES _mutVertex4xvOES
#define glVertexArrayAttribBinding _mutVertexArrayAttribBinding
#define glVertexArrayAttribFormat _mutVertexArrayAttribFormat
#define glVertexArrayAttribIFormat _mutVertexArrayAttribIFormat
#define glVertexArrayAttribLFormat _mutVertexArrayAttribLFormat
#define glVertexArrayBindVertexBufferEXT _mutVertexArrayBindVertexBufferEXT
#define glVertexArrayBindingDivisor _mutVertexArrayBindingDivisor
#define glVertexArrayColorOffsetEXT _mutVertexArrayColorOffsetEXT
#define glVertexArrayEdgeFlagOffsetEXT _mutVertexArrayEdgeFlagOffsetEXT
#define glVertexArrayElementBuffer _mutVertexArrayElementBuffer
#define glVertexArrayFogCoordOffsetEXT _mutVertexArrayFogCoordOffsetEXT
#define glVertexArrayIndexOffsetEXT _mutVertexArrayIndexOffsetEXT
#define glVertexArrayMultiTexCoordOffsetEXT _mutVertexArrayMultiTexCoordOffsetEXT
#define glVertexArrayNormalOffsetEXT _mutVertexArrayNormalOffsetEXT
#define glVertexArrayParameteriAPPLE _mutVertexArrayParameteriAPPLE
#define glVertexArrayRangeAPPLE _mutVertexArrayRangeAPPLE
#define glVertexArrayRangeNV _mutVertexArrayRangeNV
#define glVertexArraySecondaryColorOffsetEXT _mutVertexArraySecondaryColorOffsetEXT
#define glVertexArrayTexCoordOffsetEXT _mutVertexArrayTexCoordOffsetEXT
#define glVertexArrayVertexAttribBindingEXT _mutVertexArrayVertexAttribBindingEXT
#define glVertexArrayVertexAttribDivisorEXT _mutVertexArrayVertexAttribDivisorEXT
#define glVertexArrayVertexAttribFormatEXT _mutVertexArrayVertexAttribFormatEXT
#define glVertexArrayVertexAttribIFormatEXT _mutVertexArrayVertexAttribIFormatEXT
#define glVertexArrayVertexAttribIOffsetEXT _mutVertexArrayVertexAttribIOffsetEXT
#define glVertexArrayVertexAttribLFormatEXT _mutVertexArrayVertexAttribLFormatEXT
#define glVertexArrayVertexAttribLOffsetEXT _mutVertexArrayVertexAttribLOffsetEXT
#define glVertexArrayVertexAttribOffsetEXT _mutVertexArrayVertexAttribOffsetEXT
#define glVertexArrayVertexBindingDivisorEXT _mutVertexArrayVertexBindingDivisorEXT
#define glVertexArrayVertexBuffer _mutVertexArrayVertexBuffer
#define glVertexArrayVertexBuffers _mutVertexArrayVertexBuffers
#define glVertexArrayVertexOffsetEXT _mutVertexArrayVertexOffsetEXT
#define glVertexAttrib1d _mutVertexAttrib1d
#define glVertexAttrib1dARB _mutVertexAttrib1dARB
#define glVertexAttrib1dNV _mutVertexAttrib1dNV
#define glVertexAttrib1dv _mutVertexAttrib1dv
#define glVertexAttrib1dvARB _mutVertexAttrib1dvARB
#define glVertexAttrib1dvNV _mutVertexAttrib1dvNV
#define glVertexAttrib1f _mutVertexAttrib1f
#define glVertexAttrib1fARB _mutVertexAttrib1fARB
#define glVertexAttrib1fNV _mutVertexAttrib1fNV
#define glVertexAttrib1fv _mutVertexAttrib1fv
#define glVertexAttrib1fvARB _mutVertexAttrib1fvARB
#define glVertexAttrib1fvNV _mutVertexAttrib1fvNV
#define glVertexAttrib1hNV _mutVertexAttrib1hNV
#define glVertexAttrib1hvNV _mutVertexAttrib1hvNV
#define glVertexAttrib1s _mutVertexAttrib1s
#define glVertexAttrib1sARB _mutVertexAttrib1sARB
#define glVertexAttrib1sNV _mutVertexAttrib1sNV
#define glVertexAttrib1sv _mutVertexAttrib1sv
#define glVertexAttrib1svARB _mutVertexAttrib1svARB
#define glVertexAttrib1svNV _mutVertexAttrib1svNV
#define glVertexAttrib2d _mutVertexAttrib2d
#define glVertexAttrib2dARB _mutVertexAttrib2dARB
#define glVertexAttrib2dNV _mutVertexAttrib2dNV
#define glVertexAttrib2dv _mutVertexAttrib2dv
#define glVertexAttrib2dvARB _mutVertexAttrib2dvARB
#define glVertexAttrib2dvNV _mutVertexAttrib2dvNV
#define glVertexAttrib2f _mutVertexAttrib2f
#define glVertexAttrib2fARB _mutVertexAttrib2fARB
#define glVertexAttrib2fNV _mutVertexAttrib2fNV
#define glVertexAttrib2fv _mutVertexAttrib2fv
#define glVertexAttrib2fvARB _mutVertexAttrib2fvARB
#define glVertexAttrib2fvNV _mutVertexAttrib2fvNV
#define glVertexAttrib2hNV _mutVertexAttrib2hNV
#define glVertexAttrib2hvNV _mutVertexAttrib2hvNV
#define glVertexAttrib2s _mutVertexAttrib2s
#define glVertexAttrib2sARB _mutVertexAttrib2sARB
#define glVertexAttrib2sNV _mutVertexAttrib2sNV
#define glVertexAttrib2sv _mutVertexAttrib2sv
#define glVertexAttrib2svARB _mutVertexAttrib2svARB
#define glVertexAttrib2svNV _mutVertexAttrib2svNV
#define glVertexAttrib3d _mutVertexAttrib3d
#define glVertexAttrib3dARB _mutVertexAttrib3dARB
#define glVertexAttrib3dNV _mutVertexAttrib3dNV
#define glVertexAttrib3dv _mutVertexAttrib3dv
#define glVertexAttrib3dvARB _mutVertexAttrib3dvARB
#define glVertexAttrib3dvNV _mutVertexAttrib3dvNV
#define glVertexAttrib3f _mutVertexAttrib3f
#define glVertexAttrib3fARB _mutVertexAttrib3fARB
#define glVertexAttrib3fNV _mutVertexAttrib3fNV
#define glVertexAttrib3fv _mutVertexAttrib3fv
#define glVertexAttrib3fvARB _mutVertexAttrib3fvARB
#define glVertexAttrib3fvNV _mutVertexAttrib3fvNV
#define glVertexAttrib3hNV _mutVertexAttrib3hNV
#define glVertexAttrib3hvNV _mutVertexAttrib3hvNV
#define glVertexAttrib3s _mutVertexAttrib3s
#define glVertexAttrib3sARB _mutVertexAttrib3sARB
#define glVertexAttrib3sNV _mutVertexAttrib3sNV
#define glVertexAttrib3sv _mutVertexAttrib3sv
#define glVertexAttrib3svARB _mutVertexAttrib3svARB
#define glVertexAttrib3svNV _mutVertexAttrib3svNV
#define glVertexAttrib4Nbv _mutVertexAttrib4Nbv
#define glVertexAttrib4NbvARB _mutVertexAttrib4NbvARB
#define glVertexAttrib4Niv _mutVertexAttrib4Niv
#define glVertexAttrib4NivARB _mutVertexAttrib4NivARB
#define glVertexAttrib4Nsv _mutVertexAttrib4Nsv
#define glVertexAttrib4NsvARB _mutVertexAttrib4NsvARB
#define glVertexAttrib4Nub _mutVertexAttrib4Nub
#define glVertexAttrib4NubARB _mutVertexAttrib4NubARB
#define glVertexAttrib4Nubv _mutVertexAttrib4Nubv
#define glVertexAttrib4NubvARB _mutVertexAttrib4NubvARB
#define glVertexAttrib4Nuiv _mutVertexAttrib4Nuiv
#define glVertexAttrib4NuivARB _mutVertexAttrib4NuivARB
#define glVertexAttrib4Nusv _mutVertexAttrib4Nusv
#define glVertexAttrib4NusvARB _mutVertexAttrib4NusvARB
#define glVertexAttrib4bv _mutVertexAttrib4bv
#define glVertexAttrib4bvARB _mutVertexAttrib4bvARB
#define glVertexAttrib4d _mutVertexAttrib4d
#define glVertexAttrib4dARB _mutVertexAttrib4dARB
#define glVertexAttrib4dNV _mutVertexAttrib4dNV
#define glVertexAttrib4dv _mutVertexAttrib4dv
#define glVertexAttrib4dvARB _mutVertexAttrib4dvARB
#define glVertexAttrib4dvNV _mutVertexAttrib4dvNV
#define glVertexAttrib4f _mutVertexAttrib4f
#define glVertexAttrib4fARB _mutVertexAttrib4fARB
#define glVertexAttrib4fNV _mutVertexAttrib4fNV
#define glVertexAttrib4fv _mutVertexAttrib4fv
#define glVertexAttrib4fvARB _mutVertexAttrib4fvARB
#define glVertexAttrib4fvNV _mutVertexAttrib4fvNV
#define glVertexAttrib4hNV _mutVertexAttrib4hNV
#define glVertexAttrib4hvNV _mutVertexAttrib4hvNV
#define glVertexAttrib4iv _mutVertexAttrib4iv
#define glVertexAttrib4ivARB _mutVertexAttrib4ivARB
#define glVertexAttrib4s _mutVertexAttrib4s
#define glVertexAttrib4sARB _mutVertexAttrib4sARB
#define glVertexAttrib4sNV _mutVertexAttrib4sNV
#define glVertexAttrib4sv _mutVertexAttrib4sv
#define glVertexAttrib4svARB _mutVertexAttrib4svARB
#define glVertexAttrib4svNV _mutVertexAttrib4svNV
#define glVertexAttrib4ubNV _mutVertexAttrib4ubNV
#define glVertexAttrib4ubv _mutVertexAttrib4ubv
#define glVertexAttrib4ubvARB _mutVertexAttrib4ubvARB
#define glVertexAttrib4ubvNV _mutVertexAttrib4ubvNV
#define glVertexAttrib4uiv _mutVertexAttrib4uiv
#define glVertexAttrib4uivARB _mutVertexAttrib4uivARB
#define glVertexAttrib4usv _mutVertexAttrib4usv
#define glVertexAttrib4usvARB _mutVertexAttrib4usvARB
#define glVertexAttribArrayObjectATI _mutVertexAttribArrayObjectATI
#define glVertexAttribBinding _mutVertexAttribBinding
#define glVertexAttribDivisor _mutVertexAttribDivisor
#define glVertexAttribDivisorANGLE _mutVertexAttribDivisorANGLE
#define glVertexAttribDivisorARB _mutVertexAttribDivisorARB
#define glVertexAttribDivisorEXT _mutVertexAttribDivisorEXT
#define glVertexAttribDivisorNV _mutVertexAttribDivisorNV
#define glVertexAttribFormat _mutVertexAttribFormat
#define glVertexAttribFormatNV _mutVertexAttribFormatNV
#define glVertexAttribI1i _mutVertexAttribI1i
#define glVertexAttribI1iEXT _mutVertexAttribI1iEXT
#define glVertexAttribI1iv _mutVertexAttribI1iv
#define glVertexAttribI1ivEXT _mutVertexAttribI1ivEXT
#define glVertexAttribI1ui _mutVertexAttribI1ui
#define glVertexAttribI1uiEXT _mutVertexAttribI1uiEXT
#define glVertexAttribI1uiv _mutVertexAttribI1uiv
#define glVertexAttribI1uivEXT _mutVertexAttribI1uivEXT
#define glVertexAttribI2i _mutVertexAttribI2i
#define glVertexAttribI2iEXT _mutVertexAttribI2iEXT
#define glVertexAttribI2iv _mutVertexAttribI2iv
#define glVertexAttribI2ivEXT _mutVertexAttribI2ivEXT
#define glVertexAttribI2ui _mutVertexAttribI2ui
#define glVertexAttribI2uiEXT _mutVertexAttribI2uiEXT
#define glVertexAttribI2uiv _mutVertexAttribI2uiv
#define glVertexAttribI2uivEXT _mutVertexAttribI2uivEXT
#define glVertexAttribI3i _mutVertexAttribI3i
#define glVertexAttribI3iEXT _mutVertexAttribI3iEXT
#define glVertexAttribI3iv _mutVertexAttribI3iv
#define glVertexAttribI3ivEXT _mutVertexAttribI3ivEXT
#define glVertexAttribI3ui _mutVertexAttribI3ui
#define glVertexAttribI3uiEXT _mutVertexAttribI3uiEXT
#define glVertexAttribI3uiv _mutVertexAttribI3uiv
#define glVertexAttribI3uivEXT _mutVertexAttribI3uivEXT
#define glVertexAttribI4bv _mutVertexAttribI4bv
#define glVertexAttribI4bvEXT _mutVertexAttribI4bvEXT
#define glVertexAttribI4i _mutVertexAttribI4i
#define glVertexAttribI4iEXT _mutVertexAttribI4iEXT
#define glVertexAttribI4iv _mutVertexAttribI4iv
#define glVertexAttribI4ivEXT _mutVertexAttribI4ivEXT
#define glVertexAttribI4sv _mutVertexAttribI4sv
#define glVertexAttribI4svEXT _mutVertexAttribI4svEXT
#define glVertexAttribI4ubv _mutVertexAttribI4ubv
#define glVertexAttribI4ubvEXT _mutVertexAttribI4ubvEXT
#define glVertexAttribI4ui _mutVertexAttribI4ui
#define glVertexAttribI4uiEXT _mutVertexAttribI4uiEXT
#define glVertexAttribI4uiv _mutVertexAttribI4uiv
#define glVertexAttribI4uivEXT _mutVertexAttribI4uivEXT
#define glVertexAttribI4usv _mutVertexAttribI4usv
#define glVertexAttribI4usvEXT _mutVertexAttribI4usvEXT
#define glVertexAttribIFormat _mutVertexAttribIFormat
#define glVertexAttribIFormatNV _mutVertexAttribIFormatNV
#define glVertexAttribIPointer _mutVertexAttribIPointer
#define glVertexAttribIPointerEXT _mutVertexAttribIPointerEXT
#define glVertexAttribL1d _mutVertexAttribL1d
#define glVertexAttribL1dEXT _mutVertexAttribL1dEXT
#define glVertexAttribL1dv _mutVertexAttribL1dv
#define glVertexAttribL1dvEXT _mutVertexAttribL1dvEXT
#define glVertexAttribL1i64NV _mutVertexAttribL1i64NV
#define glVertexAttribL1i64vNV _mutVertexAttribL1i64vNV
#define glVertexAttribL1ui64ARB _mutVertexAttribL1ui64ARB
#define glVertexAttribL1ui64NV _mutVertexAttribL1ui64NV
#define glVertexAttribL1ui64vARB _mutVertexAttribL1ui64vARB
#define glVertexAttribL1ui64vNV _mutVertexAttribL1ui64vNV
#define glVertexAttribL2d _mutVertexAttribL2d
#define glVertexAttribL2dEXT _mutVertexAttribL2dEXT
#define glVertexAttribL2dv _mutVertexAttribL2dv
#define glVertexAttribL2dvEXT _mutVertexAttribL2dvEXT
#define glVertexAttribL2i64NV _mutVertexAttribL2i64NV
#define glVertexAttribL2i64vNV _mutVertexAttribL2i64vNV
#define glVertexAttribL2ui64NV _mutVertexAttribL2ui64NV
#define glVertexAttribL2ui64vNV _mutVertexAttribL2ui64vNV
#define glVertexAttribL3d _mutVertexAttribL3d
#define glVertexAttribL3dEXT _mutVertexAttribL3dEXT
#define glVertexAttribL3dv _mutVertexAttribL3dv
#define glVertexAttribL3dvEXT _mutVertexAttribL3dvEXT
#define glVertexAttribL3i64NV _mutVertexAttribL3i64NV
#define glVertexAttribL3i64vNV _mutVertexAttribL3i64vNV
#define glVertexAttribL3ui64NV _mutVertexAttribL3ui64NV
#define glVertexAttribL3ui64vNV _mutVertexAttribL3ui64vNV
#define glVertexAttribL4d _mutVertexAttribL4d
#define glVertexAttribL4dEXT _mutVertexAttribL4dEXT
#define glVertexAttribL4dv _mutVertexAttribL4dv
#define glVertexAttribL4dvEXT _mutVertexAttribL4dvEXT
#define glVertexAttribL4i64NV _mutVertexAttribL4i64NV
#define glVertexAttribL4i64vNV _mutVertexAttribL4i64vNV
#define glVertexAttribL4ui64NV _mutVertexAttribL4ui64NV
#define glVertexAttribL4ui64vNV _mutVertexAttribL4ui64vNV
#define glVertexAttribLFormat _mutVertexAttribLFormat
#define glVertexAttribLFormatNV _mutVertexAttribLFormatNV
#define glVertexAttribLPointer _mutVertexAttribLPointer
#define glVertexAttribLPointerEXT _mutVertexAttribLPointerEXT
#define glVertexAttribP1ui _mutVertexAttribP1ui
#define glVertexAttribP1uiv _mutVertexAttribP1uiv
#define glVertexAttribP2ui _mutVertexAttribP2ui
#define glVertexAttribP2uiv _mutVertexAttribP2uiv
#define glVertexAttribP3ui _mutVertexAttribP3ui
#define glVertexAttribP3uiv _mutVertexAttribP3uiv
#define glVertexAttribP4ui _mutVertexAttribP4ui
#define glVertexAttribP4uiv _mutVertexAttribP4uiv
#define glVertexAttribParameteriAMD _mutVertexAttribParameteriAMD
#define glVertexAttribPointer _mutVertexAttribPointer
#define glVertexAttribPointerARB _mutVertexAttribPointerARB
#define glVertexAttribPointerNV _mutVertexAttribPointerNV
#define glVertexAttribs1dvNV _mutVertexAttribs1dvNV
#define glVertexAttribs1fvNV _mutVertexAttribs1fvNV
#define glVertexAttribs1hvNV _mutVertexAttribs1hvNV
#define glVertexAttribs1svNV _mutVertexAttribs1svNV
#define glVertexAttribs2dvNV _mutVertexAttribs2dvNV
#define glVertexAttribs2fvNV _mutVertexAttribs2fvNV
#define glVertexAttribs2hvNV _mutVertexAttribs2hvNV
#define glVertexAttribs2svNV _mutVertexAttribs2svNV
#define glVertexAttribs3dvNV _mutVertexAttribs3dvNV
#define glVertexAttribs3fvNV _mutVertexAttribs3fvNV
#define glVertexAttribs3hvNV _mutVertexAttribs3hvNV
#define glVertexAttribs3svNV _mutVertexAttribs3svNV
#define glVertexAttribs4dvNV _mutVertexAttribs4dvNV
#define glVertexAttribs4fvNV _mutVertexAttribs4fvNV
#define glVertexAttribs4hvNV _mutVertexAttribs4hvNV
#define glVertexAttribs4svNV _mutVertexAttribs4svNV
#define glVertexAttribs4ubvNV _mutVertexAttribs4ubvNV
#define glVertexBindingDivisor _mutVertexBindingDivisor
#define glVertexBlendARB _mutVertexBlendARB
#define glVertexBlendEnvfATI _mutVertexBlendEnvfATI
#define glVertexBlendEnviATI _mutVertexBlendEnviATI
#define glVertexFormatNV _mutVertexFormatNV
#define glVertexP2ui _mutVertexP2ui
#define glVertexP2uiv _mutVertexP2uiv
#define glVertexP3ui _mutVertexP3ui
#define glVertexP3uiv _mutVertexP3uiv
#define glVertexP4ui _mutVertexP4ui
#define glVertexP4uiv _mutVertexP4uiv
#define glVertexPointerEXT _mutVertexPointerEXT
#define glVertexPointerListIBM _mutVertexPointerListIBM
#define glVertexPointervINTEL _mutVertexPointervINTEL
#define glVertexStream1dATI _mutVertexStream1dATI
#define glVertexStream1dvATI _mutVertexStream1dvATI
#define glVertexStream1fATI _mutVertexStream1fATI
#define glVertexStream1fvATI _mutVertexStream1fvATI
#define glVertexStream1iATI _mutVertexStream1iATI
#define glVertexStream1ivATI _mutVertexStream1ivATI
#define glVertexStream1sATI _mutVertexStream1sATI
#define glVertexStream1svATI _mutVertexStream1svATI
#define glVertexStream2dATI _mutVertexStream2dATI
#define glVertexStream2dvATI _mutVertexStream2dvATI
#define glVertexStream2fATI _mutVertexStream2fATI
#define glVertexStream2fvATI _mutVertexStream2fvATI
#define glVertexStream2iATI _mutVertexStream2iATI
#define glVertexStream2ivATI _mutVertexStream2ivATI
#define glVertexStream2sATI _mutVertexStream2sATI
#define glVertexStream2svATI _mutVertexStream2svATI
#define glVertexStream3dATI _mutVertexStream3dATI
#define glVertexStream3dvATI _mutVertexStream3dvATI
#define glVertexStream3fATI _mutVertexStream3fATI
#define glVertexStream3fvATI _mutVertexStream3fvATI
#define glVertexStream3iATI _mutVertexStream3iATI
#define glVertexStream3ivATI _mutVertexStream3ivATI
#define glVertexStream3sATI _mutVertexStream3sATI
#define glVertexStream3svATI _mutVertexStream3svATI
#define glVertexStream4dATI _mutVertexStream4dATI
#define glVertexStream4dvATI _mutVertexStream4dvATI
#define glVertexStream4fATI _mutVertexStream4fATI
#define glVertexStream4fvATI _mutVertexStream4fvATI
#define glVertexStream4iATI _mutVertexStream4iATI
#define glVertexStream4ivATI _mutVertexStream4ivATI
#define glVertexStream4sATI _mutVertexStream4sATI
#define glVertexStream4svATI _mutVertexStream4svATI
#define glVertexWeightPointerEXT _mutVertexWeightPointerEXT
#define glVertexWeightfEXT _mutVertexWeightfEXT
#define glVertexWeightfvEXT _mutVertexWeightfvEXT
#define glVertexWeighthNV _mutVertexWeighthNV
#define glVertexWeighthvNV _mutVertexWeighthvNV
#define glVideoCaptureNV _mutVideoCaptureNV
#define glVideoCaptureStreamParameterdvNV _mutVideoCaptureStreamParameterdvNV
#define glVideoCaptureStreamParameterfvNV _mutVideoCaptureStreamParameterfvNV
#define glVideoCaptureStreamParameterivNV _mutVideoCaptureStreamParameterivNV
#define glViewport _mutViewport
#define glViewportArrayv _mutViewportArrayv
#define glViewportArrayvNV _mutViewportArrayvNV
#define glViewportArrayvOES _mutViewportArrayvOES
#define glViewportIndexedf _mutViewportIndexedf
#define glViewportIndexedfNV _mutViewportIndexedfNV
#define glViewportIndexedfOES _mutViewportIndexedfOES
#define glViewportIndexedfv _mutViewportIndexedfv
#define glViewportIndexedfvNV _mutViewportIndexedfvNV
#define glViewportIndexedfvOES _mutViewportIndexedfvOES
#define glViewportPositionWScaleNV _mutViewportPositionWScaleNV
#define glViewportSwizzleNV _mutViewportSwizzleNV
#define glWaitSemaphoreEXT _mutWaitSemaphoreEXT
#define glWaitSync _mutWaitSync
#define glWaitSyncAPPLE _mutWaitSyncAPPLE
#define glWaitVkSemaphoreNV _mutWaitVkSemaphoreNV
#define glWeightPathsNV _mutWeightPathsNV
#define glWeightPointerARB _mutWeightPointerARB
#define glWeightbvARB _mutWeightbvARB
#define glWeightdvARB _mutWeightdvARB
#define glWeightfvARB _mutWeightfvARB
#define glWeightivARB _mutWeightivARB
#define glWeightsvARB _mutWeightsvARB
#define glWeightubvARB _mutWeightubvARB
#define glWeightuivARB _mutWeightuivARB
#define glWeightusvARB _mutWeightusvARB
#define glWindowPos2d _mutWindowPos2d
#define glWindowPos2dARB _mutWindowPos2dARB
#define glWindowPos2dMESA _mutWindowPos2dMESA
#define glWindowPos2dv _mutWindowPos2dv
#define glWindowPos2dvARB _mutWindowPos2dvARB
#define glWindowPos2dvMESA _mutWindowPos2dvMESA
#define glWindowPos2f _mutWindowPos2f
#define glWindowPos2fARB _mutWindowPos2fARB
#define glWindowPos2fMESA _mutWindowPos2fMESA
#define glWindowPos2fv _mutWindowPos2fv
#define glWindowPos2fvARB _mutWindowPos2fvARB
#define glWindowPos2fvMESA _mutWindowPos2fvMESA
#define glWindowPos2i _mutWindowPos2i
#define glWindowPos2iARB _mutWindowPos2iARB
#define glWindowPos2iMESA _mutWindowPos2iMESA
#define glWindowPos2iv _mutWindowPos2iv
#define glWindowPos2ivARB _mutWindowPos2ivARB
#define glWindowPos2ivMESA _mutWindowPos2ivMESA
#define glWindowPos2s _mutWindowPos2s
#define glWindowPos2sARB _mutWindowPos2sARB
#define glWindowPos2sMESA _mutWindowPos2sMESA
#define glWindowPos2sv _mutWindowPos2sv
#define glWindowPos2svARB _mutWindowPos2svARB
#define glWindowPos2svMESA _mutWindowPos2svMESA
#define glWindowPos3d _mutWindowPos3d
#define glWindowPos3dARB _mutWindowPos3dARB
#define glWindowPos3dMESA _mutWindowPos3dMESA
#define glWindowPos3dv _mutWindowPos3dv
#define glWindowPos3dvARB _mutWindowPos3dvARB
#define glWindowPos3dvMESA _mutWindowPos3dvMESA
#define glWindowPos3f _mutWindowPos3f
#define glWindowPos3fARB _mutWindowPos3fARB
#define glWindowPos3fMESA _mutWindowPos3fMESA
#define glWindowPos3fv _mutWindowPos3fv
#define glWindowPos3fvARB _mutWindowPos3fvARB
#define glWindowPos3fvMESA _mutWindowPos3fvMESA
#define glWindowPos3i _mutWindowPos3i
#define glWindowPos3iARB _mutWindowPos3iARB
#define glWindowPos3iMESA _mutWindowPos3iMESA
#define glWindowPos3iv _mutWindowPos3iv
#define glWindowPos3ivARB _mutWindowPos3ivARB
#define glWindowPos3ivMESA _mutWindowPos3ivMESA
#define glWindowPos3s _mutWindowPos3s
#define glWindowPos3sARB _mutWindowPos3sARB
#define glWindowPos3sMESA _mutWindowPos3sMESA
#define glWindowPos3sv _mutWindowPos3sv
#define glWindowPos3svARB _mutWindowPos3svARB
#define glWindowPos3svMESA _mutWindowPos3svMESA
#define glWindowPos4dMESA _mutWindowPos4dMESA
#define glWindowPos4dvMESA _mutWindowPos4dvMESA
#define glWindowPos4fMESA _mutWindowPos4fMESA
#define glWindowPos4fvMESA _mutWindowPos4fvMESA
#define glWindowPos4iMESA _mutWindowPos4iMESA
#define glWindowPos4ivMESA _mutWindowPos4ivMESA
#define glWindowPos4sMESA _mutWindowPos4sMESA
#define glWindowPos4svMESA _mutWindowPos4svMESA
#define glWindowRectanglesEXT _mutWindowRectanglesEXT
#define glWriteMaskEXT _mutWriteMaskEXT
#endif /* MUT_GL_WRANGLER_ENABLED */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* _MUT_GL_H_ */
