/*
   <%=prefix%>_gl.h - v0.2 - http://nothings.org/stb
   A Public domain ANSI C (C89) compliant GL/GLES extension wrangler
   By Mathieu-Andr√© Chiasson (2017)

   No warranty implied; use at your own risk

   Suports the following OpenGL contexts:
     - OpenGL 1.0
     - OpenGL 1.1
     - OpenGL 1.2
     - OpenGL 1.3
     - OpenGL 1.4
     - OpenGL 1.5
     - OpenGL 2.0
     - OpenGL 2.1
     - OpenGL 3.0
     - OpenGL 3.1
     - OpenGL 3.2
     - OpenGL 3.3
     - OpenGL 4.0
     - OpenGL 4.1
     - OpenGL 4.2
     - OpenGL 4.3
     - OpenGL 4.4
     - OpenGL 4.5
     - OpenGL 4.6
     - OpenGL ES CM 1.0
     - OpenGL ES 2.0
     - OpenGL ES 3.1
     - OpenGL ES 3.2
     - OpenGL SC 2.0 (unverified)
     - WebGL (Emscripten in either asm.js or wasm format)

   Do this:

     #define <%=PREFIX%>_GL_IMPLEMENTATION

   before you include this file in *one* C or C++ file to create the implementation.
     // i.e. it should look like this:
     #include ...
     #include ...
     #include ...
     #define <%=PREFIX%>_GL_IMPLEMENTATION
     #include "<%=prefix%>_gl.h"

   Before you can use any GL or GLES functions from this header make sure to
   call <%=prefix%>GLInit() soon after creating your GL or GLES context, and make sure
   that it returns KHRONOS_TRUE. To  clean up the loaded function pointer table
   and close any opened GL/GLES library handle opened by this wrangler, you can
   call <%=prefix%>GLShutdown().

LICENSE

  See end of file for license information.

RECENT REVISION HISTORY:
      0.2  (Aug 25, 2018) Adapted to STB-Style
      0.1  (Jul 23, 2017) Initial concept (pre-STB)
*/

#ifndef _<%=PREFIX%>_GL_H_
#define _<%=PREFIX%>_GL_H_ 1

/*******************************************************************************
 * FOLLOWING SECTION IS FROM KHR/khrplatform.h, available here:
 * https://www.khronos.org/registry/EGL/api/KHR/khrplatform.h
 ******************************************************************************/
#include <KHR/khrplatform.h>
/*******************************************************************************
 * END OF KHR/khrplatform.h SECTION
 ******************************************************************************/


#if defined(__glu_h__)
#error "GL/glu.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl_h_)
#error "GL/gl.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl2_h_)
#error "GL/gl2.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__glcorearb_h_)
#error "GL/glcorearb.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl20_h_)
#error "GLES2/gl2.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl_es20_h_)
#error "OpenGLES/ES2/gl.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl30_h_)
#error "GLES3/gl3.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl_es30_h_)
#error "OpenGLES/ES3/gl.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl31_h_)
#error "GLES3/gl31.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl32_h_)
#error "GLES3/gl32.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__glext_h_)
#error "GL/glext.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl2ext_h_)
#error "GL/glext.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl_es20ext_h_)
#error "OpenGLES/ES2/glext.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gl_es30ext_h_)
#error "OpenGLES/ES3/glext.h cannot be included before <%=prefix%>_gl.h"
#endif

#if defined(__gltypes_h_)
#error "gltypes.h cannot be included before <%=prefix%>_gl.h"
#endif

#define __glu_h__ 1
#define __gl_h_ 1
#define __gl2_h_ 1
#define __glcorearb_h_ 1
#define __gl20_h_ 1
#define __gl_es20_h_ 1
#define __gl30_h_ 1
#define __gl_es30_h_ 1
#define __gl31_h_ 1
#define __gl32_h_ 1
#define __glext_h_ 1
#define __gl2ext_h_ 1
#define __gl_es20ext_h_ 1
#define __gl_es30ext_h_ 1
#define __gltypes_h_ 1

#if !defined(<%=PREFIX%>_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define <%=PREFIX%>_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define <%=PREFIX%>_FORCE_INLINE __attribute__((always_inline)) static __inline__
    #else
        #define <%=PREFIX%>_FORCE_INLINE static inline
    #endif
#endif

/* GL and GL ES Definitions */
<%=defineBlock%>
/* Version IDs */
<%=versionBlock%>
/* Extension IDs */
<%=extensionBlock%>
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * generic <%=Prefix%>GL Procedure signature
 */
typedef void(KHRONOS_APIENTRY*<%=Prefix%>GLProc)(void);

/*!
 * <%=Prefix%>GetProcAddress signature.
 */
typedef <%=Prefix%>GLProc (*<%=Prefix%>GLGetProcAddressFunc)(const char *);

/*!
 * <%=Prefix%>GetProcAddress function pointer used to wrangle all the GL and
 * GLES functions and extensions. Automatically points the a default
 * implementation, and can be overriden by the user if they need something
 * specific. Make sure that it is set before calling <%=prefix%>GLInit()
 */
extern <%=Prefix%>GLGetProcAddressFunc <%=prefix%>GLGetProcAddress;


/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
khronos_int8_t <%=prefix%>GLInit(void);

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call <%=prefix%>GLInit() instead.
 */
void <%=prefix%>GLShutdown(void);

/*!
 * Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.
 *
 * Usage example:
 *
 * \code
 * if(<%=prefix%>GLSupport(GL_VERSION_3_0) || <%=prefix%>GLSupport(GL_ES_VERSION_3_0))
 * {
 *     void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *        glUnmapBuffer(target);
 * }
 * else if (<%=prefix%>GLSupport(GL_EXT_map_buffer_range) && <%=prefix%>GLSupport(GL_OES_mapbuffer)
 * {
 *     void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *     glUnmapBufferOES(target);
 * }
 * else
 * {
 *     glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
 * }
 * \endcode
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
<%=PREFIX%>_FORCE_INLINE khronos_int8_t <%=prefix%>GLSupport(khronos_usize_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         <%=prefix%>GLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         <%=prefix%>GLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note <%=prefix%>GLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using <%=prefix%>GLCheckErrorDebug instead of <%=prefix%>GLCheckError so that the production
     build won't be impacted. If you want to use <%=prefix%>GLCheckError, make sure it is not called
     during time critical code path.
 */
void _<%=prefix%>GLCheckError(const char* fileName, int lineNumber);
#if !defined(<%=prefix%>GLCheckError)
    #define <%=prefix%>GLCheckError(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__)
#endif
#if !defined(<%=prefix%>GLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define <%=prefix%>GLCheckErrorDebug(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__)
    #else
        #define <%=prefix%>GLCheckErrorDebug(x) x
    #endif
#endif

/* Type definitions */
<%=typeBlock%>

typedef struct <%=Prefix%>GLConfig
{
    khronos_int8_t support[<%=IdCount%>];

<%=funcPtrBlock%>
} <%=Prefix%>GLConfig;

extern <%=Prefix%>GLConfig <%=prefix%>GL; /* global instance. */

<%=PREFIX%>_FORCE_INLINE khronos_int8_t <%=prefix%>GLSupport(khronos_usize_t id) {
    return <%=prefix%>GL.support[id];
}

<%=funcImplBlock%>

#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef <%=PREFIX%>_GL_IMPLEMENTATION

#include <stdio.h>
#include <string.h>

#if defined(_WIN32) && !defined(__CYGWIN__)
#ifndef WIN32_LEAN_AND_MEAN
    #define WIN32_LEAN_AND_MEAN 1
#endif
#include <Windows.h>
#elif !defined(__EMSCRIPTEN__)
#include <dlfcn.h>
#endif

#ifndef <%=PREFIX%>_SSCANF
    #if defined(_MSC_VER)
        #define <%=PREFIX%>_SSCANF sscanf_s
    #else
        #define <%=PREFIX%>_SSCANF sscanf
    #endif
#endif

#ifdef __cplusplus
extern "C"  {
#endif

#if defined(__EMSCRIPTEN__)
    extern void* emscripten_GetProcAddress(const char *name_);
#elif defined(_WIN32) && !defined(__CYGWIN__)
    static HMODULE s_<%=prefix%>GLLib = NULL;
#else
    static void *s_<%=prefix%>GLLib = NULL;
#endif

<%=Prefix%>GLConfig <%=prefix%>GL;

static <%=Prefix%>GLProc <%=prefix%>GLGetProcAddressDefaultImpl(const char *procName)
{
    <%=Prefix%>GLProc proc;
#if defined(__EMSCRIPTEN__)
    proc = (<%=Prefix%>GLProc)emscripten_GetProcAddress(procName);
#elif defined(_WIN32)
    proc = (<%=Prefix%>GLProc)GetProcAddress(s_<%=prefix%>GLLib, procName);
    if (!proc)
    {
        proc = (<%=Prefix%>GLProc)wglGetProcAddress(procName);
    }
#else
    *(void **)(&proc) = dlsym(s_<%=prefix%>GLLib, procName);
#endif
    return proc;
}

<%=Prefix%>GLGetProcAddressFunc <%=prefix%>GLGetProcAddress = <%=prefix%>GLGetProcAddressDefaultImpl;

static void <%=prefix%>GLAddExtension(khronos_int8_t isGLES, const char* const extensionStr, khronos_usize_t extensionStrLength) {
    if(isGLES) {
<%=glesAddExtensionBlock%>
        /*
         * Discovered a bug in Qualcomm Adreno 200 OpenGL ES driver, where
         * these three extensions are literally fused together.
         */
        if (!(<%=prefix%>GL.support[GL_EXT_debug_label] && <%=prefix%>GL.support[GL_EXT_debug_marker] && <%=prefix%>GL.support[GL_EXT_robustness]) &&
            (extensionStrLength == 54) && strncmp(extensionStr, "GL_EXT_debug_labelGL_EXT_debug_markerGL_EXT_robustness", extensionStrLength) == 0)
        {
            <%=prefix%>GL.support[GL_EXT_debug_label] = KHRONOS_TRUE;
            <%=prefix%>GL.support[GL_EXT_debug_marker] = KHRONOS_TRUE;
            <%=prefix%>GL.support[GL_EXT_robustness] = KHRONOS_TRUE;
            return;
        }
    } else {
<%=glAddExtensionBlock%>
    }
}

khronos_int8_t <%=prefix%>GLInit(void) {
    khronos_int8_t  isGLES = KHRONOS_FALSE;
    const char*     version = NULL;
    khronos_int32_t versionMajor = -1;
    khronos_int32_t versionMinor = -1;

#if !defined(__EMSCRIPTEN__)
    if (s_<%=prefix%>GLLib == NULL)
    {
#if defined(_WIN32)
        s_<%=prefix%>GLLib = LoadLibraryA(TEXT("opengl32.dll"));
#else
        s_<%=prefix%>GLLib = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
        if (s_<%=prefix%>GLLib == NULL) s_<%=prefix%>GLLib = dlopen("libGLESv3.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_<%=prefix%>GLLib == NULL) s_<%=prefix%>GLLib = dlopen("libGLESv2.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_<%=prefix%>GLLib == NULL) s_<%=prefix%>GLLib = dlopen(0, RTLD_LAZY | RTLD_GLOBAL);
#endif
    }
#endif

    memset(&<%=prefix%>GL, 0, sizeof(<%=Prefix%>GLConfig));

<%=getProcBlock%>
    if (!<%=prefix%>GL.<%=prefix%>GetError) {
        fprintf(stderr, "Could not find 'glGetError'\n");
        return KHRONOS_FALSE;
    }

    if (!<%=prefix%>GL.<%=prefix%>GetString) {
        fprintf(stderr, "Could not find 'glGetString'\n");
        return KHRONOS_FALSE;
    }

    version  = (const char*)<%=prefix%>GL.<%=prefix%>GetString(GL_VERSION);

    if(!version) {
        fprintf(stderr, "<%=prefix%>GLInit() : Missing GL context. Make sure your context is created and made current prior to calling <%=prefix%>GLInit.\n");
        return KHRONOS_FALSE;
    }

    if ((<%=PREFIX%>_SSCANF(version, "OpenGL ES %d.%d",    &versionMajor, &versionMinor) == 2) ||
        (<%=PREFIX%>_SSCANF(version, "OpenGL ES-CM %d.%d", &versionMajor, &versionMinor) == 2)) {
        isGLES = KHRONOS_TRUE;
    } else if (<%=PREFIX%>_SSCANF(version, "%d.%d", &versionMajor, &versionMinor) != 2) {
        fprintf(stderr, "<%=prefix%>GLInit() : Could not determine OpenGL/OpenGLES version.\n");
        return KHRONOS_FALSE;
    }

    if(isGLES) {
<%=glesSupportBlock%>
    } else {
<%=glSupportBlock%>
    }

    if (<%=prefix%>GL.support[GL_VERSION_3_0] || <%=prefix%>GL.support[GL_ES_VERSION_3_0]) {
        khronos_int32_t i = 0;
        khronos_int32_t nExtensionsCount = 0;
        <%=prefix%>GL.<%=prefix%>GetIntegerv(GL_NUM_EXTENSIONS, &nExtensionsCount);
        while(i < nExtensionsCount)
        {
            const char* extensionStr = (const char*)<%=prefix%>GL.<%=prefix%>GetStringi(GL_EXTENSIONS, i++);
            <%=prefix%>GLAddExtension(isGLES, extensionStr, strlen(extensionStr));
        }
    } else {
        const char* extensionsStr = (const char*)<%=prefix%>GL.<%=prefix%>GetString(GL_EXTENSIONS);
        while (extensionsStr) {
            const char* spacerPos = strchr(extensionsStr, ' ');
            khronos_usize_t extensionsStrLength = spacerPos ? (khronos_usize_t)(spacerPos++ - extensionsStr) : strlen(extensionsStr);
            <%=prefix%>GLAddExtension(isGLES, extensionsStr, extensionsStrLength);
            extensionsStr = spacerPos;
        }
    }

    return KHRONOS_TRUE;
}

void <%=prefix%>GLShutdown(void) {
    memset(&<%=prefix%>GL, 0, sizeof(<%=Prefix%>GLConfig));

#if !defined(__EMSCRIPTEN__)
    if (s_<%=prefix%>GLLib)
    {
#if defined(_WIN32)
        FreeLibrary(s_<%=prefix%>GLLib);
#else
        dlclose(s_<%=prefix%>GLLib);
#endif
        s_<%=prefix%>GLLib = NULL;
    }
#endif

}

void _<%=prefix%>GLCheckError(const char* fileName, int lineNumber) {
    GLenum eErrorID = <%=prefix%>GL.<%=prefix%>GetError();
    if (eErrorID != GL_NO_ERROR) {
        do {
            static const char* errMsg[] = {
                "GL_INVALID_ENUM: An unacceptable value is specified for an enumerated argument.",
                "GL_INVALID_VALUE: A numeric argument is out of range.",
                "GL_INVALID_OPERATION: The specified operation is not allowed in the current state.",
                "GL_STACK_OVERFLOW: This function caused a stack overflow.",
                "GL_STACK_UNDERFLOW: This function would cause a stack underflow.",
                "GL_OUT_OF_MEMORY: There is not enough memory left to execute the command.",
                "GL_INVALID_FRAMEBUFFER_OPERATION: The command is trying to render to or read from the framebuffer while the currently bound framebuffer is not framebuffer complete.",
                "GL_CONTEXT_LOST: The context has been lost, due to a graphics card reset."
            };

            khronos_usize_t errorIndex = eErrorID - GL_INVALID_ENUM;
            if (errorIndex > sizeof(errMsg)) {
                fprintf(stderr, "<%=prefix%>GLCheckError : file %s, line %d : Unknown error 0x%X\n", fileName, lineNumber, eErrorID);
            } else {
                fprintf(stderr, "<%=prefix%>GLCheckError : file %s, line %d : %s\n", fileName, lineNumber, errMsg[errorIndex]);
            }
        } while((eErrorID = <%=prefix%>GL.<%=prefix%>GetError()) != GL_NO_ERROR);
    }
}

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* <%=PREFIX%>_IMPLEMENTATION */

#endif /* _<%=PREFIX%>_GL_H_ */

/*
------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) <%=year%> Mathieu-Andr√© Chiasson
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
*/
