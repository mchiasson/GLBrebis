/*******************************************************************************
 * This file was generated by GLBrebis on <%=now%>
 * https://github.com/mchiasson/GLBrebis
 *******************************************************************************
 * GLBrebis License (MIT)
 *******************************************************************************
 * Copyright (c) <%=year%> Mathieu-Andr√© Chiasson
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be included in
 *    all copies or substantial portions of the Software.
 *
 * Disclaimer:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

#ifndef _<%=PREFIX%>_GL_H_
#define _<%=PREFIX%>_GL_H_ 1

#include <KHR/khrplatform.h>
#include <stddef.h>

#if defined(__glu_h__)
#error "GL/glu.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl_h_)
#error "GL/gl.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl2_h_)
#error "GL/gl2.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__glcorearb_h_)
#error "GL/glcorearb.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl20_h_)
#error "GLES2/gl2.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl_es20_h_)
#error "OpenGLES/ES2/gl.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl30_h_)
#error "GLES3/gl3.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl_es30_h_)
#error "OpenGLES/ES3/gl.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl31_h_)
#error "GLES3/gl31.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl32_h_)
#error "GLES3/gl32.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__glext_h_)
#error "GL/glext.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl2ext_h_)
#error "GL/glext.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl_es20ext_h_)
#error "OpenGLES/ES2/glext.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gl_es30ext_h_)
#error "OpenGLES/ES3/glext.h cannot be included before <%=Prefix%>GL.h"
#endif

#if defined(__gltypes_h_)
#error "gltypes.h cannot be included before <%=Prefix%>GL.h"
#endif

#define __glu_h__ 1
#define __gl_h_ 1
#define __gl2_h_ 1
#define __glcorearb_h_ 1
#define __gl20_h_ 1
#define __gl_es20_h_ 1
#define __gl30_h_ 1
#define __gl_es30_h_ 1
#define __gl31_h_ 1
#define __gl32_h_ 1
#define __glext_h_ 1
#define __gl2ext_h_ 1
#define __gl_es20ext_h_ 1
#define __gl_es30ext_h_ 1
#define __gltypes_h_ 1

#if !defined(<%=PREFIX%>_PROTO_IMPL)
    #define <%=PREFIX%>_PROTO_IMPL 1
#endif

#if !defined(<%=PREFIX%>_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define <%=PREFIX%>_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define <%=PREFIX%>_FORCE_INLINE __attribute__((always_inline)) static __inline__
    #else
        #define <%=PREFIX%>_FORCE_INLINE static inline
    #endif
#endif

/* GL and GL ES Definitions */
<%=defineBlock%>
/* Version IDs */
<%=versionBlock%>
/* Extension IDs */
<%=extensionBlock%>
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * generic <%=Prefix%>GL Procedure signature
 */
typedef void(KHRONOS_APIENTRY*<%=Prefix%>GLProc)();

/*!
 * <%=Prefix%>GetProcAddress signature.
 */
typedef <%=Prefix%>GLProc (*<%=Prefix%>GLGetProcAddressFunc)(const char *);

/*!
 * <%=Prefix%>GetProcAddress function pointer used to wrangle all the GL and
 * GLES functions and extensions. Automatically points the a default
 * implementation, and can be overriden by the user if they need something
 * specific. Make sure that it is set before calling <%=prefix%>GLInit()
 */
extern <%=Prefix%>GLGetProcAddressFunc <%=prefix%>GLGetProcAddress;


/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
khronos_int8_t <%=prefix%>GLInit();

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call <%=prefix%>GLInit() instead.
 */
void <%=prefix%>GLShutdown();

/*!
 * Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.
 *
 * Usage example:
 *
 * \code
 * if(<%=prefix%>GLSupport(GL_VERSION_3_0) || <%=prefix%>GLSupport(GL_ES_VERSION_3_0))
 * {
 *     void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *        glUnmapBuffer(target);
 * }
 * else if (<%=prefix%>GLSupport(GL_EXT_map_buffer_range) && <%=prefix%>GLSupport(GL_OES_mapbuffer)
 * {
 *     void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *     glUnmapBufferOES(target);
 * }
 * else
 * {
 *     glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
 * }
 * \endcode
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
<%=PREFIX%>_FORCE_INLINE khronos_int8_t <%=prefix%>GLSupport(size_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         <%=prefix%>GLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         <%=prefix%>GLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note <%=prefix%>GLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using <%=prefix%>GLCheckErrorDebug instead of <%=prefix%>GLCheckError so that the production
     build won't be impacted. If you want to use <%=prefix%>GLCheckError, make sure it is not called
     during time critical code path.
 */
void _<%=prefix%>GLCheckError(const char* fileName, int lineNumber);
#if !defined(<%=prefix%>GLCheckError)
    #define <%=prefix%>GLCheckError(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__)
#endif
#if !defined(<%=prefix%>GLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define <%=prefix%>GLCheckErrorDebug(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__)
    #else
        #define <%=prefix%>GLCheckErrorDebug(x) x
    #endif
#endif

/* Type definitions */
<%=typeBlock%>

typedef struct <%=Prefix%>GLConfig
{
    khronos_int8_t support[<%=IdCount%>];

<%=funcPtrBlock%>
} <%=Prefix%>GLConfig;

extern <%=Prefix%>GLConfig <%=prefix%>GL; /* global instance. */

<%=PREFIX%>_FORCE_INLINE khronos_int8_t <%=prefix%>GLSupport(size_t id) {
    return <%=prefix%>GL.support[id];
}

#if <%=PREFIX%>_PROTO_IMPL

<%=funcImplBlock%>

<%=funcDefineBlock%>

#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* _<%=PREFIX%>_GL_H_ */
