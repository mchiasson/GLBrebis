/*******************************************************************************
 * This file was generated by GLBrebis on <%=now%>
 * https://github.com/mchiasson/GLBrebis
 *******************************************************************************
 * GLBrebis License (MIT)
 *******************************************************************************
 * Copyright (c) <%=year%> Mathieu-Andr√© Chiasson
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

#ifndef _<%=PREFIX%>_GL_H_
#define _<%=PREFIX%>_GL_H_ 1

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#if !defined(<%=PREFIX%>_GL_WRANGLER_ENABLED)
    #if __native_client__ || __EMSCRIPTEN__
        #include <GLES2/gl2.h>
        #include <GLES2/gl2ext.h>
        #define <%=PREFIX%>_GL_WRANGLER_ENABLED 0
    #else
        #define <%=PREFIX%>_GL_WRANGLER_ENABLED 1
    #endif
#endif

#if !defined(<%=PREFIX%>_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define <%=PREFIX%>_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define <%=PREFIX%>_FORCE_INLINE __attribute__((always_inline)) static __inline__
    #else
        #define <%=PREFIX%>_FORCE_INLINE static inline
    #endif
#endif

#ifndef <%=PREFIX%>_STD_CALL
    #if defined(_WIN32)
        #define <%=PREFIX%>_STD_CALL __stdcall
    #else
        #define <%=PREFIX%>_STD_CALL
    #endif
#endif

#if <%=PREFIX%>_GL_WRANGLER_ENABLED
    #if defined(__glu_h__)
        #error "GL/glu.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl_h_)
        #error "GL/gl.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl2_h_)
        #error "GL/gl2.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__glcorearb_h_)
        #error "GL/glcorearb.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl20_h_)
        #error "GLES2/gl2.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl_es20_h_)
        #error "OpenGLES/ES2/gl.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl30_h_)
        #error "GLES3/gl3.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl_es30_h_)
        #error "OpenGLES/ES3/gl.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl31_h_)
        #error "GLES3/gl31.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl32_h_)
        #error "GLES3/gl32.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__glext_h_)
        #error "GL/glext.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl2ext_h_)
        #error "GL/glext.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl_es20ext_h_)
        #error "OpenGLES/ES2/glext.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gl_es30ext_h_)
        #error "OpenGLES/ES3/glext.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #if defined(__gltypes_h_)
        #error "gltypes.h cannot be included before <%=Prefix%>GL.h"
    #endif

    #define __glu_h__ 1
    #define __gl_h_ 1
    #define __gl2_h_ 1
    #define __glcorearb_h_ 1
    #define __gl20_h_ 1
    #define __gl_es20_h_ 1
    #define __gl30_h_ 1
    #define __gl_es30_h_ 1
    #define __gl31_h_ 1
    #define __gl32_h_ 1
    #define __glext_h_ 1
    #define __gl2ext_h_ 1
    #define __gl_es20ext_h_ 1
    #define __gl_es30ext_h_ 1
    #define __gltypes_h_ 1

#endif

    /* GL and GL ES Definitions */
<%=defineBlock%>
    /* Version IDs */
<%=versionBlock%>
    /* Extension IDs */
<%=extensionBlock%>
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 */
bool <%=prefix%>GLInit();

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call <%=prefix%>GLInit() instead.
 */
void <%=prefix%>GLShutdown();

/*!
     Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.

     Usage example:

     \\code
     if(<%=prefix%>GLSupport(GL_VERSION_3_0) || <%=prefix%>GLSupport(GL_ES_VERSION_3_0))
     {
         void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
         std::copy(buffer.begin(), buffer.end(), pMapped);
         glUnmapBuffer(target);
     }
     else if (<%=prefix%>GLSupport(GL_EXT_map_buffer_range) && <%=prefix%>GLSupport(GL_OES_mapbuffer)
     {
         void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
         std::copy(buffer.begin(), buffer.end(), pMapped);
         glUnmapBufferOES(target);
     }
     else
     {
         glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
     }
     \\endcode
 */
<%=PREFIX%>_FORCE_INLINE bool <%=prefix%>GLSupport(size_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \\code
         // Only checks if compiled in debug.
         <%=prefix%>GLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         <%=prefix%>GLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \\endcode

     \\note <%=prefix%>GLCheckErrorDebug is disabled when the application is compiled for a release build.
     \\warning calling glGetError can affect your rendering performance. We recommend
     using <%=prefix%>GLCheckErrorDebug instead of <%=prefix%>GLCheckError so that the production
     build won't be impacted. If you want to use <%=prefix%>GLCheckError, make sure it is not called
     during time critical code path.
 */
void _<%=prefix%>GLCheckError(const char* fileName, int lineNumber);
#if !defined(<%=prefix%>GLCheckError)
    #define <%=prefix%>GLCheckError(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__)
#endif
#if !defined(<%=prefix%>GLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define <%=prefix%>GLCheckErrorDebug(x) x; _<%=prefix%>GLCheckError(__FILE__, __LINE__)
    #else
        #define <%=prefix%>GLCheckErrorDebug(x) x
    #endif
#endif


#if <%=PREFIX%>_GL_WRANGLER_ENABLED
/* Type definitions */<%for (typedef in result.getAllUniqueTypedefs()) {%>
<%=typedef.signature%><%}%>

/* Function pointer type definitions */<%for (funcPtr in result.getAllUniqueFuncPtrs()) {%>
<%=funcPtr.signature%><%}%>

/* Data structures */<%for (struct in result.getAllUniqueStructs()) {%>
<%=struct.getSignature()%><%}%>
#endif

typedef struct <%=Prefix%>GLAPIConfig
{
    bool        bIsGLES;
    const char* pRenderer;
    const char* pVendor;
    const char* pVersion;
    int32_t     nVersionMajor;
    int32_t     nVersionMinor;
    const char* extensions[<%=Math.max(result.getAllUniqueGLExtensionGroups().size(), result.getAllUniqueGLESExtensionGroups().size())%>];
    size_t      extensionsCount;
    const char* pShadingLanguageVersion;
    int32_t     nShadingLanguageVersionMajor;
    int32_t     nShadingLanguageVersionMinor;
    bool        supportedExtensions[<%=result.getAllUniqueVersionGroups().size() + result.getAllUniqueExtensionGroups().size() + 1%>];

#if <%=PREFIX%>_GL_WRANGLER_ENABLED
    /* GL function pointers */<%for (function in result.getAllUniqueVersionFunctions()) {%>
    <%=function.returnParam + (function.returnParam.endsWith("*") ? "" : " ")%>(<%=PREFIX%>_STD_CALL *<%=prefix%><%=function.name.substring(2)%>)(<%=function.paramDeclaration%>);<%}%>

    /* GL extension function pointers */<%for (function in result.getAllUniqueExtensionFunctions()) {%>
    <%=function.returnParam + (function.returnParam.endsWith("*") ? "" : " ")%>(<%=PREFIX%>_STD_CALL *<%=prefix%><%=function.name.substring(2)%>)(<%=function.paramDeclaration%>);<%}%>
#endif
} <%=Prefix%>GLAPIConfig;

extern <%=Prefix%>GLAPIConfig <%=prefix%>GLAPI; // global instance.

<%=PREFIX%>_FORCE_INLINE bool <%=prefix%>GLSupport(size_t extensionID) {
    return <%=prefix%>GLAPI.supportedExtensions[extensionID];
}

#if <%=PREFIX%>_GL_WRANGLER_ENABLED
<%for (function in result.getAllUniqueFunctions()) {%>
<%=PREFIX%>_FORCE_INLINE <%=function.returnParam + (function.returnParam.endsWith("*") ? "" : " ")%>_<%=prefix%><%=function.name.substring(2)%>(<%=function.paramDeclaration%>) {<%if (function.name.equals("glGetProgramPipelineivEXT") && function.paramDeclaration.matches(".*\\bpname\\b.*")) {%> if (<%=prefix%>GLSupport(GL_ES_VERSION_2_0) && (pname == GL_CURRENT_PROGRAM)) { pname = GL_ACTIVE_PROGRAM; } else if (<%=prefix%>GLSupport(GL_VERSION_1_0) && (pname == GL_ACTIVE_PROGRAM)) { pname = GL_CURRENT_PROGRAM; }<%}%> <%=function.returnParam.equalsIgnoreCase("void") ? "" : "return "%><%=prefix%>GLAPI.<%=prefix%><%=function.name.substring(2)%>(<%=function.paramCall%>); }<%}%>
<%for (function in result.getAllUniqueFunctions()) {%>
#define <%=function.name%> _<%=prefix%><%=function.name.substring(2)%><%}%>
#endif /* <%=PREFIX%>_GL_WRANGLER_ENABLED */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* _<%=PREFIX%>_GL_H_ */
